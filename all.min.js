(function() {
    'use strict';

    angular.module('app', [
        /*
         * Order is not important. Angular makes a
         * pass to register all of the modules listed
         * and then when app.dashboard tries to use app.data,
         * its components are available.
         */
         'app.core', 'app.layout', 'app.customPage', 'app.engagementStore', 'app.GiftCard'

        /*
         * Everybody has access to these.
         * We could place these under every feature area,
         * but this is easier to maintain.
         */ 
        

        /*
         * Feature areas
         */
    ]);

})();

(function() {
    'use strict';

    run.$inject = ['$window'];
    angular.module('app.customPage', ['ui.scrollpoint'])
    .run(run) ;

    function run($window) {
    // to init lazysizes at app start
    $window.lazySizesConfig = $window.lazySizesConfig || {};
    $window.lazySizesConfig.srcAttr = 'data-src';
    $window.lazySizesConfig.srcsetAttr = 'data-srcset';
    }
})();
(function() {
    'use strict';
    angular.module('app.engagementStore', []);
})();
(function() {
    'use strict';
    angular.module('app.GiftCard', []);
})();

(function() {
    'use strict';
    angular.module('app.layout', ['ngCookies']);
})();

(function() {
    'use strict';

    angular.module('app.core', [
        /*
         * Angular modules
         */
        'ngSanitize', 'ngAnimate', 'ui.bootstrap', 'ui.select'

        /*
         * Our reusable cross app code modules
         */
        
        /*
         * 3rd Party modules
         */

    ]);
})();

(function() {
    'use strict';

    angular.module('blocks.exception', ['blocks.logger']);
})();

(function() {
    'use strict';

    angular.module('blocks.logger', []);
})();

(function() {
    'use strict';

    angular.module('blocks.router', [
        'ngRoute',
        'blocks.logger'
    ]);
})();

(function() {
    "use strict";
    angular.module('app.customPage').controller('CustomPage', CustomPage);

    CustomPage.$inject = ['$scope', 'CustomPageDataService', '$compile', '$rootScope', '$q', '$timeout'];
    /* @ngInject */
    function CustomPage($scope, CustomPageDataService, $compile, $rootScope, $q, $timeout) {
        var vm = this;
        vm.customPage = {};
        vm.appliedStyle = {};
        vm.setBackgroundColor = setBackgroundColor;
        vm.searchJsonData = '{}'
        if (SEARCH_JSON_DATA != undefined){
            vm.searchJsonData = JSON.parse(SEARCH_JSON_DATA);
        }
        var sortyByOrder = R.sortBy(R.prop('order'));
        var mainDiv = $('#dynamicDirective');
        $rootScope.USED_STATIC_URL = USED_STATIC_URL;
        $rootScope.channel = "desktop";
        $rootScope.nc = (ctype == 'custompage'?'cp':'ct');
        
        function mobileChannelCheck() {
            (function(a){if(/(android|ipad|playbook|silk|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))$rootScope.channel = "mobile"})(navigator.userAgent||navigator.vendor||window.opera);
            return $rootScope.channel;
        }

        mobileChannelCheck();
        activate();

        function setBackgroundColor(pageStyle)
        {
            //Variable declaration for Background Colors
            //Backward Compatibility check
            pageStyle.bgColor = (pageStyle.bgColor == undefined)? '#fff' : pageStyle.bgColor;
            pageStyle.colorStop1 = (pageStyle.colorStop1 == undefined)? '#fff' : pageStyle.colorStop1;
            pageStyle.colorStop2 = (pageStyle.colorStop2 == undefined)? '#fff' : pageStyle.colorStop2;
            if (pageStyle.bgOption == 'bgImage' && pageStyle.picFile == undefined){
                pageStyle.bgOption = 'plainColor';
            }
            if (pageStyle.picFile == undefined){
                pageStyle.picFile = {};
            }
            var plainColor = {'background-color': pageStyle.bgColor, 'display' : 'block'};
            var gradientColorLinear = {'background-image':'-webkit-gradient(linear, left top, right top, color-stop(0%,'+ pageStyle.colorStop1 +'), color-stop(100%, '+ pageStyle.colorStop2 +')'};
            var gradientColorRadial = {'background-image':'radial-gradient(ellipse farthest-corner at 50% 50% , '+ pageStyle.colorStop1 +' 0%, '+ pageStyle.colorStop1 +' 50%, '+ pageStyle.colorStop2 +' 95%)', 'height': '100%', 'margin' : '0', 'background-repeat': 'no-repeat', 'background-attachment' : 'fixed'};

            //Variable declaration for Background Image

            var bodyPaintImage = {'background': 'url('+ pageStyle.picFile +')  no-repeat left center', 'background-size':'cover', 'height': '100%', 'margin' : '0','background-attachment' : 'fixed'};
            var bodyPaintPattern = {'background': 'url('+ pageStyle.picFile +') repeat', 'margin' : '0'};
                //For Plain Background
                if (pageStyle.bgOption == 'plainColor') {
                    vm.appliedStyle = plainColor;
                }
                //For Gradient Background
                else if (pageStyle.bgOption == 'gradientColor') {

                    if (pageStyle.pattern == 'Linear'){
                        vm.appliedStyle = gradientColorLinear;
                    }
                    else{
                        vm.appliedStyle = gradientColorRadial;
                    }
                }
                //For Background Image
                else if(pageStyle.bgOption == 'bgImage'){

                        if (pageStyle.imagePattern == 'selectedBGImage'){
                            vm.appliedStyle = bodyPaintImage;
                        }
                        else{
                            vm.appliedStyle = bodyPaintPattern;
                        }
                }

                $(document.body).css(vm.appliedStyle)
        }

        function activate() {
            if (is_search_page == 1 || is_search_page == 2){
                $rootScope.nc = 'ps';
                getSearchPageData(slug);
            }
            else if(is_search_page == 3){
                $rootScope.nc = 'sugg-ps';
                getSearchPageData('');
            }
            else{
                getCustomPage();
            }
        }

        function getCustomPage() {
            CustomPageDataService.getCustomPage().then(function(data) {
                if(data !== null){
                    vm.customPage = data;
                    var promise = buildSections(vm.customPage);
                    promise.then(function(){
                        $(mainDiv).fadeIn(2000);
                    });
                    return vm.customPage;
                }
            });
        }

        function getSearchPageData(slug){
            if (is_search_page == 1){
                if (vm.searchJsonData['show_deck'] == 1){
                    if(vm.searchJsonData['suggestion']){
                        slug = vm.searchJsonData['suggestion']
                    }
                    CustomPageDataService.getSearchPageData(slug , 'deck').then(function(data){
                       if(data!=null){
                           vm.customPage = {};
                           vm.customPage = {"pageGroupId":"","id":"","pgIrlNam":"","internalName":"","pageStyl":{}};
                           //Injecting commonly_searched, suggestion msg & banners
                           data.structure.commonly_searched = vm.searchJsonData.commonly_searched;
                           data.structure.suggestion_message = vm.searchJsonData.suggestion_message;
                           data.structure.banners =  vm.searchJsonData.banners;
                           vm.customPage.sectionDetails = [data.structure];

                           var promise = buildSections(vm.customPage);
                           promise.then(function(){
                               $(mainDiv).fadeIn(2000);
                           });
                           return vm.customPage;
                       }
                    });
                }
            }
            else if(is_search_page == 2){
                CustomPageDataService.getSearchPageData(slug , 'now-new').then(function(data){
                   if(data!=null){
                       vm.customPage = {};
                       vm.customPage = {"pageGroupId":"","id":"","pgIrlNam":"","internalName":"","pageStyl":{}};
                       data.sectionDetails = CustomPageDataService.updateNewAtBBList(data.sectionDetails, vm.searchJsonData);
                       vm.customPage.sectionDetails = data.sectionDetails;

                       var promise = buildSections(vm.customPage);

                       promise.then(function(){
                           $(mainDiv).fadeIn(2000);
                       });
                       return vm.customPage;
                   }
                });
            }
            else if(is_search_page == 3){
                CustomPageDataService.getSearchPageData(slug , 'sugg_search').then(function(data){
                   if(data!=null){
                       vm.customPage = {};
                       vm.customPage = {"pageGroupId":"","id":"","pgIrlNam":"","internalName":"","pageStyl":{}};
                       data.sectionDetails = CustomPageDataService.updateSuggestionList(data.sectionDetails,
                                                        vm.searchJsonData.suggested_search);
                       vm.customPage.sectionDetails = data.sectionDetails;

                       var promise = buildSections(vm.customPage);
                       promise.then(function(){
                           $(mainDiv).fadeIn(2000);
                       });
                       return vm.customPage;
                   }
                });
            }
            else if(is_search_page == 3){
                CustomPageDataService.getSearchPageData(slug , 'sugg_search').then(function(data){
                   if(data!=null){
                       vm.customPage = {};
                       vm.customPage = {"pageGroupId":"","id":"","pgIrlNam":"","internalName":"","pageStyl":{}};
                       data.sectionDetails = CustomPageDataService.updateSuggestionList(data.sectionDetails,
                                                        vm.searchJsonData.suggested_search);
                       vm.customPage.sectionDetails = data.sectionDetails;

                       var promise = buildSections(vm.customPage);
                       promise.then(function(){
                           $(mainDiv).fadeIn(2000);
                       });
                       return vm.customPage;
                   }
                });
            }
        }

        function getSmartBasketData() {
            CustomPageDataService.getSmartBasketData().then(function(data) {
                //data is the JSON response
                vm.customPage = data;
                var promise = buildSections(vm.customPage);
                   promise.then(function(){
                       $(mainDiv).fadeIn(2000);
                   });
            });
        }

        function buildSections(customPage) {
            var deferred = $q.defer();
            $timeout(function() {
                var sections = customPage.sectionDetails;
                vm.setBackgroundColor(customPage.pageStyl);
                var breakstyle = customPage.breakStyl;
                $(mainDiv).hide();
                var scope = {};
                var directive = {};
                sections =  sortyByOrder(sections);
                var display_pos = 1;
                angular.forEach(sections, function(section, key) {
                    scope = $scope.$new();
                    section.display_pos = display_pos++;
                    section.order = Number(section.order) + 1;
                    scope.dsection = section;
                    scope.dsection.pagegroupid = customPage.pageGroupId;
                    scope.dsection.pageid = customPage.id;
                    scope.dsection.pgIrlNam = customPage.pgIrlNam;
                    scope.dsection.pageinternalName = customPage.internalName;
                    scope.dsection.pageStyle = customPage.pageStyl;
                    directive = $compile(section.layout.renderingDirective)(scope);
                    mainDiv.append(directive);
                   // $( "#dynamicDirective > hr").css(breakstyle);
                });
                deferred.resolve('Complete');
            });
            return deferred.promise;
        }
    }

    function bbLazyLoad() {

        var directiveDefinitionObject = {
        transclude: 'element',
        priority : 1200, // High prio, so it runs before any other directive (changed needed for 1.2))
        terminal : true, // Prevents subsequent directives from being processed
        restrict : 'A',
        // Use the compile function to add DOM elements after link time
            compile: function (element, attributes, linker) {

                return function (scope, iterStartElement, attributes) {

                var hasBeenShown = false;
                var unwatchFn = scope.$watch(attributes.bbLazyLoad, function (value) {
                if (value && !hasBeenShown) {
                    hasBeenShown = true;
                    linker(scope, function (clone) {
                    iterStartElement.after(clone);
                    });
                    unwatchFn();
                    }
                });
            };
        }
    };

    return directiveDefinitionObject;
    }


    })();
(function() {
    "use strict";
    information.$inject = ['$compile'];
    angular.module('app.customPage')
        .directive('carouselWithTitle', carouselWithTitle)
        .directive('carouselOnlyImage', carouselOnlyImage)
        .directive('imageInfoViewAll', imageInfoViewAll)
        .directive('banners', banners)
        .directive('bannerCaption', bannerCaption)
        .directive('nonLinear', nonLinear)
        .directive('combo', combo)
        .directive('productDeck', productDeck)
        .directive('productTemplate', productTemplate)
        .directive('information',information)
        .directive('saving',saving)
        .directive('productWidgetMini', productWidgetMini)
        .directive('productTemplateInContainer',productTemplateInContainer)
        .directive('carouselProductWidget',carouselProductWidget)
//        .directive('featureProductPopup',FeatureproductTemplateInContainer)
        .directive('featuredProductTemplate',FeaturedProductTemplate)
        .directive('fallbackSrc',fallbackSrc);

    //To show Dummy image, if error in image request
    function fallbackSrc() {
          var fallbackSrc = {
            link: function postLink(scope, iElement, iAttrs) {
              iElement.bind('error', function() {
                angular.element(this).attr("src", iAttrs.fallbackSrc);
              });
            }
           }
           return fallbackSrc;
        }

    function information($compile) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/information.html',
            link: link
        };

        function link(scope, element, attrb){
            var el = $compile(scope.sectionModel.info)(scope);
            var section = angular.element(element)[0].querySelector('section');
            angular.element(section).append(el); 
        }
    }

    saving.$inject = ['CustomPageDataService']
    function saving(CustomPageDataService) {
            return {
                restrict: 'E',
                scope: {
                    sectionModel: '='
                },
                templateUrl: 'app/templates/innertemplates/saving.html',
                link: link
            };

            function link(scope, element, attrb){
                scope.sectionData = scope.sectionModel.section_data;
                scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics()
            }
        }


    productTemplate.$inject = ['$timeout'];
    function productTemplateController($scope, $rootScope, $timeout, UserDataservice, toastr, CustomPageDataService) {
            var vm = this
            var existingQuantity = null;

            var slugifyProduct = function (input) {
                var list = [];
                var res = "";
                list.push(input.p_brand);
                list.push(input.p_desc);
                list.push(input.w);
                var slugify = function(item){
                    if (!item)
                        return;

                    // make lower case and trim
                    var slug = item.toLowerCase().trim();

                    // replace invalid chars with spaces
                    slug = slug.replace(/[^a-z0-9\s-]/g, ' ');

                    // replace multiple spaces or hyphens with a single hyphen
                    slug = slug.replace(/[\s-]+/g, '-');

                    return slug;
                }

                for (var i=0;i<list.length;i++){
                    res += (slugify(list[i])||'');
                    if(i<(list.length-1)){
                        res += '-';
                    }
                }
                //This is done to remove multiple simultaneous hyphens (corner case)
                res = slugify(res);
                return res;
            };

            var productAvailable = function(stdSlot,expSlot){
                // return (stdSlot[0]!=null||expSlot[0]!=null)? true:false
                //If store_ri is empty then bydefault product should be available
                if(stdSlot[3]===false && expSlot[3]===false){
                    return true
                }
                else if ((stdSlot[0]===null && stdSlot[2]!==null) && (expSlot[0]===null && expSlot[3]===true)) {
                    return false
                }
                return ((stdSlot[2]===null && stdSlot[3]===true)
                        ||(expSlot[2]===null && expSlot[3]===true));
            }

            var logProductAvailability = function(productStore,memberStore,skuId) {
            var logged_data = {"productStore":productStore, "memberStore":memberStore, "skuId":skuId};
            var toBeLoggedData = logged_data;
            CustomPageDataService.logProductAvailablity(toBeLoggedData)
            }

            vm.calculate5kSlotHide = function(stdSlot, expSlot){
                //Do calculations to show only 1 slot if is5k is true
                if($rootScope.is_5k){
                    // If exp slot is Available then dont show std slot
                    // else if std slot is Available then dont show exp slot
                    // else if both are oos then show just one as usual
                    // Decide Bike or Van icon based on matching show_express key
                    if(expSlot && expSlot[0] && expSlot[0].show_express === true){
                        vm.selectedProduct.hideStdSlotFor5k = true;
                    } else if(expSlot && expSlot[0] && expSlot[0].show_express === false){
                        vm.selectedProduct.stdDiv = vm.selectedProduct.expDiv;
                        vm.selectedProduct.expDiv = [null, false, null, false]
                    } else if(stdSlot && stdSlot[0] && stdSlot[0].show_express === true){
                        vm.selectedProduct.expDiv = vm.selectedProduct.stdDiv;
                        vm.selectedProduct.stdDiv = [null, false, null, false]
                    } else if(stdSlot && stdSlot[0] && stdSlot[0].show_express === false){
                        vm.selectedProduct.hideExpSlotFor5k = true;
                        // vm.selectedProduct.stdDiv = vm.selectedProduct.expDiv;
                        // vm.selectedProduct.expDiv = [null, false, null, false]
                    }
                } else {
                    return true;
                }
            }

            vm.OOSCheck = function(products){
                for(var i=0; i< products.length;i++){
                    var stdDiv = getSlotsforProduct('standard',$rootScope.member_stores,products[i].store_availability);
                    var expDiv = getSlotsforProduct('express',$rootScope.member_stores,products[i].store_availability);
                    products[i]['oos'] = !(productAvailable(stdDiv, expDiv));
                }
            }
            var getSlotsforProduct = function (deliverytype,member_store,product_stores) {
                var filter_on_deltype = function (item) {
                    if(item.tab_type === deliverytype && item.pstat === "A"){
                        return true
                    }
                    else{
                        return false
                    }
                }
                var filter_on_O_deltype = function (item) {
                    if(item.tab_type === deliverytype && item.pstat === "O"){
                        return true;
                    }
                    else{
                        return false;
                    }
                }

                var deltype_check = function (item) {
                    if(item.tab_type === deliverytype){
                        return true;
                    }
                    else{
                        return false;
                    }
                }

                var final = null;
                var oos_final = null;

                var alist = R.filter(filter_on_deltype,product_stores);
                var olist = R.filter(filter_on_O_deltype,product_stores);
                var isDeliveryTypePresent = R.filter(deltype_check,product_stores);

                for(var i=0 ; i < alist.length ;i++ ){
                   if(member_store[alist[i].availability_info_id]){
                        final = member_store[alist[i].availability_info_id];
                        break;
                    }

                }

                for(var j=0 ; j < olist.length ;j++ ){
                    var memstore_id = olist[j].availability_info_id.replace(".OOSM", "");
                    if(member_store[memstore_id]){
                        oos_final = member_store[memstore_id];
                        break;
                    }
                }

                //True if OOS False if no slots
                var is_OOS = (alist.length >1)?true:false ;

                return [final,is_OOS, oos_final, (isDeliveryTypePresent.length>0)];
            }



            vm.selectedProduct = $scope.product;
            vm.selectedProduct.hideStdSlotFor5k = false;
            vm.selectedProduct.hideExpSlotFor5k = false;

            vm.selectedProduct.slug_desc = slugifyProduct(vm.selectedProduct);
            vm.selectedProduct.imgAltText = `${vm.selectedProduct.p_brand} ${vm.selectedProduct.p_desc} ${vm.selectedProduct.w}`;
            vm.selectedProduct.absoluteUrl = vm.selectedProduct.absolute_url;
            if($scope.bigSave && $scope.bigSave.show_discounted_price){
                
                if(vm.selectedProduct.discounted_prices_v2){
                    vm.selectedProduct.bigSaveEligible = ($scope.bigSave.discounted_price_id_to_show in vm.selectedProduct.discounted_prices_v2) ? true : false;
                    vm.selectedProduct.bigSavePrice = vm.selectedProduct.discounted_prices_v2[$scope.bigSave.discounted_price_id_to_show];
                } else if(vm.selectedProduct.discounted_prices){
                    vm.selectedProduct.bigSaveEligible = ($scope.bigSave.discounted_price_id_to_show in vm.selectedProduct.discounted_prices)? true:false;
                    vm.selectedProduct.bigSavePrice = vm.selectedProduct.discounted_prices[$scope.bigSave.discounted_price_id_to_show];
                }
                angular.forEach($scope.product.all_prods, function(prod){
                    if(prod.discounted_prices){
                        prod.bigSaveEligible = ($scope.bigSave.discounted_price_id_to_show in prod.discounted_prices) ? true : false;
                        prod.bigSavePrice = prod.discounted_prices[$scope.bigSave.discounted_price_id_to_show];
                    }
                });
                vm.bigSaveActiveInfo = $scope.bigSave.discounted_price_def[$scope.bigSave.discounted_price_id_to_show];
            }
            if(vm.selectedProduct && !vm.selectedProduct.is_promo){
                vm.selectedProduct.available = false;
                vm.selectedProduct.stdDiv = getSlotsforProduct('standard',$rootScope.member_stores,vm.selectedProduct.store_availability)
                vm.selectedProduct.expDiv = getSlotsforProduct('express',$rootScope.member_stores,vm.selectedProduct.store_availability)

                if(productAvailable(vm.selectedProduct.stdDiv,vm.selectedProduct.expDiv)){
                    vm.selectedProduct.available = true;
                }
                if((vm.selectedProduct.stdDiv[2]!==null && vm.selectedProduct.stdDiv[3] === true) &&
                    (vm.selectedProduct.expDiv[2]!==null && vm.selectedProduct.expDiv[3] === true)){
                    vm.selectedProduct.showOneOOS = true;
                }
                vm.calculate5kSlotHide(vm.selectedProduct.stdDiv ,vm.selectedProduct.expDiv);
            }
            if(!$scope.feature && vm.selectedProduct && (vm.selectedProduct.incart || vm.selectedProduct.no_items_in_cart)){
             if(vm.selectedProduct.incart){
                existingQuantity =  vm.selectedProduct.incart
             }
             else if(vm.selectedProduct.no_items_in_cart){
                existingQuantity = vm.selectedProduct.no_items_in_cart
            }
            else {
                existingQuantity = null;
            }

            }
            vm.itemposition = $scope.itmpos;
            vm.sectionModel = $scope.sectionModel;
            vm.ga_section_name = (vm.sectionModel.type == 'Default')?'BRPD':'CRPD';
            vm.sid = $scope.sid;
            vm.selectedQuantity = 0;
            vm.selectedQuantityText = '';
            vm.startQuantity = 1; //this is used when item is added from text box rather button +/-
            vm.onProductChange = onProductChange;
            vm.addToBasket = addToBasket;
            vm.decreamentQuantity = decreamentQuantity;
            vm.increamentQuantity = increamentQuantity;
            vm.broadcastEventNotify = broadcastEventNotify;
            vm.imageUrl = imageUrl;
            vm.showDeliveryDetails = showDeliveryDetails;
            vm.typeOfIcon = typeOfIcon;
            vm.showSlots = showSlots;
            vm.isPromoBlank = isPromoBlank;
            vm.isFlashSaleBlank = isFlashSaleBlank;
            vm.flashIsOff = true;
            vm.flashMessage = '';
            vm.setAvailablity = setAvailablity;
            vm.check = (existingQuantity === undefined) ? false : true;
            vm.available = false;
            var regxp = new RegExp('\\bexpress\\b');
            vm.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            vm.refreshcartQuantityforproduct = refreshcartQuantityforproduct;
            vm.showMultiSkuComboProducts = showMultiSkuComboProducts;
            updateSelectedQuantityAndQuantityText();


            vm.is_bb_brand = function is_bb_brand() {
                var brandList = ['fresho', 'bb royal', 'bb popular', 'fresho meat'];
                angular.forEach(brandList, function(item){
                       if(vm.selectedProduct.p_brand && vm.selectedProduct.p_brand.toLowerCase() === item){
                           vm.selectedProduct.bb_brand = true;
                       }
                   })
                   vm.selectedProduct.mp_mrp='MRP: ';
            }
            if(!$scope.feature){
                vm.is_bb_brand();
            }

            if($scope.feature){
                    $rootScope.$on('getCart',function(event,args){
                    args.is_feature_selected = args.is_feature_selected > 0 ? true :false
                })
            }


            function updateSelectedQuantityAndQuantityText() {
                vm.selectedQuantity = (existingQuantity === undefined) ? 0 : existingQuantity;
                vm.selectedQuantityText = (existingQuantity === undefined) ? '' : vm.selectedQuantity + ' in basket';//this is used to display text like 1 in basket, 2 in basket etc...
                if(existingQuantity){
                    vm.check = true;
                }
                else{
                    vm.check=false
                }
            }



            function broadcastEventNotify() {
                if($rootScope.ismember) {
                  $rootScope.$broadcast('Notify', vm.selectedProduct.sku);
                } else {
                    window.location.href = "/auth/login/?nc=nb"
                }
            }

            function setAvailablity(status){
                vm.available = status;
            }

            function isPromoBlank(p_promo_info){
                return R.isEmpty(p_promo_info);
            }


            //Code for Flash Sale starts here
            function isFlashSaleBlank(sale_info){
                if(sale_info !== undefined && sale_info !== null && Object.keys(sale_info).length !== 0 &&  sale_info.constructor !== Object){
                    vm.flashIsOff = false;
                    if(sale_info.show_counter == true){
                        var date = new Date().getTime()/1000;
                        $scope.timeConverter(date);
                        $rootScope.$on('TimeCheck', function(e,data){
                          $scope.timeConverter(data.data);
                        })
                    }else{
                      vm.flashMessage = vm.selectedProduct.sale_info.display_message;
                    }
                    return true;
                }
                return false;
            }



            $scope.timeConverter = function(time){
                var countDownTime = vm.selectedProduct.sale_info.end_time;
                var distance = (countDownTime - time) * 1000;

                var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                var remaining_time = "";

                if(hours <= 0){
                   if(minutes <= 0){
                    distance = 0;
                   }else{
                    remaining_time = minutes + "Min ";
                   }

                }else{
                   remaining_time = hours + "Hrs " + minutes + "Min ";
                }

                if(distance <= 0){
                    vm.flashMessage = '';
                }else{
                    vm.flashMessage = 'Ends in ' + remaining_time;
                }
            }

            //Code for Flash sale ends here


            function imageUrl(product) {
                return $scope.baseurl + '/' + product.p_img_url;
            }

            function typeOfIcon(slot) {
                return regxp.test(slot.fi_type);
            }

            function showDeliveryDetails(storeAvailablity) {
                var slot = $rootScope.member_stores[storeAvailablity.availability_info_id];

                if (slot) {
                    if (slot.fi_type == 'normal' || slot.fi_type == 'jit') {
                        var format = ''
                        var format_slot = function (slot) {
                            format = slot.match(/:(.*)/);
                            if (format) {
                                format = format[1]
                            }
                            var format = slot.replace("Standard Delivery:", '')
                            //format = format.replace(/AM.*to/, ' -')
                            //format = format.replace(/PM.*to/, ' -')
                            //format = format.replace(/Tomorrow/, ' ')
                            return format;
                        }
                        slot.eta //= format_slot(slot.display_slot);
                    }
                    else if(slot.fi_type == 'marketplace'){
                        slot.eta = " ";
                    }
                    else {
                        if (!$rootScope.is_express_availaible || $rootScope.express_closed === 'BB EXPRESS (SLOTS FULL)') {

                            return false;
                        }
                        var format = ''
                        var format_slot = function (slot) {
                            format = slot.match(/:(.*)/);
                            if (format) {
                                format = format[1]
                            }
                            var format = slot.replace("Express Delivery:", '')
                            var format = slot.replace("Standard Delivery:", '') // slot can have standard prefix for 5k
//                            format = format.replace(/AM.*to/, ' -')
//                            format = format.replace(/PM.*to/, ' -')
                            return format;
                        }
                        slot.eta; //= format_slot(slot.eta);
                    }

                    return slot;
                } else {
                    return false;
                }
            }
            

            function showSlots(storeAvailablity){
                var slot = $rootScope.member_stores[storeAvailablity.availability_info_id];
                return (slot !== undefined)?true:false;
            }

            function refreshcartQuantityforproduct(){

               vm.selectedQuantity = UserDataservice.getformatedcart()[vm.selectedProduct.sku]
               vm.selectedQuantityText = (vm.selectedQuantity === undefined) ? '' : vm.selectedQuantity + ' in basket';//this is used to display text like 1 in basket, 2 in basket etc...
               vm.startQuantity = (vm.selectedQuantity === undefined) ? 1 : vm.selectedQuantity;
                if(vm.selectedQuantity){
                    vm.check = true;
                }
                else{
                    vm.check=false
                }

            }

            function decreamentQuantity() {
                if (vm.selectedQuantity > 1) {
                    var quantity = Number(vm.selectedQuantity) - 1;
                    UserDataservice.updateCartQuantity(vm.selectedProduct.sku, quantity, vm.sid).then(function(status){
                        if (status) {
                            UserDataservice.getCart().then(function (cart) {
                                broadcastEventGetCart();
                                vm.selectedQuantity = UserDataservice.getformatedcart()[vm.selectedProduct.sku]
                                vm.startQuantity = vm.selectedQuantity;
                                vm.selectedQuantityText = vm.selectedQuantity + ' in basket';
                                vm.selectedProduct.is_feature_selected = vm.selectedQuantity
                                if (vm.selectedQuantity === 0) {
                                    vm.rmActivated();
                                    vm.startQuantity = 1;
                                    vm.selectedProduct.is_feature_selected=0
                                }


                            });
                            $(document).trigger('basketInteractionsPlowerWithAngular', [{'EventName':'Basket_Decrement', 'SkuID': vm.selectedProduct.sku, 'Quantity': 1, 'UnitMrp':vm.selectedProduct.mrp, 'UnitSalePrice': vm.selectedProduct.sp, 'ScreenInPageContext': vm.sectionModel.internalName,'ScreenInPagePosition': Number(vm.sectionModel.display_pos)}]);
                            CustomPageDataService.pushToGoogleAnalytics('_trackEvent', 'decr-quantity', 'custom-page', vm.sectionModel.display_pos+' | '+ vm.sectionModel.pageinternalName+' | ' + vm.ga_section_name + ' | '+ vm.sectionModel.internalName+' | '+vm.selectedProduct.sku+' | '+vm.selectedProduct.p_desc +' | '+ vm.itemposition,1);
                        }
                    });
                }
                else if(vm.selectedQuantity === 1){
                    UserDataservice.deleteFromBasket(vm.selectedProduct.sku,vm.sid).then(function(status){
                         if(status) {
                             UserDataservice.getCart().then(function(cart){
                                 broadcastEventGetCart();
                                 vm.selectedQuantity = 0;
                                 vm.startQuantity = 1;
                                 vm.check = false;
                                 vm.selectedProduct.is_feature_selected=0
                                 toastr.success('', 'Successfully Removed '+vm.selectedProduct.p_desc+'from basket ', {timeOut: 400,positionClass: "toast-top-full-width",closeButton: true,preventDuplicates: true});

                             })
                             $(document).trigger('basketInteractionsPlowerWithAngular', [{'EventName':'Basket_Remove', 'SkuID': vm.selectedProduct.sku, 'Quantity': vm.selectedQuantity, 'UnitMrp':vm.selectedProduct.mrp, 'UnitSalePrice': vm.selectedProduct.sp, 'ScreenInPageContext': vm.sectionModel.internalName,'ScreenInPagePosition': Number(vm.sectionModel.display_pos)}]);
                             CustomPageDataService.pushToGoogleAnalytics('_trackEvent', 'remove-from-cart', 'custom-page', vm.sectionModel.display_pos+' | '+ vm.sectionModel.pageinternalName+' | ' + vm.ga_section_name + ' | '+ vm.sectionModel.internalName+' | '+vm.selectedProduct.sku+' | '+vm.selectedProduct.p_desc +' | '+ vm.itemposition,1);

                         }else{
                           toastr.error('Could not remove product ','Remove From Basket');
                         }
                    });
                }
            }

            function broadcastEventGetCart() {
                $rootScope.$broadcast('getCart', vm.selectedProduct);
            }

            function increamentQuantity() {

                    var quantity = Number(vm.selectedQuantity) + 1;
                    UserDataservice.updateCartQuantity(vm.selectedProduct.sku, quantity, vm.sid).then(function(status){
                        if (status) {
                             UserDataservice.getCart().then(function(cart){
                                 broadcastEventGetCart();
                                 vm.selectedQuantity = UserDataservice.getformatedcart()[vm.selectedProduct.sku]
                                 vm.startQuantity = vm.selectedQuantity;
                                 vm.selectedQuantityText = vm.selectedQuantity + ' in basket';


                             });
                            $(document).trigger('basketInteractionsPlowerWithAngular', [{'EventName':'Basket_Increment', 'SkuID': vm.selectedProduct.sku, 'Quantity': 1, 'UnitMrp':vm.selectedProduct.mrp, 'UnitSalePrice': vm.selectedProduct.sp, 'ScreenInPageContext': vm.sectionModel.internalName, 'ScreenInPagePosition': Number(vm.sectionModel.display_pos)}]);
                              CustomPageDataService.pushToGoogleAnalytics('_trackEvent', 'incr-quantity', 'custom-page', vm.sectionModel.display_pos+' | '+ vm.sectionModel.pageinternalName+' | ' + vm.ga_section_name + ' | '+ vm.sectionModel.internalName+' | '+vm.selectedProduct.sku+' | '+vm.selectedProduct.p_desc +' | '+ vm.itemposition,1);
                        }
                    });

            }

            function addToBasket(product) {
                if(vm.startQuantity > 0) {
                    UserDataservice.updateCartQuantity(product.sku, vm.startQuantity, vm.sid).then(function(status){
                        if (status.success) {
                            vm.selectedQuantity = vm.startQuantity;
                            vm.startQuantity = vm.selectedQuantity;
                            vm.selectedQuantityText = vm.startQuantity + ' in basket';
                            vm.check = true;
                            vm.selectedProduct.is_feature_selected = vm.selectedQuantity;
                            broadcastEventGetCart();
                            //Akmai based city info - User clicks add button on a product for the first time without choosing city / login
                               if($.cookie('_bb_ftvid')){
                                //$('.top-header').addClass('locpops');
                                //$('.bb-brand-section').css('top', '26px');
                                //$scope.$emit('FirstTimeUser');
                                //vm.cityMessage = true;
                               }else{
                                $('.top-header').removeClass('locpops');
                                $('.bb-brand-section').css('top', '0px');
                                vm.cityMessage = false;
                                toastr.success('', 'Successfully added ' + product.p_desc + ' '+ product.w + ' to the basket' , {timeOut: 5000,positionClass: "toast-top-full-width",closeButton: true,preventDuplicates: true,preventOpenDuplicates: true});
                               }
                           //Akmai based city info - User clicks add button on a product for the first time without choosing city / login

                            vm.check = true;
                            $(document).trigger('basketInteractionsPlowerWithAngular', [{'EventName':'Basket_Add', 'SkuID': vm.selectedProduct.sku, 'Quantity': vm.selectedQuantity, 'UnitMrp':vm.selectedProduct.mrp, 'UnitSalePrice': vm.selectedProduct.sp, 'ScreenInPageContext': vm.sectionModel.internalName, 'ScreenInPagePosition': Number(vm.sectionModel.display_pos)}]);


                            var itemInfo = {
                                "id": product.sku,
                                "name": product.pc_n,
                                "brand": product.p_brand,
                                "category": product.tlc_n,
                                "quantity": 1,
                                "price":  product.sp
                            }


                            CustomPageDataService.pushToGoogleAnalytics('_trackEvent', 'add-to-cart', 'custom-page', vm.sectionModel.display_pos+' | '+ vm.sectionModel.pageinternalName+' | ' + vm.ga_section_name + ' | '+ vm.sectionModel.internalName+' | '+vm.selectedProduct.sku+' | '+vm.selectedProduct.p_desc +' | '+ vm.itemposition,1, itemInfo);

                           CustomPageDataService.pushToGTM('add_to_basket_onclick', vm.selectedProduct.sku,  vm.selectedQuantity, vm.selectedProduct.sp);

                        }
                        else{

                            var cart = UserDataservice.getformatedcart()
                            if(cart[product.sku]){
                                vm.startQuantity = cart[product.sku]
                            }
                            else{
                                vm.startQuantity = 1
                            }
                        }
                    });
                }
                else{
                    toastr.error('Invalid Quantity','Add To Basket',{timeOut: 5000,positionClass: "toast-top-full-width",closeButton: true,preventDuplicates: true,preventOpenDuplicates: true});
                    vm.check = false;
                }
            }


            function onProductChange(product) {
                vm.selectedProduct = product;
                vm.selectedProduct.slug_desc = slugifyProduct(vm.selectedProduct);
                vm.selectedProduct.imgAltText = `${vm.selectedProduct.p_brand} ${vm.selectedProduct.p_desc} ${vm.selectedProduct.w}`;
                vm.selectedProduct.absoluteUrl = vm.selectedProduct.absolute_url;
                vm.selectedProduct.available = false;
                if(vm.selectedProduct &&  !vm.selectedProduct.is_promo){
                    vm.selectedProduct.available = false;
                    vm.selectedProduct.stdDiv = getSlotsforProduct('standard',$rootScope.member_stores,vm.selectedProduct.store_availability)
                    vm.selectedProduct.expDiv = getSlotsforProduct('express',$rootScope.member_stores,vm.selectedProduct.store_availability)
                    if(productAvailable(vm.selectedProduct.stdDiv,vm.selectedProduct.expDiv)){
                        vm.selectedProduct.available = true;
                    }
                    if((vm.selectedProduct.stdDiv[2]!==null && vm.selectedProduct.stdDiv[3] === true) &&
                    (vm.selectedProduct.expDiv[2]!==null && vm.selectedProduct.expDiv[3] === true)){
                        vm.selectedProduct.showOneOOS = true;
                    }
                    vm.calculate5kSlotHide(vm.selectedProduct.stdDiv ,vm.selectedProduct.expDiv);
                }
                $scope.cartItem = UserDataservice.getformatedcart();
                if($scope.cartItem && $scope.cartItem[vm.selectedProduct.sku]) {
                    $scope.cartItem = UserDataservice.getformatedcart();
                    existingQuantity = $scope.cartItem[vm.selectedProduct.sku];
                }
                else if(vm.selectedProduct.incart) {
                    existingQuantity = vm.selectedProduct.incart;
                }
                else {
                    existingQuantity = null;
                }
                updateSelectedQuantityAndQuantityText();
                $(this).dropdown("toggle");
            }

            function showMultiSkuComboProducts(productSku, name){
                UserDataservice.getMultiSkuComboProducts(productSku).then(
                    function(data){
                        if(data){
                            var product_list = data['data'];
                            var existingQuantity = null;
                            vm.sectionModel.products = product_list;
                            if(vm.sectionModel.products.length>1){
                                vm.sectionModel.comboTitle = "Combos using "+ name;
                            }
                            else{
                                vm.sectionModel.comboTitle = "Combo using "+ name;
                            }
                            var nav_required = (vm.sectionModel.products.length > 3)? true : false;
                            var item_count = (vm.sectionModel.products.length < 3)? vm.sectionModel.products.length : 3;
                            $('#comboModal_'+vm.sectionModel.section_id).modal('show');
                            $('#comboModal_'+vm.sectionModel.section_id+' .close').on('click', function () {
                              $('.comboCarousel').trigger('destroy.owl.carousel');
                            });
                            $timeout(function() {
                                $('#comboModal_'+vm.sectionModel.section_id+' .comboCarousel').trigger('owl.stop');
                                var $owl = $('#comboModal_'+vm.sectionModel.section_id+' .comboCarousel').owlCarousel({
                                    loop: false,
                                    margin: 10,
                                    nav: nav_required ,
                                    navText: [" ", " "],
                                    responsive: {
                                        0: {
                                            items: item_count
                                        },
                                        600: {
                                            items: item_count
                                        },
                                        1000: {
                                            items: item_count
                                        }
                                    }

                                });
                            }, 500);
                            if($(document).width() > 767){
                                if (vm.sectionModel.products.length == 1) {
                                    $('#comboModal_'+vm.sectionModel.section_id+' .modal-dialog').css('width','285px');
                                }
                                else if (vm.sectionModel.products.length == 2) {
                                    $('#comboModal_'+vm.sectionModel.section_id+' .modal-dialog').css('width','520px');
                                }
                                else {
                                    $('#comboModal_'+vm.sectionModel.section_id+' .modal-dialog').css('width','730px');
                                }
                            }
                        }
                    }
                );
            }

            $rootScope.$on('CART_ITEM_CHANGED', function (event,product) {
                if(vm.selectedProduct.sku === product.sku){
                   vm.selectedQuantity = product.qty;
                   vm.startQuantity = (vm.selectedQuantity === 0)?1:product.qty;
                   if(vm.selectedQuantity == 0){
                       vm.check = false;
                   }
                   else{
                       vm.check = true
                   }
                   vm.selectedQuantityText = vm.selectedQuantity + ' in basket';
                }
            });

            $rootScope.$on("PAGE_DATA_LOADED",function(){
                vm.selectedProduct = $scope.product;
                vm.selectedProduct.slug_desc = slugifyProduct(vm.selectedProduct);
                vm.selectedProduct.imgAltText = `${vm.selectedProduct.p_brand} ${vm.selectedProduct.p_desc} ${vm.selectedProduct.w}`;
                vm.selectedProduct.absoluteUrl = vm.selectedProduct.absolute_url;
                if(vm.selectedProduct && !vm.selectedProduct.is_promo){
                    vm.selectedProduct.available = false;
                    vm.selectedProduct.stdDiv = getSlotsforProduct('standard',$rootScope.member_stores,vm.selectedProduct.store_availability)
                    vm.selectedProduct.expDiv = getSlotsforProduct('express',$rootScope.member_stores,vm.selectedProduct.store_availability)
                    if(productAvailable(vm.selectedProduct.stdDiv,vm.selectedProduct.expDiv)){
                        vm.selectedProduct.available = true;
                    }
                    if((vm.selectedProduct.stdDiv[2]!==null && vm.selectedProduct.stdDiv[3] === true) &&
                        (vm.selectedProduct.expDiv[2]!==null && vm.selectedProduct.expDiv[3] === true)){
                        vm.selectedProduct.showOneOOS = true;
                    }
                    else{
                        vm.selectedProduct.showOneOOS = false;
                    }
                    vm.calculate5kSlotHide(vm.selectedProduct.stdDiv ,vm.selectedProduct.expDiv);
                }
            })
        }
    function productTemplate() {
        return {
            restrict: 'E',
            scope: {
                product: '=',
                baseurl: '@',
                sid: '@',
                cartItem: '=',
                sectionModel: '=',
                itmpos: '@',
                bigSave: '='
            },
            templateUrl: 'app/templates/innertemplates/productTemplate.html',
            controller: ['$scope', '$rootScope','$timeout', 'UserDataservice', 'toastr', 'CustomPageDataService', productTemplateController],
            controllerAs: 'vm'
        };

    }

    function productTemplateInContainer() {
        return {
            restrict: 'E',
            scope: {
                product: '=',
                baseurl: '@',
                sid: '@',
                cartItem: '=',
                sectionModel: '=',
                itmpos:'@',
                bigSave: '=',
            },
            templateUrl: 'app/templates/innertemplates/productTemplateInContainer.html',
            controller: ['$scope', '$rootScope','$timeout', 'UserDataservice', 'toastr', 'CustomPageDataService', productTemplateController],
            controllerAs: 'vm'
        };


    }

    function FeaturedProductTemplate() {
        return {
            restrict: 'E',
            scope: {
                product: '=',
                baseurl: '@',
                sid: '@',
                cartItem: '=',
                sectionModel: '=',
                itmpos:'@',
                bigSave: '='
            },
            templateUrl: 'app/templates/innertemplates/featuredProductTemplate.html',
            controller: ['$scope', '$rootScope', '$timeout', 'UserDataservice', 'toastr', 'CustomPageDataService', productTemplateController],
            controllerAs: 'vm'
        };


        function FeaturedProductTemplateController($scope,$rootScope,CustomPageDataService){
                var vm = this;
                var existingQuantity = null;
                vm.selectedProduct = $scope.product;
                vm.selectedProduct.slug_desc = slugifyProduct(vm.selectedProduct);
                vm.selectedProduct.imgAltText = `${vm.selectedProduct.p_brand} ${vm.selectedProduct.p_desc} ${vm.selectedProduct.w}`;
                vm.selectedProduct.absoluteUrl = vm.selectedProduct.absolute_url;
                vm.available = false;
                if(vm.selectedProduct){
                    vm.selectedProduct.available = false;
                    vm.selectedProduct.loopCount = vm.selectedProduct.store_availability;
                    angular.forEach(vm.selectedProduct.store_availability, function(store_availability, index){
                        if(store_availability.pstat != 'O' && showSlots(store_availability)){
                            vm.selectedProduct.available = true;
                        }
                        else if(store_availability.pstat == 'O'){
                            if (vm.selectedProduct.available == true){
                                vm.selectedProduct.store_availability[index].show_oos_full = true;
                            }
                        }
                    });
                    if(vm.selectedProduct.available == false){
                        vm.selectedProduct.loopCount = 1;
                    }
                }
                vm.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
                if(vm.selectedProduct.incart){
                    existingQuantity =  vm.selectedProduct.incart
                }
                vm.check = (existingQuantity === undefined) ? false : true;
        }


    }

//    function FeatureproductTemplateInContainer() {
//        return {
//            restrict: 'E',
//            scope: {
//                feature:'@',
//                product: '=',
//                baseurl: '@',
//                sid: '@',
//                cartItem: '=',
//                sectionModel: '=',
//                itmposlinear: '@'
//            },
////            templateUrl: 'app/templates/featureProdTemplate.html',
//            controller: ['$scope', '$rootScope', 'UserDataservice', 'toastr', 'CustomPageDataService', productTemplateController],
//            controllerAs: 'vm',
//            link : function(scope, element, attrs, controller){
////            scope.$on('featurehover', function(event, args) {
////                    var existingQuantity = null;
////                    scope.product = args.product.product;
////                    controller.selectedProduct = args.product.product;
////                    controller.is_bb_brand();
////                    controller.refreshcartQuantityforproduct()
////            });
//            }
//        };
//    }

    productDeck.$inject = ['CustomPageDataService', '$compile', '$timeout'];
    function productDeck(CustomPageDataService, $compile, $timeout) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            controller: ['$scope', '$rootScope','CustomPageDataService', '$timeout', productDeckController],
            controllerAs: 'vm',
            templateUrl: 'app/templates/innertemplates/productDeck.html'
        };

        function productDeckController($scope, $rootScope, CustomPageDataService, $timeout) {
            var vm = this, appliedFilters = {sid:'', filters:[]};
            vm.outofstockproduct = '';
            vm.sectionModel = $scope.sectionModel;
            $scope.Math = window.Math;
            vm.dynamicBanners = [];
            if(vm.sectionModel.banners){
                vm.dynamicBanners = vm.sectionModel.banners;
            }
            vm.tab_info = {};
            vm.bootstrapTabs = [];
            vm.activeTab = 1;
            vm.screen_name = '';
            vm.header_section = {};
            vm.changeNameToAllProductsIfStandard = changeNameToAllProductsIfStandard;
            vm.onClickingTabHeader = onClickingTabHeader;
            vm.removeFilter = removeFilter;
            vm.onFacetFilterChange = onFacetFilterChange;
            vm.clearAllFilters = clearAllFilters;
            vm.buildCategoryURL = buildCategoryURL;
            vm.sortOn = sortOn;
            vm.selectedSort = 'popularity';
            vm.cart_info = {};
            vm.filters = []; //this filter is show at the product deck level just below the tab.
            vm.facetFilters = [];
            vm.brandSearch = '';
            vm.baseImageUrl = '';
            vm.numberOfProducts = 0;
            vm.sid = vm.sectionModel.viewAllUrl;
            $rootScope.sid = vm.sectionModel.viewAllUrl;
            vm.filtered_sid = vm.sectionModel.viewAllUrl; //This sid will keep changing after applying filters (used for category redirect url)
            vm.USED_STATIC_URL = USED_STATIC_URL;
            vm.currentActiveTab = {};
            vm.sortOrder = "popularity";
            vm.reapplyFilters = reapplyFilters;
            vm.ignore_productdeck_call = false;
            vm.is_init = true; // This flag is used to do network calls only once in the beginning and not an ng-change of tab change event
            vm.base_sid = ''; // Taken in First GetSysGenProductDeck call and set to sid variable in dataservice.js
            vm.getfilterCount = getFilterCount;
            vm.filterCount = 0;
            vm.commonly_searched = ($scope.sectionModel.commonly_searched)? $scope.sectionModel.commonly_searched:{};
            vm.suggestion_message = ($scope.sectionModel.suggestion_message)? $scope.sectionModel.suggestion_message:{};

            vm.products_cached = []
            vm.promos_cached = []
            vm.is_offers_on_cat = false

            vm.nc = (ctype == 'custompage'?'cp-fa':'ct-fa');
            vm.offer_sub_type = vm.sectionModel.alloffersubtype;
            vm.nc_paginate = (ctype == 'custompage'?'cp':'ct');
            vm.nc_sort = (ctype == 'custompage'?'cp-sort':'ct-sort');
            vm.justFiltered = true; //This flag is used to 'not trigger' Paginate just after applying a filter
            vm.endofPage = false;
            vm.execute = true;  //This flag is used to set MutationLock on Scrolling Event
            if (typeof discount_data !== 'undefined') {
                vm.bigSave = JSON.parse(discount_data);
            }
            var groupByTabName = R.groupBy(function(detail) {return detail.tab_type;});
            var sortByTabTypeCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('tab_type')));
            // var sortOptions = {alphabetical: R.comparator(function(product1, product2) { return R.toLower(product1.p_desc) < R.toLower(product2.p_desc)}),
            //                    lowToHighPrice: R.comparator(func
            // tion(product1,product2){ return Number.parseFloat(product1.sp) < Number.parseFloat(product2.sp)}),
            //                    highToLowPrice: R.comparator(function(product1,product2){ return Number.parseFloat(product1.sp) > Number.parseFloat(product2.sp)}),
            //                    popularity: R.comparator(function(product1, product2) { return R.toLower(product1.p_desc) > R.toLower(product2.p_desc)})
            //                   };
            var sortFiltersByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('filter_name')));
            var isFacet = function(filter){if(filter.type === 'facet') {return true} else {return false}};



            vm.show_products = function(tabproducts){
                
                
                return (tabproducts.product_info)?tabproducts.product_info.products:[];
                
                
            }
            
            //This method is applicaple only if tab has promo's
            var sort_offers_products = function(tabproducts,reverse){
                var tab_promos = []
                var tab_products = []
                if(tabproducts.promo_info && tabproducts.promo_info.promos){
                    // console.log("product cache:",vm.products_cached)
                    // console.log("products:",tabproducts.product_info.products)
                    // console.log("promo cache:",vm.promos_cached)
                    // console.log("promos:",tabproducts.promo_info.promos)
                    var product_only_filter = function(item){ return item.sku }
                    var promo_only_filter = function(item){ return item.is_promo }
                    var only_products = R.filter(product_only_filter,tabproducts.product_info.products)
                    var promo_in_products = R.filter(promo_only_filter,tabproducts.product_info.products)
                    tab_promos = R.concat(promo_in_products,R.concat(tabproducts.promo_info.promos,vm.promos_cached))
                    tab_products = R.concat(only_products,vm.products_cached)
                    // console.log("concat products:",tab_products)
                    // console.log("concat promos:",tab_promos)
                    var merged_data = merge(tab_products,tab_promos,'display_order',reverse)
                    vm.promos_cached = merged_data['prom']
                    vm.products_cached = merged_data['prod']
                    console.log('final:',merged_data)
                    tabproducts.product_info.products =  R.concat(merged_data['final'],vm.products_cached)
                    vm.products_cached = []
                    if(tabproducts.product_info.product_page == tabproducts.product_info.tot_pages){
                        tabproducts.product_info.products  = R.concat(tabproducts.product_info.products,vm.promos_cached)
                    }
                }
            }

            var merge = function (products,promos,key,reverse) {
                var i = 0
                var j = 0
                var final_list=[]
                var order = -1
                if(reverse){
                    order = 1
                }
                var diff = function(a,b){return (a[key]-b[key]) * order} 
                products = R.sort(diff, R.uniqBy(R.prop('sku'),products))
                promos = R.sort(diff, R.uniqBy(R.prop('promo_id'), promos))

                //console.log(products)
                //console.log(promos)
                function lessthan(item1,item2,key){ return item1[key] < item2[key]}
                function greaterthan(item1,item2,key){return item1[key] > item2[key]}

                var mergecondition = lessthan
                if(reverse){
                    mergecondition = greaterthan
                }
                while (j < products.length && i < promos.length) {
                    
                    if (mergecondition(products[j],promos[i],key)) {
                        final_list.push(promos[i])
                        promos[i] = -1
                        i++
                    }
                    else {
                        final_list.push(products[j])
                        products[j] = -1
                        j++
                    }

                }
                var final_filter_promos = R.filter(function(item){ return item != -1}, promos)
                var final_filter_products = R.filter(function(item){ return item != -1}, products)
                final_list = R.concat(final_list,final_filter_products)
                final_filter_products=[]
                if(final_list.length == 0  && final_filter_promos.length > 0){
                    final_list = final_filter_promos
                }
                return {    final:final_list,
                            prod:final_filter_products,
                            prom:final_filter_promos
                        }

            }

            var setQuickFilter = function(data){
                if (data.tab_info[0].header_section){
                    var tempData = quick_filterData(data.tab_info[0].header_section.items);
                    delete tempData.undefined;
                    vm.quick_filterItems = tempData;
                }
            }

            setTimeout(function() {
                $("#filterbar").stick_in_parent({
                    parent: ".sticky-parent",
                    offset_top: 60
                });
            }, 100);

            function getFilterCount(){
                vm.filterCount = 0;
                angular.forEach(vm.filters, function (value, key) {
                    var values = [];
                    if(value['type']!='tabbed')
                    {
                        angular.forEach(value.appliedFilters, function (value, key) {
                            vm.filterCount += 1;
                        });
                    }
                });
            }

            function sortOn(typeOfSort) {
                vm.ignore_productdeck_call = false;
                vm.is_init = false;
                vm.selectedSort = typeOfSort;
                vm.execute = false;
                var d_name = R.find(R.propEq('value', typeOfSort))(vm.sortOptions).display_name;
                CustomPageDataService.pushToGoogleAnalytics('_trackEvent',vm.nc_sort,'custom-page',d_name ,1);
                reapplyFilters();
                vm.currentActiveTab.currentpage = 1;
                location.hash = '!page='+vm.currentActiveTab.currentpage;
                angular.forEach(vm.bootstrapTabs, function (bootstrapTab, index) {
                    bootstrapTab.currentpage = 1;
                });

                vm.justFiltered = true;
                if(isEndOfPage()){
                    vm.endofPage = true;
                }
                else{
                    vm.endofPage = false;
                }
                //Snowplow - Sort Filter
                var SortData = {};
                SortData.o = vm.selectedSort;
                SortData.sid = '';
                SortData.sortCriteria = d_name;
                $(document).trigger('filterInteractionsPlower', [SortData]);
                //Snowplow - Sort Filter
            }

            //Probably Unused function
            function buildCategoryURL(categorySlug){
                ///pc/grocery-staples/dals-pulses/?nc=fa&sid=yJxde4WiY2OnMzgxfDUwMKFjAaJuZsKiYW_ComJjkc0HNQ==
                return '/pc/' + categorySlug +'/?nc=fa&sid=' + vm.sid;
            }
            var filter = 0;
            function onFacetFilterChange(facetFilter,filterName, filter_slug, referrerInPageContext){
                var applyOrNot = (facetFilter.selected == true ? 'Apply':'Unapply');
                CustomPageDataService.pushToGoogleAnalytics('_trackEvent',vm.nc,'custom-page',filterName+'|'+facetFilter.display_name+'|'+ applyOrNot ,1);
                vm.is_init = false
                vm.ignore_productdeck_call = false
                vm.currentActiveTab.currentpage = 1;
                vm.justFiltered = true;
                vm.execute = false;
                if(isEndOfPage()){
                    vm.endofPage = true;
                }
                else{
                    vm.endofPage = false;
                }
                location.hash = '!page='+vm.currentActiveTab.currentpage;
                angular.forEach(vm.bootstrapTabs, function (bootstrapTab, index) {
                    bootstrapTab.currentpage = 1;
                });
                if(facetFilter.selected){
                    if(R.find(R.propEq('name', filterName))(vm.filters)) {
                        if(filter_slug == "categories") {
                            R.find(R.propEq('name', filterName))(vm.filters).appliedFilters = [];
                        }
                        R.find(R.propEq('name', filterName))(vm.filters).appliedFilters.push({name: facetFilter.display_name,facetFilter:facetFilter});
                    }else{
                        vm.filters.push({'name': filterName , 'type':'facet', 'slug':filter_slug, 'appliedFilters': [{name: facetFilter.display_name,facetFilter:facetFilter}]});
                    }
                //Snowplow - Apply Filter
                    var filterData = {};
                    filterData.apply = true;
                    filterData.filter = '1';
                    filterData.filter_type = filterName;
                    filterData.referrerInPageContext = (referrerInPageContext === undefined)?'':referrerInPageContext;
                    var htmlparse = facetFilter.display_name;
                    filterData.label = htmlparse.replace(/<\/?span[^>]*>/g,"");
                    $(document).trigger('filterInteractionsPlower', [filterData]);
                //Snowplow - Apply Filter
                }else{
                    if(filter_slug != "categories") {
                        var fltIndex = R.findIndex(R.propEq('name', filterName))(vm.filters);
                        var facetIndex = R.findIndex(R.propEq('name', facetFilter.display_name))(vm.filters[fltIndex].appliedFilters);
                        vm.filters[fltIndex].appliedFilters.splice(facetIndex,1);
                        clearFacetFilter(vm.filters[fltIndex].appliedFilters,fltIndex);
                    }
                }
                vm.reapplyFilters();
            }

            function reapplyFilters() {
                vm.currentActiveTab.showmore = false
                appliedFilters.sid = vm.sid;
                var filters = [];
                if (vm.filters.length > 0) {
                    angular.forEach(vm.filters, function (value, key) {
                        var values = [];
                        angular.forEach(value.appliedFilters, function (value, key) {
                            values.push(value.facetFilter.filter_value_slug);
                        });
                        filters.push({"filter_slug": value.slug, "values": values});
                    });
                }
                vm.promos_cached = [];
                appliedFilters.filters = filters;
                if(!vm.is_init && !vm.ignore_productdeck_call){
                    vm.ignore_productdeck_call = false;
                    if (vm.sectionModel.productwidgetuserslug)
                        CustomPageDataService.updateProductDeck(vm.sectionModel.productsystemtype, appliedFilters, vm.selectedSort, vm.sectionModel.productwidgetuserslug, vm.currentActiveTab.tab_type,sid, vm.base_sid,vm.offer_sub_type).then(getProductDeckApplyFilterComplete);
                    else if (slug)
                        CustomPageDataService.updateProductDeck(vm.sectionModel.productsystemtype, appliedFilters, vm.selectedSort, slug, vm.currentActiveTab.tab_type,sid, vm.base_sid , vm.offer_sub_type).then(getProductDeckApplyFilterComplete);
                }

            }

            function removeFilter(parentIndex,index,filter) {
                vm.is_init = false;
                vm.ignore_productdeck_call = false;
                CustomPageDataService.pushToGoogleAnalytics('_trackEvent',vm.nc,'custom-page',filter.name+'|'+filter.appliedFilters[index].facetFilter.display_name+'|'+ 'Unapply' ,1);

                //Snowplow - Remove Filter
                var removeFilterData = {};
                removeFilterData.apply = false;
                removeFilterData.filter = '1';
                removeFilterData.filter_type = filter.name;
                removeFilterData.label = filter.appliedFilters[index].facetFilter.display_name;
                $(document).trigger('filterInteractionsPlower', [removeFilterData]);
                //Snowplow - Remove Filter


                if(filter.type !== "tabbed"){
                    filter.appliedFilters[index].facetFilter.selected = false;
                }
                else{
                    vm.activeTab = 1;
                }
                filter.appliedFilters.splice(index, 1);
                clearFacetFilter(filter.appliedFilters,parentIndex);
                if(vm.filters.length > 0){
                    vm.reapplyFilters();
                }else {
                    vm.clearAllFilters();
                }

            }

            function clearFacetFilter(appliedFilters,parentIndex){
                if(appliedFilters.length ===0){
                    vm.filters.splice(parentIndex,1);
                }
            }

            function clearAllFilters() {
                vm.activeTab = 1;
                vm.currentActiveTab = vm.bootstrapTabs[0];
                vm.is_init = false;
                CustomPageDataService.pushToGoogleAnalytics('_trackEvent',vm.nc,'custom-page','Clear All',1);
                uncheckAllCheckboxInFacetFilters();
                $(document).trigger('clearAll');
                vm.justFiltered = true;
                if(isEndOfPage()){
                    vm.endofPage = true;
                }
                else{
                    vm.endofPage = false;
                }
                vm.reapplyFilters();
            }

            function clearTabbedFilters(){
                var indexToRemove = null;
                vm.justFiltered = true;
                if(vm.currentActiveTab.product_info && isEndOfPage()){
                    vm.endofPage = true;
                }
                else{
                    vm.endofPage = false;
                }
                vm.activeTab = 1;
                if (vm.filters.length > 0){
                    angular.forEach(vm.filters,function(value, index){
                            if (value.type == "tabbed")
                                indexToRemove = index;
                        });
                }
                if (indexToRemove != null){
                    vm.filters.splice(indexToRemove,1);
                }
                reapplyFilters()
            }

            function uncheckAllCheckboxInFacetFilters() {
                var facetFilters = R.filter(isFacet,vm.filters);
                angular.forEach(facetFilters, function(value, key){
                   angular.forEach(value.appliedFilters, function(appliedFilter, key){
                       appliedFilter.facetFilter.selected = false;
                   });
                });
                vm.filters = []; //clear all filters.
            }

            function onClickingTabHeader(tab) {
                vm.currentActiveTab = tab;
                if(tab.product_info){
                    vm.numberOfProducts = tab.product_info.p_count;
                }
                if(tab.header_section){
                    vm.header_section = tab.header_section;
                }
                vm.ignore_productdeck_call = false;

                // Facet Filter should update on every tab click
                if(tab.customfacets){
                    vm.facetFilters = tab.customfacets.facets;
                    swapArray(vm.facetFilters, R.findIndex(R.propEq('filter_name', 'Category'))(vm.facetFilters),0);
                    setCheckboxToCheckedOnPreviouslyAppliedFilters(tab);
                }
                else if(tab.filter_opts){
                    vm.facetFilters = tab.filter_opts;
                    swapArray(vm.facetFilters, R.findIndex(R.propEq('filter_name', 'Category'))(vm.facetFilters),0);
                    setCheckboxToCheckedOnPreviouslyAppliedFilters(tab);
                }
                if ( tab.tab_type !== "all") {
                    vm.is_init = false;
                    var indexToRemove = null;

                    //To Clear other tab filter applied if any
                    if (vm.filters.length > 0){
                        angular.forEach(vm.filters,function(value, index){
                                if (value.type == "tabbed")
                                    indexToRemove = index;
                            });
                    }
                    if (indexToRemove != null){
                        vm.filters.splice(indexToRemove,1);
                    }
                    if(R.find(R.propEq('name', tab.tab_name))(vm.filters) === undefined) {
                        vm.filters.push({'name': tab.tab_name, 'type':'tabbed', 'slug':tab.tab_type, 'appliedFilters': [{name: 'Yes',facetFilter:vm.facetFilters}]});
                        $(document).trigger('filterInteractionsPlower', {filter_type:tab.tab_name, apply: true});
                    }
                    vm.execute = false
                    reapplyFilters();
                }else if (tab.tab_type === "all") {
                    clearTabbedFilters();
                    if(vm.is_init ===  false){
                        $(document).trigger('filterInteractionsPlower', {filter_type:tab.tab_name, apply: true});
                    }
                }

            }

            function swapArray(array, from, to){
                if (from>0){
                    var temp = array.splice(from,1);
                    array.unshift(temp[0]);
                }
            }


            function changeNameToAllProductsIfStandard(tabName) {
                if ( R.toLower(tabName) === 'standard') {
                    return 'All Products';
                }
                return tabName;
            }

            function activate() {
                //must see how I pass the sidurl dynamically
                vm.slug = '';
                if (slug){
                    vm.slug = slug ;
                }
                else if(vm.sectionModel.productwidgetuserslug){
                    vm.slug = vm.sectionModel.productwidgetuserslug;
                }
                if (vm.sectionModel.ignoresectionupload && vm.sectionModel.ignoresectionupload == "1"){
                    if (vm.sectionModel.productwidgetuserslug!=undefined && vm.sectionModel.productwidgetuserslug.length > 0)
                        var promises = [getSysGenProductDeck(vm.sectionModel.productsystemtype, vm.sectionModel.productwidgetuserslug)] ;
                    else if(slug)
                        var promises = [getSysGenProductDeck(vm.sectionModel.productsystemtype, slug)]
                    else if(vm.sectionModel.productsystemtype === "mem.sb"){
                        var promises = [getSysGenProductDeck(vm.sectionModel.productsystemtype)]
                    }
                }
                else{
                    var promises = [getProductDeck(vm.sid)];
                }
                if(vm.offer_sub_type){
                    if(vm.offer_sub_type != 'all-offers'){
                        vm.is_offers_on_cat = true
                    }
                }
                return CustomPageDataService.ready(promises).then(function () {
                    $timeout(function(){
                      $('#refine').click(function() {
                          $('#offcanvas-refine').animate({'bottom' : "0"}, 0);
                          $('#left-menu-overlay').fadeIn('slow');
                      });

                      $('#close-refine, #apply-refine').click(function() {
                         $('#offcanvas-refine').animate({'bottom' : "-100%"}, 0);
                         $('#left-menu-overlay').fadeOut('slow');
                      });
                    });
                });
            }

            var quick_filterData = R.groupBy(function(detail) {return detail.filter_group;});

            function setSortDataForSearchPages(){
                if (vm.sectionModel.productsystemtype == 'ps')
                {
                    vm.selectedSort = 'relevance';
                    vm.sortOrder = 'relevance'
                }
            }

            function sysGenProductDeckComplete(data){
                    if(data.tab_info.length > 0){
                        $rootScope.sid = data.tab_info[0].sid;
                        vm.sid = data.tab_info[0].sid;
                        vm.filtered_sid = sid;

                        setQuickFilter(data);
                    }
                     getProductDeckComplete(data);
                    setSortDataForSearchPages();

                    vm.execute = true;
                    //This is main scrolling logic now
                    $(window).scroll(function () {
                        var el = $('#idToJump'+vm.currentActiveTab.tab_type)[0];
                        var eTop = el.offsetTop;
                        var bottom = (eTop+el.offsetHeight) - $(window).height();
                        var diff = bottom - $(window).scrollTop();
                        if(vm.execute && ((eTop+el.offsetHeight) != 0) ){
                            if ((diff/(eTop+el.offsetHeight))*100 < 1){
                            vm.pagginator.loaded=true;
                            vm.execute = false;
                            vm.pagginator.paginate(2);
                            $("#filterbar").trigger("sticky_kit:recalc");
                            }
                        }
                    });
                }

            function getSysGenProductDeck(type, slug){
                if(!slug){
                    if(vm.sectionModel.productwidgetuserslug.length > 0){
                        slug = vm.sectionModel.productwidgetuserslug
                    }
                }
                CustomPageDataService.getSysGenProductDeck(type,slug, vm.sectionModel.productsystemtype,vm.sectionModel.alloffersubtype).then(sysGenProductDeckComplete)
            }

            function getProductDeck(urlWithsid) {
                CustomPageDataService.getProductDeck(urlWithsid,null,vm.offer_sub_type).then(getProductDeckComplete);
            }

            function getProductDeckApplyFilterComplete(data) {
                var tab = groupByTabName(data.tab_info);
                vm.quick_filterItems = {};
                setQuickFilter(data);

                angular.forEach(vm.bootstrapTabs, function(value, key) {
                    var tabinresponse = R.findIndex(R.propEq('tab_name',value.tab_name))(data.tab_info);
                    if(value.tab_name == 'Express' && value.tab_type == 'all'){
                        tabinresponse = 1;
                    }
                    // tabinforesponse is used to clear tab of old values if filter gave no results
                    value.showmore = false;
                    value.currentpage = 1;
                    if(tabinresponse < 0){
                        if (value.product_info)
                            value.product_info.products = []
                    }
                    else{
                       // console.log(tabinresponse)
                       if(tab[value.tab_type][0].customfacets){
                               value.filter_opts =  tab[value.tab_type][0].customfacets.facets ;
                               vm.filtered_sid = tab[value.tab_type][0].customfacets.sid;
                           }
                       else{
                           value.filter_opts =  tab[value.tab_type][0].filter_opts;
                       }
                       value.filtered_on =  tab[value.tab_type][0].filtered_on ;

                       value.product_info = tab[value.tab_type][0].product_info;
                    }

                });
                var filteredData = tab[vm.currentActiveTab.tab_type][0];
                vm.sortOptions = tab[vm.currentActiveTab.tab_type][0]['sort_opts'];
                vm.sortOrder = tab[vm.currentActiveTab.tab_type][0]['sorted_on'];
                if(tab[vm.currentActiveTab.tab_type][0].customfacets)
                    vm.facetFilters = filteredData.customfacets.facets;
                else
                    vm.facetFilters = filteredData.filter_opts;
                swapArray(vm.facetFilters, R.findIndex(R.propEq('filter_name', 'Category'))(vm.facetFilters),0);
                sort_offers_products(filteredData,filteredData.reverse_merge)
                vm.numberOfProducts = filteredData.product_info.p_count;
                vm.screen_name = data.screen_name;
                vm.currentActiveTab.product_info.products = filteredData.product_info.products;
                if(vm.sectionModel.productsystemtype === "mem.sb"){
                    vm.short_list = filteredData.product_info.short_list;
                    vm.long_list = filteredData.product_info.long_list;
                    vm.reco_list = filteredData.product_info.reco_list;
                    if (vm.currentActiveTab.show_reco_only == true) {
                        injectRecommendedProductsForSmartBasket(vm.reco_list.products);
                        vm.sb_list = [vm.reco_list];
                    }
                    else {
                        injectRecommendedProductsForSmartBasket(vm.short_list.products);
                        injectRecommendedProductsForSmartBasket(vm.long_list.products);
                        vm.sb_list = [vm.short_list, vm.long_list];
                    }
                }

                vm.currentActiveTab.active=true
                setTimeout(function(){
                    vm.execute = true;
                }, 2000);

                vm.getfilterCount()
                setCheckboxToCheckedOnPreviouslyAppliedFilters(filteredData);
                // vm.activeTab = 1
            }

            function firstTimeApplyFilter(tabInfoData, facetFilters){
                var set_filter_array = false;
                if (vm.filters.length == 0 && tabInfoData.filtered_on.length > 0 ){
                    set_filter_array = true;
                    if(tabInfoData.tab_type !== "all"){
                        if(R.find(R.propEq('name', tabInfoData.tab_name))(vm.filters) === undefined) {
                            vm.filters.push({'name': tabInfoData.tab_name, 'type':'tabbed', 'slug':tabInfoData.tab_type, 'appliedFilters': [{name: 'Yes',facetFilter:facetFilters}]});
                        }
                    }
                }

                var filtered_on = tabInfoData.filtered_on;
                angular.forEach(filtered_on, function(filter, key1){
                    angular.forEach(facetFilters, function(facetFilter, key2){
                       if(filter.filter_slug === facetFilter.filter_slug){
                           angular.forEach(filter.values, function(filterValue, key3){
                               angular.forEach(facetFilter.values, function(facetFilterValue, key4){
                                  if(filterValue === facetFilterValue.filter_value_slug){
                                      facetFilterValue.selected = true;
                                      if (set_filter_array == true){
                                          if(R.find(R.propEq('name', facetFilter.filter_name))(vm.filters)) {
                                              if(facetFilter.filter_slug == "categories") {
                                                  R.find(R.propEq('name', facetFilter.filter_name))(vm.filters).appliedFilters = [];
                                              }
                                              R.find(R.propEq('name', facetFilter.filter_name))(vm.filters).appliedFilters.push({name: facetFilterValue.display_name,facetFilter:facetFilterValue});
                                          }else{
                                              vm.filters.push({'name': facetFilter.filter_name , 'type':'facet', 'slug':facetFilter.filter_slug, 'appliedFilters': [{name: facetFilterValue.display_name,facetFilter:facetFilterValue}]});
                                          }
                                      }
                                  }
                               });
                           });
                       }//end of if
                    });
                });
                vm.getfilterCount();
            }

            function setCheckboxToCheckedOnPreviouslyAppliedFilters(filteredData){
                // var set_filter_array = false;
                // if(vm.filters.length==1 && vm.filters[0].type=="tabbed"){
                //     set_filter_array = true;
                // }
                // if (vm.filters.length == 0 && filteredData.filtered_on.length > 0 ){
                //     set_filter_array = true;
                //     if(vm.currentActiveTab.tab_name !== "ALL"){
                //         if(R.find(R.propEq('name', vm.currentActiveTab.tab_name))(vm.filters) === undefined) {
                //             vm.filters.push({'name': vm.currentActiveTab.tab_name, 'type':'tabbed', 'slug':vm.currentActiveTab.tab_name, 'appliedFilters': [{name: 'Yes',facetFilter:vm.facetFilters}]});
                //         }
                //     }
                // }
                var filtered_on = filteredData.filtered_on;
                angular.forEach(filtered_on, function(filter, key1){
                    angular.forEach(vm.facetFilters, function(facetFilter, key2){
                       if(filter.filter_slug === facetFilter.filter_slug){
                           angular.forEach(filter.values, function(filterValue, key3){
                               angular.forEach(facetFilter.values, function(facetFilterValue, key4){
                                  if(filterValue === facetFilterValue.filter_value_slug){
                                      facetFilterValue.selected = true;
                                      // if (set_filter_array == true){
                                      //     if(R.find(R.propEq('name', facetFilter.filter_name))(vm.filters)) {
                                      //         if(facetFilter.filter_slug == "categories") {
                                      //             R.find(R.propEq('name', facetFilter.filter_name))(vm.filters).appliedFilters = [];
                                      //         }
                                      //         R.find(R.propEq('name', facetFilter.filter_name))(vm.filters).appliedFilters.push({name: facetFilterValue.display_name,facetFilter:facetFilterValue});
                                      //     }else{
                                      //         vm.filters.push({'name': facetFilter.filter_name , 'type':'facet', 'slug':facetFilter.filter_slug, 'appliedFilters': [{name: facetFilterValue.display_name,facetFilter:facetFilterValue}]});
                                      //     }
                                      // }
                                  }
                               });
                           });
                       }//end of if
                    });
                });
            }

            var isEndOfPage = function(){
                var status = (vm.currentActiveTab.currentpage >= vm.currentActiveTab.product_info.tot_pages)? true:false;
                if(status == true){
                    vm.endofPage = true;
                }
                else{
                    vm.endofPage = false;
                }
                return status
            }

            vm.pagginator = {

                loaded: false,
                loaderwidget: $('#pgloader'),
                tabcount: 0,
                showmore : function(){
                    if(vm.currentActiveTab.product_info && (vm.currentActiveTab.currentpage < vm.currentActiveTab.product_info.tot_pages)){
                        return true;
                    }
                    return vm.currentActiveTab.showmore;
                },
                showmorepage : function(){
                    //vm.currentActiveTab.currentpage = vm.currentActiveTab.currentpage + 1;
                    location.hash = '!page='+vm.currentActiveTab.currentpage;
                    var filter = appliedFilters.filters.length > 0 ? appliedFilters : null;
                    getProductsForRestofTheTabs(vm.currentActiveTab.tab_type, vm.currentActiveTab.currentpage,
                        vm.currentActiveTab.tab_name,filter, true);
                    $('.pd-loader').fadeIn();
                    setTimeout(function() {
                        $('.pd-loader').fadeOut();
                        $('#filterbar').css("position","fixed");
                    }, 1500);
                },
                paginate: function (distance, element) {
                    if (!vm.currentActiveTab.showmore) {
                        if (vm.pagginator.loaded) {
                            if(! vm.currentActiveTab.currentpage){
                                vm.currentActiveTab.currentpage = 1;
                                location.hash = '!page='+vm.currentActiveTab.currentpage;
                            }

                            if(vm.currentActiveTab.product_info.tot_pages && (isEndOfPage())){
                                vm.currentActiveTab.showmore = false;
                                vm.endofPage = true;
                                $scope.$apply();
                                return true;
                            }
                            if (distance >= 0 && vm.currentActiveTab.currentpage && vm.currentActiveTab.currentpage < vm.currentActiveTab.product_info.tot_pages) {
                                var filter = appliedFilters.filters.length > 0 ? appliedFilters : null;
                                $('.pd-loader').fadeIn();
                                setTimeout(function() {
                                    $('.pd-loader').fadeOut();
                                    $('#filterbar').css("position","fixed");
                                }, 1500);
                                if (!vm.currentActiveTab.currentpage) {
                                    vm.currentActiveTab.currentpage = 2;
                                }
                                else {
                                    vm.currentActiveTab.currentpage = vm.currentActiveTab.currentpage + 1;
                                }
                                if (vm.currentActiveTab.currentpage < 7) {
                                    var selectedtabindex = R.findIndex(R.propEq('tab_name',vm.currentActiveTab.tab_name))(vm.bootstrapTabs);
                                    if(selectedtabindex){
                                        vm.bootstrapTabs[selectedtabindex].currentpage = vm.currentActiveTab.currentpage
                                    }
                                    var paginate = true;
                                    $(document).trigger('snowscroll', [vm.currentActiveTab.currentpage-1]);
                                    $(document).trigger('bannersOnScroll');
                                    getProductsForRestofTheTabs(vm.currentActiveTab.tab_type, vm.currentActiveTab.currentpage,
                                        vm.currentActiveTab.tab_name,filter, paginate);
                                    location.hash = '!page='+vm.currentActiveTab.currentpage;
                                    $scope.$apply();
                                }
                            }
                        }
                        else {
                            vm.pagginator.loaded = true;
                        }
                    }
                    else if(vm.currentActiveTab.product_info && (isEndOfPage())){
                        vm.currentActiveTab.showmore = false;
                    }
                }
            }

            vm.pagginator.loaderwidget.hide();

            function injectRecommendedProductsForSmartBasket(listData) {
                for (var i=0; i < listData.length; i++) {
                    listData[i]['is_reco'] = false;
                    if (vm.reco_list.id_list.indexOf(listData[i].sku.toString()) != -1 || vm.currentActiveTab.show_reco_only == true) {
                        listData[i]['is_reco'] = true;
                    }
                    for (var j=0; j < listData[i].all_prods.length; j++) {
                        listData[i]['all_prods'][j]['is_reco'] = false;
                        if (vm.reco_list.id_list.indexOf(listData[i]['all_prods'][j].sku.toString()) != -1 || vm.currentActiveTab.show_reco_only == true) {
                        listData[i]['all_prods'][j]['is_reco'] = true;
                        break;
                    }
                    }
                }
            }

            function getProductDeckComplete(data) {
                vm.bootstrapTabs = [];
                vm.cart_info = data.cart_info;
                vm.baseImageUrl = data.base_img_url;
                vm.screen_name = data.screen_name;
                //sid is variable set in homepage.html and is used for all product-deck calls
                if (data.base_sid != undefined ){
                    vm.base_sid = data.base_sid;
                    if (data['tab_to_show'] == 'all'){
                        sid = data.base_sid;
                    }
                }
                vm.tab_info = groupByTabName(data.tab_info);
                var tab_index = 1;
                angular.forEach(vm.tab_info,  function(value, key) {
                    // if (value[0].product_info.products.length === 0) {
                    //     getProductsForRestofTheTabs(value[0].tab_type,1,value[0].tab_name);
                    // }
                    vm.currentActiveTab = value[0];
                    vm.facetFilters = value[0].customfacets.facets;
                    sort_offers_products(value[0],value[0].reverse_merge)
                    vm.bootstrapTabs.push(value[0]);
                    vm.sortOptions = value[0]['sort_opts'];
                    vm.sortOrder = value[0].sorted_on;
                    if (data.tab_to_show == value[0].tab_type) {
                        //new method similar to below to populate filter
                        firstTimeApplyFilter(value[0], vm.facetFilters)
                        // setCheckboxToCheckedOnPreviouslyAppliedFilters(value[0]);
                        vm.activeTab = tab_index;
                        $('#deck').show();
                    }

                    //Take 10 products if 10 products else product.length

                    var productlist1=[];
                    if (vm.currentActiveTab.product_info != undefined){
                        var prod_length = vm.currentActiveTab.product_info.products.length;
                        if (prod_length > 10){
                            prod_length = 10;
                        }
                        for (var i= 0 ; i< prod_length ; i++){
                            productlist1.push(vm.currentActiveTab.product_info.products[i].sku);
                        }

                    //pushing top 10 SKUs to Google Tag Manager
                        if(window.dataLayer){
                            dataLayer.push({'productlist1': productlist1});
                        }
                    }
                    if(vm.sectionModel.productsystemtype === "mem.sb"){
                        vm.short_list = vm.currentActiveTab.product_info.short_list;
                        vm.long_list =vm.currentActiveTab.product_info.long_list;
                        vm.reco_list = vm.currentActiveTab.product_info.reco_list;
                        if (vm.currentActiveTab.show_reco_only == true) {
                            injectRecommendedProductsForSmartBasket(vm.reco_list.products);
                            vm.sb_list = [vm.reco_list];
                        }
                        else {
                            injectRecommendedProductsForSmartBasket(vm.short_list.products);
                            injectRecommendedProductsForSmartBasket(vm.long_list.products);
                            vm.sb_list = [vm.short_list, vm.long_list];
                        }
                    }

                    tab_index += 1;
                });
                vm.bootstrapTabs = sortByTabTypeCaseInsensitive(vm.bootstrapTabs);
            }




            function getProductsForRestofTheTabs(tabType,paginationNumber, tabname,filters, paginate) {
                vm.justFiltered = false;

                function getProductsForRestofTheTabsComplete(data) {
                    if (vm.sectionModel.productsystemtype === "mem.sb") {
                        if (vm.short_list.products) {
                            injectRecommendedProductsForSmartBasket(data.tab_info.product_map[tabType]['short_list']);
                            vm.short_list.products = R.concat(vm.short_list.products, data.tab_info.product_map[tabType]['short_list']);
                        }
                        if (vm.long_list.products) {
                            injectRecommendedProductsForSmartBasket(data.tab_info.product_map[tabType]['long_list']);
                            vm.long_list.products = R.concat(vm.long_list.products, data.tab_info.product_map[tabType]['long_list']);
                        }
                        if (vm.reco_list.products) {
                            injectRecommendedProductsForSmartBasket(data.tab_info.product_map[tabType]['reco_list']);
                            vm.reco_list.products = R.concat(vm.reco_list.products, data.tab_info.product_map[tabType]['reco_list']);
                        }
                    }
                    if (vm.tab_info[tabType][0].product_info.products) {
                        vm.tab_info[tabType][0].product_info.products = R.concat(vm.tab_info[tabType][0].product_info.products, data.tab_info.product_map[tabType]['prods']);
                    }
                    else {
                        vm.tab_info[tabType][0].product_info.products = data.tab_info.product_map[tabType]['prods'];
                    }

                    if (vm.tab_info[tabType][0].promo_info) {
                        vm.tab_info[tabType][0].promo_info.promos = data.tab_info.product_map[tabType]['promos'];
                    }
                    else {
                        vm.tab_info[tabType][0].promo_info = {promos: data.tab_info.product_map[tabType]['promos']};
                    }

                    //Google Analytics for pagination
                    CustomPageDataService.pushToGoogleAnalytics('_trackEvent', vm.nc_paginate, 'custom-page', 'pageview|scrolldown|page=' + paginationNumber, 1);

                    sort_offers_products(vm.tab_info[tabType][0], vm.tab_info[tabType][0].reverse_merge);
                    vm.numberOfProducts = vm.tab_info[tabType][0].product_info.p_count;
                    vm.execute = true;

                    //Code block to not jump to new page if scroll is above ProductDeck endpoint
                    var el = $('#idToJump' + vm.currentActiveTab.tab_type)[0];
                    var eTop = el.offsetTop;
                    var bottom = (eTop + el.offsetHeight) - $(window).height();
                    var diff = bottom - $(window).scrollTop();
                    if (vm.execute && ((eTop + el.offsetHeight) != 0)) {
                        if ((diff / (eTop + el.offsetHeight)) * 100 < -25) {
                            $('html, body').animate({
                                scrollTop: $('#idToJump' + tabType).offset().top
                            });
                        }
                    }
                }

                if (vm.sectionModel.productwidgetuserslug) {
                    if (vm.sectionModel.productsystemtype == "mem.sb") {
                        var shortList = [];
                        var longList = [];
                        var recoList = [];
                        if (vm.currentActiveTab.show_reco_only) {
                            recoList = vm.reco_list.id_list.splice(0, 20);
                        }
                        else {
                            shortList = vm.short_list.id_list.splice(0, 20);
                            if (shortList.length < 20) {
                                longList = vm.long_list.id_list.splice(0, 20 - shortList.length);
                            }
                        }
                        CustomPageDataService.getProductsForRestofTheTabs(vm.sectionModel.productsystemtype, vm.sid, tabType, paginationNumber, filters, vm.selectedSort, paginate, vm.sectionModel.productwidgetuserslug, vm.offer_sub_type, shortList, longList, recoList).then(getProductsForRestofTheTabsComplete);
                    }
                    else {
                        CustomPageDataService.getProductsForRestofTheTabs(vm.sectionModel.productsystemtype, vm.sid, tabType, paginationNumber, filters, vm.selectedSort, paginate, vm.sectionModel.productwidgetuserslug, vm.offer_sub_type).then(getProductsForRestofTheTabsComplete);
                    }
                }
                else {
                    CustomPageDataService.getProductsForRestofTheTabs(vm.sectionModel.productsystemtype, vm.sid, tabType, paginationNumber, filters, vm.selectedSort, paginate, slug, vm.offer_sub_type).then(getProductsForRestofTheTabsComplete);

                }
            }
            activate();
        }

    } //end of Product Deck

    combo.$inject = ['$timeout', 'CustomPageDataService'];

    function combo($timeout, CustomPageDataService) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/combo.html',
            link: link
        };

        function link(scope, element, attrb) {
            scope.uid = generateUUID();
            scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            scope.title = scope.sectionModel.title;
            scope.CategoryDetails = scope.sectionModel.section_data.excel_data.CategoryDetails;
            scope.BannerDetails = scope.sectionModel.section_data.excel_data.BannerDetails;
            scope.sectionId = scope.sectionModel.section_id;
            scope.pagegroupid = scope.sectionModel.pagegroupid;
            scope.viewAllUrl = scope.sectionModel.viewAllUrl;
            scope.viewAllUrlText = scope.sectionModel.viewAllUrlText;
            scope.pageid = scope.sectionModel.pageid;
            scope.MEDIA_URL = MEDIA_URL;
            scope.CUSTOM_STATIC_URL = CUSTOM_STATIC_URL;
            scope.status = {};
            scope.status.open = false;
            scope.useStaticImages = (MEDIA_URL === '') ? true : false;
            $timeout(function() {
                $('#' + scope.uid).owlCarousel({
                    autoplay: true,
                    autoplayTimeout: 5000,
                    smartSpeed: 600,
                    autoplayHoverPause: true,
                    nav: true,
                    navText: [" ", " "],
                    items: 1,
                    lazyLoad: true,
                    loop: true,
                    responsiveClass: true,
                    responsive: {
                        0: {
                            items: 1,
                            loop: true
                        },
                        600: {
                            items: 1,
                            loop: true
                        },
                        1000: {
                            items: 1,
                            loop: true
                        }
                    }

                });
            });

            scope.style = {};
            scope.style.viewall = scope.sectionModel.layout.viewAllStyle;
            scope.style.headerStyle = scope.sectionModel.pageStyle;
            scope.style.categoryStyle = scope.sectionModel.layout.style.CategoryStyle;
			scope.style.categoryTitleStyle = scope.sectionModel.layout.style.CategoryTitleStyle;
        }
    }

    nonLinear.$inject = ['CustomPageDataService'];
    function nonLinear(CustomPageDataService) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/nonLinear.html',
            link: link
        };

        function link(scope, element, attrb) {
            scope.sectionData = scope.sectionModel.section_data.excel_data;
            scope.title = scope.sectionModel.title;
            scope.uid = generateUUID();
            scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            scope.sectionId = scope.sectionModel.section_id;
            scope.pagegroupid = scope.sectionModel.pagegroupid;
            scope.pageid = scope.sectionModel.pageid;
            scope.MEDIA_URL = MEDIA_URL;
            scope.CUSTOM_STATIC_URL = CUSTOM_STATIC_URL;
            scope.useStaticImages = (MEDIA_URL === '');
            scope.style = {};
            scope.style.headerStyle = scope.sectionModel.pageStyle;
            scope.style.block1={};
            scope.style.block1.titleStyle = scope.sectionModel.layout.style.blocks.block1.Title;
            scope.style.block1.infoStyle = scope.sectionModel.layout.style.blocks.block1.Info;
            scope.style.block2={};
            scope.style.block2.titleStyle = scope.sectionModel.layout.style.blocks.block2.Title;
            scope.style.block2.infoStyle = scope.sectionModel.layout.style.blocks.block2.Info;
            scope.style.block3={};
            scope.style.block3.titleStyle = scope.sectionModel.layout.style.blocks.block3.Title;
            scope.style.block3.infoStyle = scope.sectionModel.layout.style.blocks.block3.Info;
            scope.style.block4={};
            scope.style.block4.titleStyle = scope.sectionModel.layout.style.blocks.block4.Title;
            scope.style.block4.infoStyle = scope.sectionModel.layout.style.blocks.block4.Info;
            scope.style.block5={};
            scope.style.block5.titleStyle = scope.sectionModel.layout.style.blocks.block5.Title;
            scope.style.block5.infoStyle = scope.sectionModel.layout.style.blocks.block5.Info;
        }

    }

    banners.$inject = ['$timeout', 'CustomPageDataService'];

    function banners($timeout, CustomPageDataService) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/banners.html',
            link: link
        };

        function link(scope, element, attrb) {
            if(scope.sectionModel.section_data == null){
                return false;
            }
            if(scope.sectionModel.ignoresectionupload == '0'){
                scope.sectionData = scope.sectionModel.section_data.excel_data;
            }
            else{
                scope.sectionData=scope.sectionModel.section_data;
                if(scope.sectionData && scope.sectionData[0].show_random==1) {
                    var rindex = Math.floor(Math.random() * scope.sectionData.length);
                    var splits = R.splitAt(rindex, scope.sectionData)
                    scope.sectionData = R.concat(splits[1], splits[0])
                }
            }

            var randomPosition = function(){
                if(!scope.sectionData[0].show_random){
                    return 0;
                }
                if (scope.sectionData[0].show_random == 1) {
                   return (Math.floor(Math.random()*scope.sectionData.length));
                }
                else { return 0 ;}
            };
            var loopOrNot = scope.sectionData.length > 1 ? true : false;
            scope.title = scope.sectionModel.title;
            scope.sectionId = scope.sectionModel.section_id;
            scope.pagegroupid = scope.sectionModel.pagegroupid;
            scope.pageid = scope.sectionModel.pageid;
            scope.MEDIA_URL = MEDIA_URL;
            scope.CUSTOM_STATIC_URL = CUSTOM_STATIC_URL;
            scope.useStaticImages = (MEDIA_URL === '') ? true : false;
            scope.uid = generateUUID();
            scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            $timeout(function() {
                $('#' + scope.uid).owlCarousel({
                    autoplay: true,
                    autoplayTimeout: 5000,
                    smartSpeed: 600,
                    autoplayHoverPause: true,
                    nav: true,
                    navText: [" ", " "],
                    items: 1,
                    lazyLoad: true,
                    mouseDrag: loopOrNot,
                    touchDrag: loopOrNot,
                    freeDrag: loopOrNot,
                    pullDrag: loopOrNot,
                    loop: loopOrNot,
                    responsiveClass: true,
                    responsive: {
                        0: {
                            items: 1,
                            loop: true
                        },
                        600: {
                            items: 1,
                            loop: true
                        },
                        1000: {
                            items: 1,
                            loop: true
                        }
                    },
                    startPosition: randomPosition()

                });
            });

            scope.style = {};
            scope.style.BannerText = scope.sectionModel.layout.style.BannerText;
            scope.style.headerStyle = scope.sectionModel.pageStyle;
        }
    }

    bannerCaption.$inject = ['$timeout', 'CustomPageDataService'];

    function bannerCaption($timeout, CustomPageDataService) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/bannerCaption.html',
            link: link
        };

        function link(scope, element, attrb) {
            if(scope.sectionModel.section_data == null){
                return false;
            }
            if(scope.sectionModel.ignoresectionupload == '0'){
                scope.sectionData = scope.sectionModel.section_data.excel_data;
            }
            else{
                scope.sectionData=scope.sectionModel.section_data;
                if(scope.sectionData && scope.sectionData[0].show_random==1) {
                    var rindex = Math.floor(Math.random() * scope.sectionData.length);
                    var splits = R.splitAt(rindex, scope.sectionData)
                    scope.sectionData = R.concat(splits[1], splits[0])
                }
            }

            var randomPosition = function(){
                if(!scope.sectionData[0].show_random){
                    return 0;
                }
                if (scope.sectionData[0].show_random == 1) {
                   return (Math.floor(Math.random()*scope.sectionData.length));
                }
                else { return 0 ;}
            };
            var loopOrNot = scope.sectionData.length > 1 ? true : false;
            scope.title = scope.sectionModel.title;
            scope.sectionId = scope.sectionModel.section_id;
            scope.pagegroupid = scope.sectionModel.pagegroupid;
            scope.pageid = scope.sectionModel.pageid;
            scope.MEDIA_URL = MEDIA_URL;
            scope.CUSTOM_STATIC_URL = CUSTOM_STATIC_URL;
            scope.useStaticImages = (MEDIA_URL === '') ? true : false;
            scope.uid = generateUUID();
            scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            $timeout(function() {
               var owl2 = $('.fullWidth.outer-div .owl-carousel').owlCarousel({
                   items: 1,
                   loop:true,
                   center: true,
                   navigation : false,
                   autoplayHoverPause: true,
                   autoplay: true,
                   autoplayTimeout: 6000,
                   responsiveClass: true,
                     responsive: {
                         991:{
                            dotsContainer: '#carousel-custom-dots',
                            dots:true,
                         },
                         0: {
                            dots: true,
                            pagination:false,
                            navigation:true
                         }
                     }
                });
                $('#carousel-custom-dots .owl-dot').click(function(){
                    owl2.trigger('to.owl.carousel', [$(this).find('a').attr('id')]);
                });

            });

            scope.style = {};
            scope.style.BannerText = scope.sectionModel.layout.style.BannerText;
            scope.style.headerStyle = scope.sectionModel.pageStyle;
        }
    }

    imageInfoViewAll.$inject = ['$timeout', 'CustomPageDataService'];

    function imageInfoViewAll($timeout, CustomPageDataService) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/imageInfoViewAll.html',
            link: link
        };

        function link(scope, element, attrb) {
            scope.sectionData = scope.sectionModel.section_data.excel_data;
            scope.uid = generateUUID();
            scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            scope.sectionId = scope.sectionModel.section_id;
            scope.pagegroupid = scope.sectionModel.pagegroupid;
            scope.pageid = scope.sectionModel.pageid;
            scope.viewAllUrl = scope.sectionModel.viewAllUrl;
            scope.viewAllUrlText = scope.sectionModel.viewAllUrlText;
            scope.MEDIA_URL = MEDIA_URL;
            scope.CUSTOM_STATIC_URL = CUSTOM_STATIC_URL;
            scope.useStaticImages = (MEDIA_URL === '') ? true : false;
            scope.title = scope.sectionModel.title;
            if (scope.sectionModel.type == 'Carousel') {
                $timeout(function() {
                    $('#' + scope.uid).owlCarousel({
                        autoplay: true,
                        autoplayTimeout: 9000,
                        autoplayHoverPause: true,
                        nav: true,
                        navText: [" ", " "],
                        items: 4,
                        slideBy: 4,
                        loop: true,
                        responsiveClass: true,
                        responsive: {
                            0: {
                                items: 1,
                                slideBy: 1,
                                loop: true
                            },
                            480: {
                                items: 2,
                                slideBy: 2,
                                loop: true
                            },
                            600: {
                                items: 3,
                                slideBy: 3,
                                loop: true
                            },
                            1000: {
                                items: 4,
                                slideBy: 4,
                                loop: true
                            }
                        }

                    });
                });
            }
            scope.style = {};
            scope.style.Title = normalizeProperty(scope.sectionModel.layout.style.TitleStyle);
            scope.style.CategoryStyle = normalizeProperty(scope.sectionModel.layout.style.CategoryStyle);
            scope.style.DiscountinfoStyle = scope.sectionModel.layout.style.DiscountinfoStyle;
            scope.style.viewall = scope.sectionModel.layout.viewAllStyle;
            scope.style.sectionViewAll = scope.sectionModel.layout.style.SectionViewAllRenderingInfo;
            scope.style.headerStyle = scope.sectionModel.pageStyle;
        }
    }

    carouselWithTitle.$inject = ['$timeout', 'CustomPageDataService'];

    function carouselWithTitle($timeout, CustomPageDataService) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/carouselWithTitle.html',
            link: link
        };

        function link(scope, element, attrb) {
            if(scope.sectionModel.ignoresectionupload == '0' || scope.sectionModel.ignoresectionupload == undefined){
                scope.sectionData = scope.sectionModel.section_data.excel_data;
            }
            else{
                scope.sectionData=scope.sectionModel.section_data;
                if(scope.sectionData && scope.sectionData[0].show_random==1) {
                    var rindex = Math.floor(Math.random() * scope.sectionData.length);
                    var splits = R.splitAt(rindex, scope.sectionData)
                    scope.sectionData = R.concat(splits[1], splits[0])
                }
            }
            scope.viewAllUrl = scope.sectionModel.viewAllUrl;
            scope.viewAllUrlText = scope.sectionModel.viewAllUrlText;
            scope.sectionId = scope.sectionModel.section_id;
            scope.pagegroupid = scope.sectionModel.pagegroupid;
            scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            scope.pageid = scope.sectionModel.pageid;
            scope.MEDIA_URL = MEDIA_URL;
            scope.CUSTOM_STATIC_URL = CUSTOM_STATIC_URL;
            scope.useStaticImages = (MEDIA_URL === '') ? true : false;
            scope.uid = generateUUID();
            scope.title = scope.sectionModel.title;
            if (scope.sectionModel.type == 'Carousel') {
                $timeout(function() {
                    $('#' + scope.uid).owlCarousel({
                        autoplay: true,
                        autoplayTimeout: 5000,
                        autoplayHoverPause: true,
                        nav: true,
                        navText: [" ", " "],
                        items: 4,
                        slideBy: 4,
                        loop: true,
                        responsiveClass: true,
                        responsive: {
                            0: {
                                items: 2,
                                slideBy: 2,
                                loop: true
                            },
                            600: {
                                items: 3,
                                slideBy: 3,
                                loop: true
                            },
                            1000: {
                                items: 4,
                                slideBy: 4,
                                loop: true
                            }
                        }

                    });
                });
            }

            scope.style = {};
            scope.style.viewall = scope.sectionModel.layout.viewAllStyle;
            scope.style.Title = normalizeProperty(scope.sectionModel.layout.style.Title);
            scope.style.headerStyle = scope.sectionModel.pageStyle;
        }
    }
    carouselOnlyImage.$inject = ['$timeout', 'CustomPageDataService'];

    function carouselOnlyImage($timeout, CustomPageDataService) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/carouselOnlyImage.html',
            link: link
        };

        function link(scope, element, attrb) {
            if(scope.sectionModel.ignoresectionupload == '0' || scope.sectionModel.ignoresectionupload == undefined){
                scope.sectionData = scope.sectionModel.section_data.excel_data;
            }
            else{
                scope.sectionData=scope.sectionModel.section_data;
                if(scope.sectionData && scope.sectionData[0].show_random==1) {
                    var rindex = Math.floor(Math.random() * scope.sectionData.length);
                    var splits = R.splitAt(rindex, scope.sectionData)
                    scope.sectionData = R.concat(splits[1], splits[0])
                }
            }
            scope.sectionId = scope.sectionModel.section_id;
            scope.pagegroupid = scope.sectionModel.pagegroupid;
            scope.pageid = scope.sectionModel.pageid;
            scope.viewAllUrl = scope.sectionModel.viewAllUrl;
            scope.viewAllUrlText = scope.sectionModel.viewAllUrlText;
            scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            scope.MEDIA_URL = MEDIA_URL;
            scope.CUSTOM_STATIC_URL = CUSTOM_STATIC_URL;
            scope.useStaticImages = (MEDIA_URL === '') ? true : false;
            scope.uid = generateUUID();
            scope.title = scope.sectionModel.title;
            if (scope.sectionModel.type == 'Carousel') {
                $timeout(function() {
                    $('#' + scope.uid).owlCarousel({
                        autoplay: true,
                        autoplayHoverPause: true,
                        nav: true,
                        navText: [" ", " "],
                        items: 4,
                        slideBy: 4,
                        lazyLoad: true,
                        loop: true,
                        responsiveClass: true,
                        responsive: {
                            0: {
                                items: 2,
                                slideBy: 2,
                                loop: true
                            },
                            600: {
                                items: 3,
                                slideBy: 3,
                                loop: true
                            },
                            1000: {
                                items: 4,
                                slideBy: 4,
                                loop: true
                            }
                        }

                    });
                });
            }

            scope.style = {};
            scope.style.viewall = scope.sectionModel.layout.viewAllStyle;
            scope.style.headerStyle = scope.sectionModel.pageStyle;
        }
    }
    // TODO: This widget is still under development
    productWidgetMini.$inject = ['$timeout', '$rootScope', 'CustomPageDataService','UserDataservice'];

    function productWidgetMini($timeout, $rootScope, CustomPageDataService,UserDataservice) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/productwidgetmini.html',
            link: link
        }
        function link(scope, element, attrb) {
            if (scope.sectionModel.section_data && scope.sectionModel.section_data.excel_data){
                scope.sectionData =  scope.sectionModel.section_data.excel_data;
            }
            var hoverEdit = false;
            scope.cartitems = UserDataservice.getformatedcart();
            scope.sectionId = scope.sectionModel.section_id;
            scope.pagegroupid = scope.sectionModel.pagegroupid;
            scope.pageid = scope.sectionModel.pageid;
            scope.viewAllUrl = scope.sectionModel.viewAllUrl;
            scope.viewAllUrlText = scope.sectionModel.viewAllUrlText;
            scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            scope.MEDIA_URL = MEDIA_URL;
            scope.base_img_url = '';
            scope.CUSTOM_STATIC_URL = CUSTOM_STATIC_URL;
            scope.useStaticImages = (MEDIA_URL === '') ? true : false;
            scope.uid = generateUUID();
            scope.title = scope.sectionModel.title;
            if (typeof discount_data !== 'undefined') {
                scope.bigSave = JSON.parse(discount_data);
            }
            if(scope.sectionModel.productsystemtype){
                CustomPageDataService.getProductsBySlug(scope.sectionModel.productsystemtype,scope.sectionModel.productwidgetuserslug,
                    ctype, slug,tlc,scope.sectionModel.alloffersubtype).then(function(productlist){
                    var products = []
                    angular.forEach(productlist,function(item){
                        products.push({product:item})
                        // scope.pos = item.offset();
                    })
                    scope.sectionData = products;
                    if (scope.sectionModel.type == 'Carousel') {
                        scope = setupCarousel(scope,$timeout,{loop:false,lazy:false,items: 8,slideBy: 8});
                    }
                })
            }
            else {
                CustomPageDataService.getProductbyId(R.map(function(item){return item.PDID},scope.sectionData)).then(function (productlist) {


                    var filteredlist = []
                    angular.forEach(productlist,function(data,index){
                        var item = R.findIndex(R.propEq('PDID',String(data.sku)))(scope.sectionData)
                        if(item != -1){
                            scope.sectionData[item].product = productlist[index]
                            filteredlist.push(scope.sectionData[item])
                        }
                    })
                    scope.sectionData = filteredlist
                    if (scope.sectionModel.type == 'Carousel') {
                    scope = setupCarousel(scope, $timeout, {loop: false, lazy: false,items: 8,slideBy: 8});
                    }
                });




            }

            scope.style = {};
            scope.style.viewall = scope.sectionModel.layout.viewAllStyle;
            scope.style.headerStyle = scope.sectionModel.pageStyle;

//            scope.hoverIn = function(data,pos){
//                var offsetleft = $('#fp'+pos).position().left -15;
//                var offsettop = $('#fp'+pos).offset().top - 65;
//                $('.featured-prod').css('display','block');
//                $('.featured-prod').css('left', offsetleft + 'px');
//                // $('.featured-prod').css('top', offsettop + 'px');
//                $rootScope.$broadcast('featurehover',{product:data,position:pos});
//            };
//            scope.popuphover = function(){
//                $('.featured-prod').css('display','block');
//            };
//
//            scope.popuphide = function(){
//                $('.featured-prod').css('display','none');
//            };
//
//            scope.hoverOut = function(){
//                $('.featured-prod').hide();
//                $(this).dropdown("toggle");
//            };
        }

    }

    carouselProductWidget.$inject = ['$timeout', 'CustomPageDataService','UserDataservice'];
    function carouselProductWidget($timeout, CustomPageDataService,UserDataservice) {
        return {
            restrict: 'E',
            scope: {
                sectionModel: '='
            },
            templateUrl: 'app/templates/innertemplates/carouselproductwidgetlayout.html',
            link: link
        }
        function link(scope, element, attrb) {
            if (scope.sectionModel.section_data && scope.sectionModel.section_data.excel_data){
                scope.sectionData =  scope.sectionModel.section_data.excel_data;
            }
            scope.cartitems = UserDataservice.getformatedcart();
            scope.sectionId = scope.sectionModel.section_id;
            scope.pagegroupid = scope.sectionModel.pagegroupid;
            scope.pageid = scope.sectionModel.pageid;
            scope.viewAllUrl = scope.sectionModel.viewAllUrl;
            scope.viewAllUrlText = scope.sectionModel.viewAllUrlText;
            scope.pushToGoogleAnalytics = CustomPageDataService.pushToGoogleAnalytics;
            scope.MEDIA_URL = MEDIA_URL;
            scope.base_img_url = '';
            scope.CUSTOM_STATIC_URL = CUSTOM_STATIC_URL;
            scope.useStaticImages = (MEDIA_URL === '') ? true : false;
            scope.uid = generateUUID();
            scope.title = scope.sectionModel.title;
            if (typeof discount_data !== 'undefined') {
                scope.bigSave = JSON.parse(discount_data);
            }
            if(scope.sectionModel.productsystemtype){
                CustomPageDataService.getProductsBySlug(scope.sectionModel.productsystemtype,
                    scope.sectionModel.productwidgetuserslug, ctype, slug,tlc,scope.sectionModel.alloffersubtype).then(function(productlist){
                    var products = []
                    angular.forEach(productlist,function(item){
                        products.push({product:item})
                    });
                    scope.sectionData = products;
                    if (scope.sectionModel.type == 'Carousel') {
                        scope = setupCarousel(scope,$timeout,{loop:false,lazy:false});
                    }
                })
            }
            else {
                CustomPageDataService.getProductbyId(R.map(function(item){return item.PDID},scope.sectionData)).then(function (productlist) {


                    var filteredlist = []
                    angular.forEach(productlist,function(data,index){
                        var item = R.findIndex(R.propEq('PDID',String(data.sku)))(scope.sectionData)
                        if(item != -1){
                            scope.sectionData[item].product = productlist[index]
                            filteredlist.push(scope.sectionData[item])
                        }
                    })
                    scope.sectionData = filteredlist
                    if (scope.sectionModel.type == 'Carousel') {
                    scope = setupCarousel(scope, $timeout, {loop: false, lazy: false});
                    }
                });




            }

            scope.style = {};
            scope.style.viewall = scope.sectionModel.layout.viewAllStyle;
            scope.style.headerStyle = scope.sectionModel.pageStyle;
        }

    }

    function generateUUID() {
        var d = new Date().getTime();
        if (window.performance && typeof window.performance.now === "function") {
            d += performance.now(); //use high-precision timer if available
        }
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
        return uuid;
    }


    function changeName(property) {
        function denormalize(c) {
            return '-' + c.toLowerCase();
        }
        return property.replace(/[A-Z]/g, denormalize);
    }

    function normalizeProperty(styleobject) {
        var normalisedstyle = {};
        angular.forEach(styleobject, function(value, key) {
            normalisedstyle[changeName(key)] = value;
        });
        return normalisedstyle;
    }

    function setupCarousel(scope,timeout,owlproperties){
        if (owlproperties.items && owlproperties.slideBy)
                timeout(function() {
                        $('#' + scope.uid).owlCarousel({
                            autoplay: false,
                            autoplayHoverPause: false,
                            nav: true,
                            navText: [" ", " "],
                            items: 6,
                            slideBy: 6,
                            lazyLoad: false,
                            loop: owlproperties.loop,
                            responsiveClass: true,
                            responsive: {
                                0: {
                                    items: 2,
                                    slideBy: 2,
                                    loop: owlproperties.loop
                                },
                                520: {
                                    items: 2,
                                    margin: 10,
                                    slideBy: 2,
                                    loop: owlproperties.loop
                                },
                                768: {
                                    items: 3,
                                    margin: 10,
                                    slideBy: 3,
                                    loop: owlproperties.loop
                                },
                                991: {
                                    items: 4,
                                    slideBy: 4,
                                    margin: 10,
                                    mouseDrag: false,
                                    loop: owlproperties.loop
                                },
                                1025: {
                                    items: 6,
                                    slideBy: 6,
                                    margin: 10,
                                    mouseDrag: false,
                                    loop: owlproperties.loop
                                }

                            }

                        });
                    });
        else{
            timeout(function() {
                        $('#' + scope.uid).owlCarousel({
                            autoplay: false,
                            autoplayHoverPause: false,
                            nav: true,
                            navText: [" ", " "],
                            items: 5,
                            slideBy: 5,
                            lazyLoad: false,
                            loop: owlproperties.loop,
                            responsiveClass: true,
                            responsive: {
                                0: {
                                    items: 1,
                                    loop: owlproperties.loop
                                },
                                520: {
                                    items: 2,
                                    margin: 10,
                                    slideBy: 2,
                                    loop: owlproperties.loop
                                },
                                768: {
                                    items: 3,
                                    margin: 10,
                                    slideBy: 3,
                                    loop: owlproperties.loop
                                },
                                991: {
                                    items: 4,
                                    slideBy: 4,
                                    margin: 10,
                                    mouseDrag: false,
                                    loop: owlproperties.loop
                                },
                                1025: {
                                    items: 5,
                                    slideBy: 5,
                                    margin: 10,
                                    mouseDrag: false,
                                    loop: owlproperties.loop
                                }

                            }

                        });
                    });
        }
        return  scope;
    }

})();

(function(){
    "use strict";
    angular.module('app.customPage').service('CustomPageDataService', CustomPageDataService);

    CustomPageDataService.$inject = ['$http','$q', '$window'];
    /* @ngInject */
    function CustomPageDataService($http, $q, $window){
        var isPrimed = false;
        var primePromise;
        var searchJsonData = {};
        var _gaq = {
        push: function (ga_params) {
            var cmd = ga_params[0];
            if (cmd === '_trackEvent') {
                var category = ga_params[1], action = ga_params[2], opt_label = ga_params[3], opt_value = ga_params[4];

                if (opt_value) {
                    // ga('send', 'event', category, action, opt_label, opt_value, {
                    //     'nonInteraction': 1
                    // });
                
                    if(window.gtag != undefined){
                        gtag('event', action, {
                            'event_category': category,
                            'event_label': opt_label,
                            'value': opt_value,
                            'non_interaction': true
                        });
                    }
                   
                } else {
                    // ga('send', 'event', category, action, opt_label, {
                    //     'nonInteraction': 1
                    // });
                    if(window.gtag != undefined){
                        gtag('event', action, {
                            'event_category': category,
                            'event_label': opt_label,
                            'value': '',
                            'non_interaction': true
                        });
                    }
                }
            }
            if (cmd === '_addTrans') {
                // ga('ecommerce:addTransaction', {
                //     'id': ga_params[1], // Transaction ID. Required
                //     'affiliation': 'BigBasket.com', // Affiliation or store name
                //     'revenue': ga_params[3], // Grand Total
                //     'shipping': ga_params[5], // Shipping
                //     'tax': ga_params[4] // Tax
                // });
                // ga('ecommerce:send');


                gtag('event', 'purchase', {
                    "transaction_id": ga_params[1], // Transaction ID. Required
                    "affiliation": 'BigBasket.com', // Affiliation or store name
                    "value": ga_params[3], // Grand Total
                    "tax": ga_params[4], // Tax
                    "shipping": ga_params[5], // Shipping
                    // "items": ga_params[6] != undefined ? [ga_params[6]] : []
                });


            }
            if (cmd === '_addItem') {
                // ga('ecommerce:addItem', {
                //     'id': ga_params[1], // Transaction ID. Required
                //     'name': ga_params[3], // Product name. Required
                //     'sku': ga_params[2], // SKU/code
                //     'category': ga_params[4], // Category or variation
                //     'price': ga_params[5], // Unit price
                //     'quantity': ga_params[6] // Quantity
                // });
                // ga('ecommerce:send');


                gtag('event', 'add_to_cart', {
                    "items": [
                      {
                        "id": ga_params[1], // Transaction ID. Required
                        "name": ga_params[3], // Product name. Required
                        "category": ga_params[4], // Category or variation
                        "quantity": ga_params[6], // Quantity
                        "price": ga_params[5], // Unit price
                      }
                    ]
                });
                  
            }
        }
    };
        var services = {'getCustomPage':getCustomPage,
                        'getProductDeck':getProductDeck,
                        'ready':ready,
                        'updateProductDeck':updateProductDeck,
                        'getProductsForRestofTheTabs': getProductsForRestofTheTabs,
                        'pushToGoogleAnalytics': pushToGoogleAnalytics,
                        'pushToGTM': pushToGTM,
                        'getProductbyId':getProductbyId,
                        'getRequestQueue':getRequestQueue,
                        'getProductsBySlug':getProductsBySlug,
                        'getSysGenProductDeck':getSysGenProductDeck,
                        'getSearchPageData':getSearchPageData,
                        'updateNewAtBBList':updateNewAtBBList,
                        'updateSuggestionList':updateSuggestionList,
                        'logProductAvailablity':logProductAvailablity
                        };
        return services;

        function logProductAvailablity(toBeLoggedData) {
            function onLogProductAvailablityComplete(response){/*Nothing to do*/}
            $http.post('/log/prodavialbility/',{'toBeLoggedData':toBeLoggedData}).then(onLogProductAvailablityComplete)
        }

        function getProductsBySlug(type,slug, ctype, dynamic_slug,tlc,offer_type){
            function onComplete(response){
                return response.data.products;
            }
            var url = '/custompage/pd/?type='+type+'&ctype='+ctype
            if(slug){
                url=url+'&slug='+slug
            }
            
            if(tlc){
                url = url+'&d_slug='+ dynamic_slug+'&tlc='+tlc
            }
            if(dynamic_slug){
                url = url+'&d_slug='+ dynamic_slug
            }
            if(offer_type){
                url = url+'&offer_type='+offer_type
            }
            return $http.get(url).then(onComplete);
        }

        function getSysGenProductDeck(type,slug, listType,alloffersubtype){
            function sysGenProductDeckComplete(data, status, headers, config){
                // Swapping HeaderSection with category filter_slug.
                if (listType == "sis"){
                    return data.data;
                }
                else{
                    // Using header_section key to show categories instead of Category from facet_opts key
                    // angular.forEach(data.data.tab_info, function (tab_info, index) {
                    //     var found = R.findIndex(R.propEq('filter_slug','category'))(tab_info.filter_opts);
                    //     var new_filter = {};
                    //     angular.forEach(tab_info.header_section.items, function (header_section, index) {
                    //         header_section['display_name'] = header_section.title.text;
                    //     });
                    //     if (found<0){
                    //         new_filter.filter_name = 'Category';
                    //         new_filter.filter_slug = 'category';
                    //         new_filter.values = tab_info.header_section.items;
                    //
                    //         tab_info.filter_opts.splice(0, 0, new_filter)
                    //     }
                    //     else{
                    //         angular.forEach(tab_info.filter_opts, function (filter_opt, index) {
                    //             if (filter_opt.filter_slug == "category"){
                    //                 filter_opt.values = tab_info.header_section.items
                    //             }
                    //         });
                    //     }
                    //
                    // });
                    return data.data;
                }
            }
            var url = '/custompage/sysgenpd/?type='+type+'&slug='+slug
            if(sid){
                var url = url+'&sid='+sid
            }
            if(alloffersubtype){
                url = url+'&offer_sub_type='+alloffersubtype
            }

            if (type == "ps"){
                return $q.when(true).then(function(){
                    return searchJsonData;
                });
            }
            else{
                return $http.get(url).then(sysGenProductDeckComplete);
            }
        }

        function getProductbyId(idlist){
            function onComplete(response){
                return response.data.products;
            }

            return $http({
                method: 'GET',
                url: '/custompage/pd/',
                params: {
                    "id[]": idlist
                }
            }).then(onComplete);
            //return $http.get('/custompage/pd/?prod_id='+id).then(onComplete);
        }

        function getCustomPage() {
            var url= null;
            if(ADMIN_REQUEST === 'true' && LIVE_PREVIEW === 'true') {
                var cityregex = window.location.search.match(/(city=)(.*)/);
                if(cityregex && cityregex.length === 3){
                   url = '/admin/custompage/draftpreview?url=' + customPageURL+'&ar=true&city='+cityregex[2] +'&isB2B='+ ISB2B;
                }
            }
            else if(ADMIN_REQUEST === 'true'){
                var cityregex = window.location.search.match(/(city=)(.*)/)
                if(cityregex && cityregex.length === 3){
                   url = '/admin/custompage/display?url=' + customPageURL+'&ar=true&city='+cityregex[2] +'&isB2B='+ ISB2B;
                }
            }
            else{
               if(ctype == 'custompage')
                   url = '/'+ctype+'/display?url=' + customPageURL + '&cai=' + $window.CURRENT_ADDRESS_ID +'&isB2B='+ ISB2B;
               else
                   //url = '/'+ctype+'/display?url=' + customPageURL + '&slug=' + slug ;
                   if(ADMIN_REQUEST=='True'){
                     url = '/'+ctype+'/display?url=' + customPageURL +'&pageid='+PAGEID+'&slug=' + slug + '&cityid=' + CITYID +'&ar=1' +'&isB2B='+ ISB2B;
                   }
                   else{
                    url = '/'+ctype+'/display?url=' + customPageURL + '&slug=' + slug + '&cai=' + $window.CURRENT_ADDRESS_ID +'&isB2B='+ ISB2B;
                   }
            }
            return $http.get(url)
                .then(getCustomPageComplete);
            function getCustomPageComplete(data, status, headers, config) {
                return data.data;
            }
        }

        function getSearchPageData(slug, type) {
            var url= null;
            url = "/custompage/getsearchdata/?slug="+slug+"&type="+type;
            return $http.get(url)
                .then(getSearchPageDataComplete);
            function getSearchPageDataComplete(data, status, headers, config) {
                if(data.data){
                    searchJsonData = data.data.json_data;
                    return data.data;
                }
            }
        }


        function getProductDeck(urlWithSid, sortOn , offer_sub_type) {
            function getProductDeckComplete(data, status, headers, config){
                return data.data;
            }
            // return $http.get("/product/get-products/?sid=" + urlWithSid + '&sorted_on='+sortOn).then(getProductDeckComplete);
            var url = "/product/get-products/?=" + urlWithSid
            if(sortOn){
               url = url+ '&sorted_on='+sortOn
            }
            if(offer_sub_type){
                url = url+'&offer_sub_type='+offer_sub_type
            }
            return $http.get(url).then(getProductDeckComplete);
        }

        function getProductsForRestofTheTabs(listType, sid, tabType, page, appliedFilters, sortOn, paginate, slug ,offer_sub_type, sList, lList, rList) {
            function getProductDeckComplete(data, status, headers, config){
                return data.data;
            }
            var url = ''
            if(appliedFilters && paginate==undefined){
                if (listType)
                    url = "/product/get-products/?slug="+slug+"&filters="+JSON.stringify(appliedFilters.filters)+"&sorted_on="+sortOn+ '&listtype='+ listType;
                // For CustomPages who dont know about dynamic listType field
                else
                    url="/product/get-products/?sid="+appliedFilters.sid+"&filters="+JSON.stringify(appliedFilters.filters)+"&sorted_on="+sortOn
            }
            else {
                if (listType){
                    if (appliedFilters != null && appliedFilters != undefined){
                        url = "/product/get-products/?slug=" + slug + '&page=' + page + '&tab_type=[\"' + tabType + '\"]&filters='+JSON.stringify(appliedFilters.filters)+'&sorted_on='+sortOn+ '&listtype=' + listType
                    }
                    else
                        url = "/product/get-products/?slug=" + slug + '&page=' + page + '&tab_type=[\"' + tabType + '\"]&sorted_on='+sortOn+ '&listtype=' + listType
                }
                else{
                    if (appliedFilters != null && appliedFilters != undefined){
                        url = "/product/get-products/?sid=" + sid + '&page=' + page + '&tab_type=[\"' + tabType + '\"]&filters='+JSON.stringify(appliedFilters.filters)+'&sorted_on='+sortOn
                    }
                    else
                        url = "/product/get-products/?sid=" + sid + '&page=' + page + '&tab_type=[\"' + tabType + '\"]&sorted_on='+sortOn
                }
            }
            if(offer_sub_type){
                url = url+'&offer_sub_type='+offer_sub_type;
            }
            if(listType == "mem.sb") {
                if (sList.length) {
                    url = url+'&sList='+sList;
                }
                if (lList.length) {
                    url = url+'&lList='+lList;
                }
                if (rList.length) {
                    url = url + '&rList=' + rList;
                }
            }
            return $http.get(url).then(getProductDeckComplete);
        }

        function updateProductDeck(listType, appliedFilters, sortOn, slug, tabType,sidToFilter, base_sid,offer_sub_type){
            $('.pd-overlay').fadeIn();
            function getProductDeckComplete(data, status, headers, config){
                //Changing sid with base_sid. sid is HTML variable and base_sid is from vm.base_sid
                if (sid != base_sid){
                    sid = base_sid;
                }
                // Animate the scrolling motion.
                 $("html, body").animate({
                 scrollTop: $(".custom-component.product-deck").offset().top - 50
                 }, 2000);
                // Swapping HeaderSection with category filter_slug.
                if (listType == "sis"){
                    $('.pd-overlay').fadeOut();
                    return data.data;
                }
                else{
                    // Using header_section key to show categories instead of Category from facet_opts key
                    // angular.forEach(data.data.tab_info, function (tab_info, index) {
                    //     var found = R.findIndex(R.propEq('filter_slug','category'))(tab_info.filter_opts);
                    //     var new_filter = {};
                    //     angular.forEach(tab_info.header_section.items, function (header_section, index) {
                    //         header_section['display_name'] = header_section.title.text;
                    //     });
                    //     if (found<0){
                    //         new_filter.filter_name = 'Category';
                    //         new_filter.filter_slug = 'category';
                    //         new_filter.values = tab_info.header_section.items;
                    //
                    //         tab_info.filter_opts.splice(0, 0, new_filter)
                    //     }
                    //     else{
                    //         angular.forEach(tab_info.filter_opts, function (filter_opt, index) {
                    //             if (filter_opt.filter_slug == "category"){
                    //                 filter_opt.values = tab_info.header_section.items
                    //             }
                    //         });
                    //     }
                    //     // angular.forEach(tab_info.header_section.items, function (header_section, index) {
                    //     //     header_section['display_name'] = header_section.title.text;
                    //     // });
                    //     // angular.forEach(tab_info.filter_opts, function (filter_opt, index) {
                    //     //     if (filter_opt.filter_slug == "category"){
                    //     //         filter_opt.values = tab_info.header_section.items
                    //     //     }
                    //     // });
                    // });
                    $('.pd-overlay').fadeOut();
                    return data.data;
                }
            }
            var url = null
            if (listType)
                // return $http.get("/product/get-products/?sid="+appliedFilters.sid+"&filters="+JSON.stringify(appliedFilters.filters)+"&sorted_on="+sortOn+ '&listtype=' + listType).then(getProductDeckComplete);
                url = "/product/get-products/?sid="+sidToFilter+"&listtype="+listType+"&filters="+JSON.stringify(appliedFilters.filters)+"&sorted_on="+sortOn+ "&slug=" + slug + "&tab_type=[\"" + tabType + "\"]";
            else
                url = "/product/get-products/?sid="+appliedFilters.sid+"&filters="+JSON.stringify(appliedFilters.filters)+"&sorted_on="+sortOn;
            if(offer_sub_type){
                url = url+'&offer_sub_type='+offer_sub_type
            }

            if(url){

                return $http.get(url).then(getProductDeckComplete)
            }
        }

         function prime() {
            // This function can only be called once.
            if (primePromise) {
                return primePromise;
            }
            primePromise = $q.when(true).then(success);
            return primePromise;

            function success() {
                isPrimed = true;
            }
        }

        function ready(nextPromises) {
            var readyPromise = primePromise || prime();

            return readyPromise
                .then(function() {
                    return $q.all(nextPromises);
                }).catch(function (e) {
                });
        }


         // _gaq.push(['_trackEvent','Checkout interaction','Address','Displayed',1]);
    function pushToGoogleAnalytics(cmd,category,action,label,value){
        "use strict";
        $(document).trigger('screenViewReferralsEvent', [{}]);
        if(ctype == 'custompage'){
            action = 'cp | '+ window.location.pathname;
        }
        else if(ctype == 'customtemplates'){
            action = 'cptp | '+ window.location.pathname;
        }
        if(window.dataLayer != undefined){
            // _gaq.push([cmd,category,action,label,value]);

            gtag('event', action, {
                'event_category': category,
                'event_label': label,
                'value': value,
            });
        }
    }

    function pushToGTM(action, prod_id, quantity, price){
        dataLayer.push({
                    'event': 'add_to_basket_onclick',
                    'product_id': prod_id,
                    'price': price,
                    'quantity': quantity
                });
    }

    function getRequestQueue(requestlist){
            return $q.all(requestlist).then(function(response){
                    return true;
                });
        }
    }

    //This function updates the product_ids in excel_data key in sections
    function updateNewAtBBList(sectionList, searchJsonData){
        sectionList.forEach(function(section){
            section.section_data.excel_data = [];
            if(section.internalName == "now_at_bigbasket" && searchJsonData['show_now_at_bb'] == 1){
                if(searchJsonData['now_at_bb']['product_list']!=undefined){
                    for(var i=0;i < searchJsonData['now_at_bb']['product_list'].length;i++){
                        section.section_data.excel_data.push({'PDID':searchJsonData['now_at_bb']['product_list'][i].toString()})
                    }
                }
            }
            else if(section.internalName == "new_at_bigbasket" && searchJsonData['show_new_at_bb'] == 1){
                if(searchJsonData['new_at_bb']['product_list']!=undefined) {
                    for (var i = 0; i < searchJsonData['now_at_bb']['product_list'].length; i++) {
                        section.section_data.excel_data.push({'PDID': searchJsonData['new_at_bb']['product_list'][i].toString()})
                    }
                }
            }
        });
        return sectionList
    }

    //This function updates the suggestion list in Search Page
    // It changes the title, view_all_url of the carousel sections
    function updateSuggestionList(sectionList, suggSearchData){
        var index_to_delete = -1;
        var stop_flag = false ;
        sectionList.forEach(function(section, index){
            if(suggSearchData[index] != undefined){
                section.productsystemtype = suggSearchData[index].slug_type;
                section.productwidgetuserslug = suggSearchData[index].slug_value;
                section.viewAllUrl = suggSearchData[index].view_all_url;
                section.title = suggSearchData[index].title;
            }
            else if(stop_flag == false){
                index_to_delete = index;
                stop_flag = true
            }
        });
        if (index_to_delete > -1){
            sectionList.splice(index_to_delete,5);
        }
        return sectionList
    }
})();
(function () {
    "use strict";

    angular
        .module('app.customPage')
        .controller('TimeCalculator', TimeCalculator);

    TimeCalculator.$inject = ['$scope', '$rootScope', '$interval'];

    function TimeCalculator($scope, $rootScope, $interval) {
      $interval(function(){
        var now = new Date().getTime()/1000;
        $scope.$emit('TimeCheck', {data: now})
      },5000,0,true);

    }
}) ();
angular.module("app.layout").component("login", {
  templateUrl: "app/templates/innertemplates/login.html",
  bindings: {
    // goBack: '<'
  },
  controller: [
    "$scope",
    "$http",
    "$window",
    "loginAndSignupService",
    "$timeout",
    function ($scope, $http, $window, loginAndSignupService, $timeout) {
      var vm = this;
      var parent = $scope.$parent;
      var loginModal = angular.element(document.querySelector(".signup-modal"));
      vm.showForgotPasswordForm = false;
      vm.isB2B = parent.isB2B;
      vm.showLoginForm = true; //vm.isB2B ? false : true; done for BB-63851
      vm.showLoginWithOTPForm = false;
      vm.showSocialVerify = false;
      vm.isEditIdentifier = false;
      vm.identifier = "";
      vm.bbLoader = false;
      vm.togglePlaceHolder = true;
      vm.showAlmostThereOtpScreen = false;
      vm.showBusinessLogin = vm.isB2B ? true : false;
      vm.togglePasswordDisplay = function (formBlock) {
        formBlock.showHidePassword =
          "view" == formBlock.showHidePassword ? "hide" : "view";
        formBlock.passwordDisplayType =
          "password" == formBlock.passwordDisplayType ? "text" : "password";
      };
      vm.back = function () {
        vm.resetServerMessages();
        if(vm.showAlmostThereOtpScreen) {
          vm.showLoginForm = false;
          vm.showAlmostThereOtpScreen = false;
          vm.almostThere = true;
          parent.showNavTabs = false;
        } else {
          parent.showNavTabs = vm.isB2B ? false : true;
          vm.showLoginForm = true; //vm.isB2B ? false : true;
        }
        vm.showForgotPasswordForm = false;
        vm.showSocialVerify = false; //for back of mobile varification page to login page
        vm.login.otpMembershipError = "";
        parent.businessLogin = false;
        vm.showLoginWithOTPForm = false;
        vm.showBusinessLogin = vm.isB2B ? true : false;
        document.getElementById("otpEmail").value = "";
        vm.ToggleTimer(false);
      };

      vm.login = {};
      vm.login.emailID = "";
      vm.login.OTPemailID = "";
      vm.login.password = "";
      vm.login.passwordDisplayType = "password";
      vm.login.showHidePassword = "view";
      vm.loginErrorMessage = "";
      vm.login.showEmailError = false;
      vm.socialUser = {};
      vm.timer = 0;
      vm.time = {};
      vm.seconds = 30;
      vm.isUpdateEmail = "";
      vm.showResend = false;
      vm.change = false;
      vm.sendOtpRes = ""
      vm.almostThere = false;
      vm.UnifiedLoginRes = ""
      vm.is_mobile_no_update = false;
      if (window.mobileNumber) {
        vm.login.OTPemailID = window.mobileNumber;
      }

      $scope.$on("mbUpdated", function (event) {
        vm.login.OTPemailID = parent.preserved.mobileNumber
          ? parent.preserved.mobileNumber
          : "";
      });

      vm.initFacebook = function () {
        try {
          // addFacebookScript();
          var params = {
            appId: "1397993430473589",
            cookie: true,
            xfbml: true,
            version: "v5.0",
          };
          window.FB.init(params);
          window.FB.getLoginStatus(function (resp) { }, true);
        } catch (error) {
          console.log(error.name, ":", error.message);
        }
      };

      var addGoogleScript = function () {
        var id = "googleAuth";
        var src = "//apis.google.com/js/client:platform.js";
        return addScript(id, src);
      };
      // Script for Social init()
      var addScript = function (id, src) {
        return new Promise(function (resolve, reject) {
          var element = document.getElementById(id);
          if (element) {
            return;
          }
          var script = document.createElement("script");
          script.setAttribute("type", "text/javascript");
          script.setAttribute("id", id);
          script.setAttribute("src", src);
          script.addEventListener("load", resolve);
          script.addEventListener("error", function () {
            return reject(new Error("Error loading ".concat(id, ".")));
          });
          script.addEventListener("abort", function () {
            return reject(new Error("".concat(id, "  loading aborted.")));
          });
          document.getElementsByTagName("head")[0].appendChild(script);
        });
      };
      //"968245319944-jhqhki8h8m9psqe9m9bampi7gm0r4cqe.apps.googleusercontent.com", - FQAS
      vm.initGoogle = function () {
        try {
          addGoogleScript().then((script) => {
            var params = {
              client_id:
                "610100195438-jbg7jnikaqbn0rsiicbf72s45t55dvt1.apps.googleusercontent.com",
              // "968245319944-jhqhki8h8m9psqe9m9bampi7gm0r4cqe.apps.googleusercontent.com", //non-prod

              scope: "profile email",
            };
            window.gapi.load("auth2", function () {
              if (!window.gapi.auth2.getAuthInstance()) {
                window.gapi.auth2.init(params);
              }
            });
          });
        } catch (error) {
          console.log(error.name, ":", error);
        }
      };

      // vm.initFacebook();
      // vm.initGoogle();

      vm.toggleEditIdentifier = function () {
        vm.ToggleTimer(false);
        setTimeout(function () {
          $("#mobileEmail").focus();
        }, 100);

        //Snowplow = Edit Email / Phone scenario - Clicking on Change
        var eventName =
          vm.identifier == "email address" ? "Email_change" : "Mobile_Change";
        var data = JSON.stringify({
          EventName: eventName,
          EventSubGroup: "login",
          Action: "change",
        });
        $(document).trigger("loginInteractions", [data]);
        vm.isEditIdentifier = true;
        vm.showResend = false;
        // $scope.$digest();
      };

      vm.changeIdentifier = function () {
        //Snowplow = Edit Email / Phone scenario - Clicking on Done
        var eventName =
          vm.identifier == "email address" ? "Email_change" : "Mobile_Change";
        var data = JSON.stringify({
          EventName: eventName,
          EventSubGroup: "login",
          Action: "submit",
        });
        $(document).trigger("loginInteractions", [data]);
        vm.isEditIdentifier = false;
        if(vm.showAlmostThereOtpScreen) {
         vm.almostThereDoneButton();
         vm.showResend = false;
        }else{
          vm.DoneButton();
          vm.showResend = true;
        }
        vm.loginWithOTP.OTP = "";
        vm.resetServerMessages();
      };

      vm.login.submit = function (valid) {
        if (valid) {
          //resetting server errors
          vm.login.emailError = "";
          var loginInput = {
            username: vm.login.emailID,
            password: vm.login.password,
            Submit: "LOG IN",
            next: "/",
          };
          vm.resetServerMessages();
          //vm.bbLoader = true;
          loginAndSignupService
            .submitForm(loginInput, "/auth/login/", parent)
            .then(function (response) {
              // vm.bbLoader = false;
              if (response.data.success) {
                vm.ToggleTimer(false);
                //Snowplow = Login Success scenario via email / mobile
                var eventAction =
                  vm.identifier == "email address" ? "email OTP" : "mobile OTP";

                var data = JSON.stringify({
                  EventName: "Login_Success",
                  EventSubGroup: "login",
                  Action: eventAction,
                });

                $(document).trigger("loginInteractions", [data]);

                if (localStorage.getItem("nextUrl")) {
                  window.location.href = localStorage.getItem("nextUrl");
                  localStorage.setItem("nextUrl", "");
                  return;
                } else {
                  parent.redirect();
                }

                parent.close(); //Removing the code due to backend issue - comment this out
              } else {
                vm.login.emailError = response.data.error;
                vm.loginForm.$setPristine();
                vm.loginForm.$setUntouched();
                shake();

                //Snowplow = Login Failed scenario via email / mobile
                var eventAction =
                  vm.identifier == "email address" ? "email" : "mobile";

                var data = JSON.stringify({
                  EventName: "Login_Failed",
                  EventSubGroup: "login",
                  Action: eventAction,
                  FailureReason: response.data.error,
                });

                $(document).trigger("loginInteractions", [data]);
              }
            });
        } else {
          shake();
        }
      };

      var onFailure = function (data) { };

      vm.googleLogin = function () {
        if (!window.gapi || !window.gapi.auth2) return;
        var auth2 = window.gapi.auth2 && window.gapi.auth2.getAuthInstance();
        vm.bbLoader = true;
        //Social Login link clicked
        var data = JSON.stringify({
          EventName: "Social_Clicked",
          EventSubGroup: "login",
          Action: "google",
        });

        $(document).trigger("loginInteractions", [data]);

        auth2.signIn().then(
          function (res) {
            // If authorization pass well, we take profile info
            var basicProfile = res.getBasicProfile();
            var data = {};
            data.identity = {
              uid: basicProfile.getId(),
              provider: "google",
            };
            data.user = {
              email: basicProfile.getEmail(),
              firstName: basicProfile.getGivenName(),
              lastName: basicProfile.getFamilyName(),
            };
            data.auth = res.getAuthResponse();
            // Send data to back end
            onSuccess(data);
          },
          function (err) {
            window.location.href = "/";
            vm.bbLoader = false;
            return onFailure(err);
          }
        );
      };

      var addFacebookScript = function () {
        var id = "facebookAuth";
        var src = "http://connect.facebook.net/en_US/sdk.js";
        return addScript(id, src);
      };

      function fetchFbData() {
        return new Promise(function (resolve, rej) {
          window.FB.api(
            "/me",
            { fields: "name,email,first_name,last_name" },
            function (response) {
              response.provider = "facebook";
              vm.socialUser = response;
              resolve(response);
            }
          );
        });
      }

      var onSuccess = function (data) {
        var input = {};
        var eventAction = "";
        if (vm.is_mobile_no_update) {
          input.is_mobile_no_update = vm.is_mobile_no_update;
        }
        if (data && data.provider === "facebook") {
          input.fb_token = data.uid;
          input.email = vm.socialUser.email;
          eventAction = "facebook";
        } else {
          vm.socialUser = data;
          input.google_token = data.auth.id_token;
          input.email = data.user.email;
          eventAction = "google";
        }
        vm.bbLoader = true;
        loginAndSignupService
          .postHulk("/mapi/v4.0.0/member-svc/login/", input, parent)
          .then(function (response) {
            vm.bbLoader = false;
            if (response.success) {
              if (response.error_code) {
                if (
                  response.error_code === "HU4000" ||
                  response.error_code === "HU4004"
                ) {
                  vm.showSocialVerify = true;
                  vm.showLoginForm = false;
                  vm.showLoginWithOTPForm = false;
                  parent.showNavTabs = false;
                  $scope.$apply(function () {
                    $scope.$digest();
                  });
                } else if (response.error_code === "HU4290") {
                  var snowplowData = JSON.stringify({
                    EventName: "Login_Failed",
                    EventSubGroup: "login",
                    Action: eventAction,
                    FailureReason: response.message,
                    AdditionalInfo2: "OTP submit failed",
                  });
                  $(document).trigger("loginInteractions", [snowplowData]);
                } else if (
                  (response.error_code !== "HU4000" ||
                    response.error_code !== "HU4004" ||
                    response.error_code !== "HU4290") &&
                  response.show_message
                ) {
                  vm.loginWithOTP.otpError = response.message;
                  $scope.$digest();
                }
              } else {
                //Snowplow = Login Success scenario via facebook / google
                var snowplowData = JSON.stringify({
                  EventName: "Login_Success",
                  EventSubGroup: "login",
                  Action: eventAction,
                });
                $(document).trigger("loginInteractions", [snowplowData]);
                if (localStorage.getItem("nexUrl")) {
                  window.location.href =
                    window.location.origin + localStorage.getItem("nexUrl");
                  localStorage.setItem("nexUrl", "");
                } else {
                  parent.redirect();
                }
                parent.redirect();
                parent.close();
              }
            } else {
              //login failure
              if (response) {
                //Snowplow = Login Failed scenario via facebook / google
                var data = JSON.stringify({
                  EventName: "Login_Failed",
                  EventSubGroup: "login",
                  Action: eventAction,
                  FailureReason: response.message,
                });
                $(document).trigger("loginInteractions", [data]);
              }
            }
          })
          .catch(function (err) {
            vm.bbLoader = false;
            vm.loginWithOTP.otpError =
              "Something went wrong , Please try again";
          });
      };

      vm.loginInteraction = function ($event) {
        data = $event.currentTarget.getAttribute("data-logininteraction");
        $(document).trigger("loginInteractions", [data]);
      };
      vm.forgotPasswordLinkCLicked = function ($event, valid) {
        if (valid) {
          vm.loginInteraction($event);
          //resetting server errors
          vm.login.emailError = "";
          var memberCheckInput = {
            email_id: vm.login.emailID,
          };
          vm.resetServerMessages();
          loginAndSignupService
            .submitForm(memberCheckInput, "/auth/member_check/", parent)
            .then(function (response) {
              if (response.data.success) {
                initForgotPasswordForm();
                var otpRequestInput = memberCheckInput;
                loginAndSignupService
                  .getRequest("/auth/reset-password", otpRequestInput, parent)
                  .then(function (response) {
                    if (response.data.success === 0) {
                      vm.otpResendMessage = "OTP sent successfully";
                      // document.querySelector("#otp").focus();
                      $timeout(function () {
                        vm.otpResendMessage = "";
                        $scope.$digest();
                      }, 3000);
                    } else {
                      //otp failure
                    }
                  });
              } else {
                vm.login.membershipError = response.data.error;
                vm.loginForm.$setPristine();
                vm.loginForm.$setUntouched();
                shake();
              }
            });
        } else {
          vm.login.showEmailError = true;
          shake();
        }
      };

      vm.forgotPassword = {};
      var initForgotPasswordForm = function () {
        vm.showForgotPasswordForm = true;
        vm.showLoginForm = false;
        vm.showBusinessLogin = false;
        parent.showNavTabs = false;
        vm.forgotPassword.OTP = "";
        vm.forgotPassword.newPassword = "";
        vm.forgotPassword.confirmPassword = "";
        vm.forgotPassword.passwordDisplayType = "password";
        vm.forgotPassword.showHidePassword = "view";
        vm.forgotPassword.isPasswordValid = false;
        vm.forgotPassword.passwordMatch = false;
        vm.forgotPassword.otpError = "";
        vm.loginWithOTP.serverError = "";
        $timeout(function () {
          vm.forgotPasswordForm.$setUntouched();
          vm.forgotPasswordForm.$setPristine();
          document.querySelector("#otp").focus();
        }, 0);
      };

      vm.forgotPassword.checkPassword = function (valid) {
        vm.forgotPassword.isPasswordValid = valid > 0 ? true : false;
      };
      vm.resetServerMessages = function () {
        vm.forgotPassword.successMessage = "";
        vm.login.emailError = "";
        vm.forgotPassword.otpError = "";
        vm.login.membershipError = "";
        vm.loginWithOTP.otpError = "";
        vm.loginWithOTP.serverError = "";
        vm.loginWithOTP.errorCode = "";
      };

      vm.forgotPassword.validatePassword = function (e) {
        if (
          vm.forgotPassword.newPassword == vm.forgotPassword.confirmPassword
        ) {
          vm.forgotPassword.passwordMatch = true;
        } else {
          vm.forgotPassword.passwordMatch = false;
        }
      };

      vm.resendOTP = function () {
        vm.ToggleTimer(false);
        vm.showResend = false;
        var input = {};
        if(vm.showAlmostThereOtpScreen) {
          input = {
            identifier: vm.login.OTPemailID ? vm.login.OTPemailID : vm.email,
            referrer: "my_account"
          };
         } else {
          input = {
            identifier: vm.login.OTPemailID,
            referrer: "unified_login",
            refId: vm.sendOtpRes && vm.sendOtpRes.refId
          };
         }
        //Snowplow = Resend Otp
        var eventAction = vm.identifier == "email address" ? "email" : "mobile";
        if (eventAction === "email") {
          vm.change = true;
        } else {
          vm.change = false;
        }
        var data = JSON.stringify({
          EventName: "Resend_OTP",
          EventSubGroup: "login",
          Action: eventAction,
        });

        $(document).trigger("loginInteractions", [data]);

        vm.resetServerMessages();
        vm.bbLoader = true;

        SingleSingOn.resendOtp(input).then(response => {
          if (response && response.success) {

            vm.bbLoader = false;
            if (response && response.errors && response.errors != undefined) {
              vm.loginWithOTP.serverError = response.errors[0] && response.errors[0].display_msg;
              $scope.$digest();
            }
            else {
              vm.sendOtpRes = response
              vm.otpResendMessage = "OTP sent successfully",
                document.querySelector("#otp").focus();
              $timeout(function () {
                vm.otpResendMessage = "";
                $scope.$digest();
              }, 5000);
              vm.ToggleTimer(true);
            }

          }
          else {
            vm.bbLoader = false;
            vm.showResend = false;
            vm.otpResendMessage = "Somethings went wrong,Please try again";
            $timeout(function () {
              vm.otpResendMessage = "";
            }, 6000);
            var eventAction =
              vm.identifier == "email address" ? "email" : "mobile";
            var updateVal = vm.is_mobile_no_update ? "phone" : "login";
            var data = JSON.stringify({
              EventName: "Resend_OTP_Failed",
              EventSubGroup: updateVal,
              Action: eventAction,
              FailureReason: err,
            });
            $(document).trigger("loginInteractions", [data]);
          }
        }).catch(function (err) {
          vm.bbLoader = false;
          vm.otpResendMessage = "Somethings went wrong,Please try again";
          $timeout(function () {
            vm.otpResendMessage = "";
          }, 6000);
        });
      };

      vm.forgotPassword.submit = function ($event, valid) {
        if (
          valid &&
          vm.forgotPassword.passwordMatch &&
          vm.forgotPassword.isPasswordValid
        ) {
          var input = {
            otp: vm.forgotPassword.OTP,
            newpwd: vm.forgotPassword.newPassword,
            secpwd: vm.forgotPassword.confirmPassword,
            emailid: vm.login.emailID,
          };
          vm.loginInteraction($event);
          vm.resetServerMessages();
          loginAndSignupService
            .submitForm(input, "/auth/reset-password/", parent)
            .then(function (response) {
              if (response.data.success !== 0) {
                vm.forgotPassword.otpError = response.data.message;
                vm.forgotPasswordForm.$setUntouched();
                vm.forgotPasswordForm.$setPristine();
                shake();
              } else {
                parent.redirect();
                parent.close(); //Removing the code due to backend issue - comment this out
              }
            });
        } else {
          shake();
        }
      };
      vm.socialLogin = function (platform) {
        if (platform == "fb") loginAndSignupService.fb_login("login");
        if (platform == "gplus") loginAndSignupService.gplus_login("login");
      };

      vm.loginRedirect = function (tab) {
        window.mobileNumber = vm.login.OTPemailID;
        vm.showLoginForm = true;
        if (tab === "signup") {
          if (vm.isB2B) {
            parent.dismiss(true);
            window.location.href = "/signup";
          } else {
            vm.showLoginWithOTPForm = false;
            parent.switchLoginTab("signup", vm.login.OTPemailID);
            parent.showNavTabs = true;
          }
        } else {
          if (vm.isB2B) {
            vm.back();
          } else {
            vm.showLoginWithOTPForm = false;
            parent.switchLoginTab("login", vm.login.OTPemailID);
            parent.showNavTabs = true;
            vm.ToggleTimer(false);
          }
        }
      };
      var aThirySecondTimer = {};
      vm.ToggleTimer = function (toggle) {
        //OTP thiry second timer.
        var thirtySeconds = 30;
        function validityOfOTPTimer() {
          if (thirtySeconds < 0) {
            clearInterval(aThirySecondTimer);
            vm.showResend = true;
            $scope.$digest();
          }
        }

        if (toggle && document.getElementById("timeLeftInSeconds") != "null" && document.getElementById("timeLeftInSeconds") != undefined && document.getElementById("timeLeftInSeconds") != null) {
          aThirySecondTimer = setInterval(function () {
            if (thirtySeconds < 10) {
              thirtySeconds = "0" + thirtySeconds;
            }
            document.getElementById("timeLeftInSeconds").innerHTML =
              "00:" + thirtySeconds;
            thirtySeconds = thirtySeconds - 1;
            validityOfOTPTimer();
          }, 1000);
        } else {
          clearInterval(aThirySecondTimer);
          vm.showResend = false;
          // $scope.$digest();
          // });
        }
      };

      vm.verifyOtp = function (e, valid, identifier) {
        e.preventDefault();
        if (vm.is_mobile_no_update) {
          identifier = vm.mobile;
        }
        if (valid) {
          vm.is_mobile_no_update = true;
          identifier = vm.mobile;
          initLoginWithOTPForm(identifier);
        }
      };

      vm.loginWithOTPLinkClicked = function ($event, valid, identifier) {
        vm.isUpdateEmail = vm.login.OTPemailID;
        if (valid && identifier != "") {
          vm.loginInteraction($event);
          //resetting server errors
          vm.login.emailError = "";
          vm.resetServerMessages();
          initLoginWithOTPForm(identifier);
        } else {
          vm.login.showEmailError = true;
          shake();
        }
      };
      vm.togglePlaceHolderClicked = function ($event, toggleVal) {

        vm.togglePlaceHolder = !toggleVal;
        // document.getElementById("otpEmail").value = "";
        vm.loginWithOTP.otpError = "";
        vm.loginWithOTP.serverError = "";
        vm.login.OTPemailID = "";
        vm.resetServerMessages();
        // $scope.$digest();
        $scope.$apply();
      };
      vm.loginWithOTP = {};

      var initLoginWithOTPForm = function (identifier) {
        vm.ToggleTimer(false);
        vm.login.OTPemailID = identifier;
        var eventName = "";
        var screenType = "";
        if (
          RegExp(
            /(^(?!.{76,}))(^(([^<>()δ[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@(?=[^-])((([\w-]+\.)+[a-zA-Z-]+)[a-zA-Z])$)/
          ).test(identifier)
        ) {
          vm.identifier = "email address";
          eventName = "Email_OTP_Verification_Shown";
          screenType = "Email_OTP_Verification";
        } else {
          vm.identifier = "mobile number";
          eventName = "Mobile_OTP_Verification_Shown";
          screenType = "Mobile_OTP_verification";
        }
        $(document).trigger("authScreenViews", [
          {
            EventName: eventName,
            ScreenType: screenType,
            ScreenURL: window.location.origin + "/login/" + "/" + screenType,
            ScreenSlug: "/Mobile_OTP_verification/",
            ReferrerURL: window.location.origin + "/login/",
            ReferrerSlug: "/login/",
            ReferrerType: "login",
          },
        ]);
        vm.loginWithOTP.sendOTP = function () {
          vm.showResend = false;
          vm.resetServerMessages();
          var otpRequestInput = {
            identifier: identifier,
            referrer: "unified_login"
          };

          var eventAction =
            vm.identifier == "email address" ? "email" : "mobile";
          if (eventAction === "email") {
            vm.change = true;
          } else {
            vm.change = false;
          }
          // vm.bbLoader = true;
          SingleSingOn.sendOtp(otpRequestInput).then(response => {

            // vm.bbLoader = false;
            if (response.success) {
              if (response && response.errors && response.errors[0].code_str === "HU4004") {
                parent.showNavTabs = false;
                vm.sendOtpRes = response;
                vm.isEditIdentifier = false;
                vm.showSocialVerify = true;
                vm.showLoginWithOTPForm = false;
                vm.showBusinessLogin = false;
                vm.showLoginForm = false;
                vm.loginWithOTP.OTP = "";
                vm.loginWithOTP.otpError = "";
                vm.loginWithOTP.serverError = "";
                // $scope.$digest();
                $scope.$apply();
              }
              else if (response && response.errors && response.errors != undefined) {
                vm.sendOtpRes = response;
                vm.loginWithOTP.otpError = response.errors[0] && response.errors[0].display_msg;
                // $scope.$digest();
                $scope.$apply();
              } else {
                vm.sendOtpRes = response;
                vm.isEditIdentifier = false;
                vm.showSocialVerify = false;
                vm.showLoginWithOTPForm = true;
                vm.showBusinessLogin = false;
                vm.showLoginForm = false;
                vm.loginWithOTP.OTP = "";
                vm.loginWithOTP.otpError = "";
                vm.loginWithOTP.serverError = "";
                parent.showNavTabs = false;
                vm.loginWithOTP.OTP = "";
                // $scope.$digest();
                $scope.$apply();
                // vm.loginWithOTPForm.$setUntouched();
                // vm.loginWithOTPForm.$setPristine();
                vm.otpResendMessage = "OTP sent successfully";
                document.querySelector("#otp").focus();
                $timeout(function () {
                  vm.otpResendMessage = "";
                  $scope.$digest();
                  // $scope.$apply();
                }, 5000);
                vm.ToggleTimer(true);
              }
            } else {

              //otp failure
              var snowplowData = JSON.stringify({
                EventName: "Resend_OTP_Failed",
                EventSubGroup: "login",
                Action: eventAction,
                FailureReason: "Something went wrong",
              });
              $(document).trigger("loginInteractions", [snowplowData]);
            }
          }).catch(function (err) {
            vm.bbLoader = false;
            vm.loginWithOTP.otpError =
              "Something went wrong , Please try again";
          });
        };

        $timeout(function () {

          // vm.loginWithOTPForm.$setUntouched();
          // vm.loginWithOTPForm.$setPristine();
          vm.loginWithOTP.sendOTP();
        }, 0);
      };

      vm.DoneButton = function () {
        var input = {
          identifier: vm.login.OTPemailID,
          referrer: "unified_login"
        };
        SingleSingOn.sendOtp(input).then(response => {
          // vm.bbLoader = false;
          if (response.success) {
            if (response.errors && response.errors[0].code_str !== "HU4004") {
              vm.sendOtpRes = response;
              vm.loginWithOTP.otpError = response.errors[0] && response.errors[0].display_msg;
              vm.otpResendMessage = "OTP sent successfully",
              document.querySelector("#otp").focus();
              $timeout(function () {
                vm.otpResendMessage = "";
                $scope.$digest();
              }, 5000);
              vm.ToggleTimer(true);
              $scope.$digest();
            } else {
              vm.sendOtpRes = response;
              if (response.errors && response.errors[0].code_str === "HU4004") {

                // vm.showSocialVerify = true;
                // vm.showLoginForm = false;
                // vm.showLoginWithOTPForm = false;

                // parent.showNavTabs = false;
                // vm.sendOtpRes = response;
                // vm.isEditIdentifier = false;
                // vm.showSocialVerify = true;
                // vm.showLoginWithOTPForm = false;
                // vm.showBusinessLogin = false;
                // vm.showLoginForm = false;
                // vm.loginWithOTP.OTP = "";
                // vm.loginWithOTP.otpError = "";
                // vm.loginWithOTP.serverError = "";

                parent.showNavTabs = false;
                vm.sendOtpRes = response;
                vm.isEditIdentifier = false;
                vm.showSocialVerify = true;
                vm.showLoginWithOTPForm = false;
                vm.showBusinessLogin = false;
                vm.showLoginForm = false;
                vm.loginWithOTP.OTP = "";
                vm.loginWithOTP.otpError = "";
                vm.loginWithOTP.serverError = "";

                // $(document).trigger("authScreenViews", [
                //   {
                //     EventName: "Mobile_Number_verification_Shown",
                //     ScreenType: "Mobile_Number_verification",
                //     ScreenURL:
                //       window.location.origin +
                //       "/login/Mobile_Number_verification/",
                //     ScreenSlug: "/Mobile_Number_verification/",
                //     ReferrerURL: window.location.origin + "/login/",
                //     ReferrerSlug: "/Email_OTP_Verification/",
                //     ReferrerType: "Email_OTP_Verification",
                //   },
                // ]);
                $scope.$apply();
              }
              if (
                response.need_review || response.is_signup
              ) {

                vm.almostThere = true;
                vm.fname = response && response.first_name;
                vm.lname = response && response.last_name;
                vm.email = response && response.email
                // vm.showSocialVerify = true;
                vm.showLoginForm = false;
                vm.showLoginWithOTPForm = false;
                $scope.$digest();
              } else if (response.errors && response.errors[0].code_str === "HU4290") {

                var snowplowData = JSON.stringify({
                  EventName: "Login_Failed",
                  EventSubGroup: "login",
                  Action: eventAction,
                  FailureReason: response.message,
                  AdditionalInfo2: "OTP submit failed",
                  // add method
                });
                $(document).trigger("loginInteractions", [snowplowData]);
                vm.loginWithOTP.serverError = response.errors[0].display_msg;
                vm.loginWithOTP.errorCode = response.errors[0].code_str;
                vm.loginWithOTPForm.$setUntouched();
                vm.loginWithOTPForm.$setPristine();
                $scope.$digest();
              } else if (
                response &&
                response.errors[0] &&
                response.errors[0].display_msg != ""
              ) {

                vm.loginWithOTP.serverError = response.errors[0].display_msg;
                vm.loginWithOTP.errorCode = response.errors[0].code_str;
                // vm.loginWithOTPForm.$setUntouched();
                // vm.loginWithOTPForm.$setPristine();
                if (response.errors[0].code_str === "HU4002") {
                  $scope.$digest();
                  var snowplowData = JSON.stringify({
                    EventName: "Login_Failed",
                    EventSubGroup: "login",
                    Action: "mobile",
                    FailureReason:
                      "The mobile number is not registered with us",
                  });
                  $(document).trigger("loginInteractions", [snowplowData]);
                }
                $scope.$digest();
              } else {
                var snowplowData = JSON.stringify({
                  EventName: "Login_Failed",
                  EventSubGroup: "login",
                  Action: eventAction,
                  FailureReason: response.errors[0].display_msg,
                });
                $(document).trigger("loginInteractions", [snowplowData]);
              }
              // vm.isEditIdentifier = false;
              // vm.showSocialVerify = false;
              // vm.showLoginWithOTPForm = false;
              // vm.showBusinessLogin = false;
              // vm.showLoginForm = false;
              // vm.loginWithOTP.OTP = "";
              // vm.loginWithOTP.otpError = "";
              // vm.loginWithOTP.serverError = "";
              // parent.showNavTabs = false;
              // vm.loginWithOTP.OTP = "";
              // $scope.$digest();
              // vm.loginWithOTPForm.$setUntouched();
              // vm.loginWithOTPForm.$setPristine();
              vm.otpResendMessage = "OTP sent successfully";
              document.querySelector("#otp").focus();
              $timeout(function () {
                vm.otpResendMessage = "";
                $scope.$digest();
              }, 3000);
              vm.ToggleTimer(true);
            }
          } else {

            //otp failure
            var snowplowData = JSON.stringify({
              EventName: "Resend_OTP_Failed",
              EventSubGroup: "login",
              Action: eventAction,
              FailureReason: "Something went wrong",
            });
            $(document).trigger("loginInteractions", [snowplowData]);
          }
        }).catch(function (err) {
          vm.bbLoader = false;
          vm.loginWithOTP.otpError =
            "Something went wrong , Please try again";
        });
      }

      vm.initBusinessLogin = function () {
        vm.login.membershipError = "";
        parent.businessLogin = true;
        vm.showBusinessLogin = true;
        parent.showNavTabs = false;
      };

      vm.donotAllowSpecialChars = function (e) {
        if (e.key.search(/^[a-zA-Z0-9\s]+$/) == -1) e.preventDefault();
      };

      vm.loginWithOTP.submit = function (e, valid) {
        e.preventDefault();
        if (valid) {
          var identifier = "";
          var input = {};
          var eventAction = "";
          if (vm.is_mobile_no_update) {
            input.is_mobile_no_update = vm.is_mobile_no_update;
            if (Object.keys(vm.socialUser).length > 0) {
              input.email =
                vm.socialUser && vm.socialUser.provider === "facebook"
                  ? vm.socialUser.email
                  : vm.socialUser.user && vm.socialUser.user.email;
            } else {
              input.email = vm.isUpdateEmail || vm.login.emailID;
            }
            identifier = vm.login.OTPemailID || vm.mobile;
          } else {
            identifier = vm.login.OTPemailID
              ? vm.login.OTPemailID
              : vm.login.emailID;
          }
          if (
            RegExp(
              /(^(?!.{76,}))(^(([^<>()δ[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@(?=[^-])((([\w-]+\.)+[a-zA-Z-]+)[a-zA-Z])$)/
            ).test(identifier)
          ) {
            input.email = vm.login.OTPemailID
              ? vm.login.OTPemailID
              : vm.login.emailID;
            input.email_otp = vm.loginWithOTP.OTP;
            eventAction = "email OTP";
          } else {
            input.mobile_no = identifier;
            input.mobile_no_otp = vm.loginWithOTP.OTP;
            eventAction = "mobile OTP";
          }
          if (vm.sendOtpRes && vm.sendOtpRes.refId) {
            input.refId = vm.sendOtpRes.refId
          }

          vm.resetServerMessages();
          vm.loginWithOTP.otpError = "";
          vm.loginWithOTP.serverError = "";
          vm.bbLoader = true;
          SingleSingOn.UnifiedLogin(input).then(response => {
            vm.UnifiedLoginRes = response
            vm.bbLoader = false;
            if (response.success) {
              if (!response.errors && response.need_review != true && response.is_signup !== true) {
                //Snowplow = Login Success scenario via email / mobile
                var snowplowData = JSON.stringify({
                  EventName: "Login_Success",
                  EventSubGroup: "login",
                  Action: eventAction,
                });
                $(document).trigger("loginInteractions", [snowplowData]);
                var getParameterByName = (name, url = window.location.href) => {
                  name = name.replace(/[\[\]]/g, "\\$&");
                  var regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),
                    results = regex.exec(url);
                  if (!results) return null;
                  if (!results[2]) return "";
                  return decodeURIComponent(results[2].replace(/\+/g, " "));
                };

                if(getParameterByName("next")){
                  window.location.href = window.location.origin + getParameterByName("next");
                  return;
                }
                if (localStorage.getItem("nexUrl")) {
                  window.location.href =
                    window.location.origin + localStorage.getItem("nexUrl");
                  localStorage.setItem("nexUrl", "");
                  return;
                } else {
                  parent.redirect();
                }
                parent.close(); //Removing the code due to backend issue - comment this out
              } else {
                if (response.errors && response.errors[0].code_str === "HU4004") {

                  vm.showSocialVerify = true;
                  vm.showLoginForm = false;
                  vm.showLoginWithOTPForm = false;
                  $(document).trigger("authScreenViews", [
                    {
                      EventName: "Mobile_Number_verification_Shown",
                      ScreenType: "Mobile_Number_verification",
                      ScreenURL:
                        window.location.origin +
                        "/login/Mobile_Number_verification/",
                      ScreenSlug: "/Mobile_Number_verification/",
                      ReferrerURL: window.location.origin + "/login/",
                      ReferrerSlug: "/Email_OTP_Verification/",
                      ReferrerType: "Email_OTP_Verification",
                    },
                  ]);
                  $scope.$digest();
                }
                if (
                  response.need_review || response.is_signup
                ) {

                  vm.almostThere = true;
                  vm.fname = response && response.first_name;
                  vm.lname = response && response.last_name;
                  vm.email = response && response.email
                  // vm.showSocialVerify = true;
                  vm.showLoginForm = false;
                  vm.showLoginWithOTPForm = false;
                  $scope.$digest();
                } else if (response.errors && response.errors[0].code_str === "HU4290") {

                  var snowplowData = JSON.stringify({
                    EventName: "Login_Failed",
                    EventSubGroup: "login",
                    Action: eventAction,
                    FailureReason: response.message,
                    AdditionalInfo2: "OTP submit failed",
                    // add method
                  });
                  $(document).trigger("loginInteractions", [snowplowData]);
                  vm.loginWithOTP.serverError = response.errors[0].display_msg;
                  vm.loginWithOTP.errorCode = response.errors[0].code_str;
                  vm.loginWithOTPForm.$setUntouched();
                  vm.loginWithOTPForm.$setPristine();
                  $scope.$digest();
                } else if (
                  response &&
                  response.errors[0] &&
                  response.errors[0].display_msg != ""
                ) {

                  vm.loginWithOTP.serverError = response.errors[0].display_msg;
                  vm.loginWithOTP.errorCode = response.errors[0].code_str;
                  // vm.loginWithOTPForm.$setUntouched();
                  // vm.loginWithOTPForm.$setPristine();
                  if (response.errors[0].code_str === "HU4002") {
                    $scope.$digest();
                    var snowplowData = JSON.stringify({
                      EventName: "Login_Failed",
                      EventSubGroup: "login",
                      Action: "mobile",
                      FailureReason:
                        "The mobile number is not registered with us",
                    });
                    $(document).trigger("loginInteractions", [snowplowData]);
                  }
                  $scope.$digest();
                } else {
                  var snowplowData = JSON.stringify({
                    EventName: "Login_Failed",
                    EventSubGroup: "login",
                    Action: eventAction,
                    FailureReason: response.errors[0].display_msg,
                  });
                  $(document).trigger("loginInteractions", [snowplowData]);
                }
              }
            } else {

              vm.loginWithOTP.otpError = response.data.message;
              vm.loginWithOTP.serverError = "";
              // vm.loginWithOTPForm.$setUntouched();
              // vm.loginWithOTPForm.$setPristine();

              //Snowplow = Login Failed scenario via email / mobile
              var snowplowData = JSON.stringify({
                EventName: "Login_Failed",
                EventSubGroup: "login",
                Action: eventAction,
                FailureReason: "Something went wrong",
              });
              $(document).trigger("loginInteractions", [snowplowData]);
              shake();
            }
          }).catch(function (err) {
            vm.bbLoader = false;
            vm.loginWithOTP.otpError =
              "Something went wrong , Please try again";
            $scope.$digest();
          });
        } else {
          shake();
        }
      };

      vm.signupSubmit = function (e, validForm) {
        vm.ToggleTimer(false);
        e.preventDefault();
        if (vm.fname || vm.lname || vm.email) {
          var signupInput = {
            first_name: vm.fname,
            last_name: vm.lname,
            new_email: vm.email
          };
          if (vm.email !== vm.UnifiedLoginRes.email) {
            signupInput.email = vm.UnifiedLoginRes.email;
          }
          signupInput.referrer = "unified_login";

          //re-initialize server error messages before every submit
          vm.error_messages = {
            email: ""
          };
          vm.bbLoader = true;
          SingleSingOn.Profile(signupInput).then(response => {
            vm.bbLoader = false;
            if (response.success) {
              if (!response.errors) {
                //$window.location.pathname = response.data.redirect_url;
                if (localStorage.getItem("nexUrl")) {
                  window.location.href = window.location.origin + localStorage.getItem("nexUrl");
                  localStorage.setItem("nexUrl", "");
                  return;
                } else {
                  window.location.href = "/";
                }
                parent.redirect();
                parent.close(); //Removing the code due to backend issue - comment this out
              } else if (response.errors && response.errors[0].code_str === "HU4022") {
                vm.showLoginWithOTPForm = false;
                vm.showBusinessLogin = false;
                vm.showLoginForm = false;
                vm.showAlmostThereOtpScreen = true;
                vm.isEditIdentifier = false;
                vm.almostThere = false;
                vm.loginWithOTP.otpError = "";
                vm.loginWithOTP.OTP = "";
                vm.loginWithOTP.serverError = "";
                vm.login.OTPemailID = "";
                $scope.$apply();
                vm.otpResendMessage = "OTP sent successfully";
                document.querySelector("#otp").focus();
                $timeout(function () {
                  vm.otpResendMessage = "";
                  $scope.$digest();
                  // $scope.$apply();
                }, 5000);
                vm.ToggleTimer(true);
              } else {
                vm.error_messages["update"] = response.errors[0].display_msg;
                angular.element(document.querySelector("#email")).addClass("ng-invalid");
                $scope.$digest();
                //Snowplow = Add Email Failed scenario
                var data = JSON.stringify({
                  EventName: "AddEmail_Failed",
                  EventSubGroup: "signup",
                  Action: "email",
                  FailureReason: response.errors[0].display_msg
                });
                $(document).trigger("loginInteractions", [data]);
              }
            }
            //else handle form errors
            else {
              vm.reset_form();
              vm.show_server_error(response.data);
              loginModal.addClass("shake");
              $timeout(function () {
                loginModal.removeClass("shake");
              }, 500);

              //Snowplow = SignUp failed via mobile otp scenario
              var data = JSON.stringify({
                EventName: "SignUp_Failed",
                EventSubGroup: "signup",
                Action: "mobile",
                FailureReason: response.message
              });
              $(document).trigger("loginInteractions", [data]);
            }
          }).catch(function (err) {
            vm.bbLoader = false;
            vm.loginWithOTP.otpError = "Something went wrong , Please try again";
            $scope.$digest();
          });
        } else {

          if (localStorage.getItem("nexUrl")) {
            window.location.href = window.location.origin + localStorage.getItem("nexUrl");
            localStorage.setItem("nexUrl", "");
            return;
          } else {
            window.location.href = "/";
          }
        }
      };

      vm.almostThereEmailSignUp = function (e, validForm) {
        e.preventDefault();
          var signupInput = {
            first_name: vm.fname,
            last_name: vm.lname,
            new_email: vm.email,
            new_email_otp : vm.loginWithOTP.OTP
          };
          signupInput.referrer = "unified_login";

          //re-initialize server error messages before every submit
          vm.error_messages = {
            email: ""
          };
          vm.loginWithOTP.otpError = "";
          vm.bbLoader = true;
          SingleSingOn.Profile(signupInput).then(response => {
            vm.bbLoader = false;
            if (response.success) {
              if (!response.errors) {
                //$window.location.pathname = response.data.redirect_url;
                if (localStorage.getItem("nexUrl")) {
                  window.location.href = window.location.origin + localStorage.getItem("nexUrl");
                  localStorage.setItem("nexUrl", "");
                  return;
                } else {
                  window.location.href = "/";
                }
                parent.redirect();
                parent.close(); //Removing the code due to backend issue - comment this out
              } else {
                vm.loginWithOTP.serverError = response.errors[0].display_msg;
                $scope.$digest();
                //Snowplow = Add Email Failed scenario
                var data = JSON.stringify({
                  EventName: "AddEmail_Failed",
                  EventSubGroup: "signup",
                  Action: "email",
                  FailureReason: response.errors[0].display_msg
                });
                $(document).trigger("loginInteractions", [data]);
              }
            }
            //else handle form errors
            else {
              vm.loginWithOTP.otpError = response.data.message;
              vm.reset_form();
              vm.show_server_error(response.data);
              loginModal.addClass("shake");
              $timeout(function () {
                loginModal.removeClass("shake");
              }, 500);

              //Snowplow = SignUp failed via mobile otp scenario
              var data = JSON.stringify({
                EventName: "SignUp_Failed",
                EventSubGroup: "signup",
                Action: "mobile",
                FailureReason: response.message
              });
              $(document).trigger("loginInteractions", [data]);
            }
          }).catch(function (err) {
            vm.bbLoader = false;
            vm.loginWithOTP.otpError = "Something went wrong , Please try again";
            $scope.$digest();
          });
      };

      vm.almostThereDoneButton = function() {
        var signupInput = {
          first_name: vm.fname,
          last_name: vm.lname,
          new_email: vm.email
        };
        delete signupInput.new_email_otp;
        signupInput.referrer = "unified_login";
       SingleSingOn.Profile(signupInput).then(response => {
            if (!response.errors) {
              vm.loginWithOTP.otpError = response.errors[0] && response.errors[0].display_msg;
              vm.otpResendMessage = "OTP sent successfully",
              document.querySelector("#otp").focus();
              $timeout(function () {
                vm.otpResendMessage = "";
                $scope.$digest();
              }, 5000);
              vm.ToggleTimer(true);
              $scope.$digest();
            } else {
               if (response.errors && response.errors[0].code_str === "HU4290") {

                var snowplowData = JSON.stringify({
                  EventName: "Login_Failed",
                  EventSubGroup: "login",
                  Action: eventAction,
                  FailureReason: response.message,
                  AdditionalInfo2: "OTP submit failed",
                  // add method
                });
                $(document).trigger("loginInteractions", [snowplowData]);
                vm.loginWithOTP.serverError = response.errors[0].display_msg;
                vm.loginWithOTP.errorCode = response.errors[0].code_str;
                vm.loginWithOTPForm.$setUntouched();
                vm.loginWithOTPForm.$setPristine();
                $scope.$digest();
               } else if (
                response &&
                response.errors[0] &&
                response.errors[0].display_msg != ""
               ) {
                vm.loginWithOTP.serverError = response.errors[0].display_msg;
                vm.loginWithOTP.errorCode = response.errors[0].code_str;
                if (response.errors[0].code_str === "HU4002") {
                  $scope.$digest();
                  var snowplowData = JSON.stringify({
                    EventName: "Login_Failed",
                    EventSubGroup: "login",
                    Action: "mobile",
                    FailureReason:
                      "The Email Address is not registered with us",
                  });
                  $(document).trigger("loginInteractions", [snowplowData]);
                }
                $scope.$digest();
               } else {
                var snowplowData = JSON.stringify({
                  EventName: "Login_Failed",
                  EventSubGroup: "login",
                  Action: eventAction,
                  FailureReason: response.errors[0].display_msg,
                });
                $(document).trigger("loginInteractions", [snowplowData]);
              }
              vm.otpResendMessage = "OTP sent successfully";
              document.querySelector("#otp").focus();
              $timeout(function () {
                vm.otpResendMessage = "";
                $scope.$digest();
              }, 3000);
              vm.ToggleTimer(true);
            }
         }).catch(function (err) {
          vm.bbLoader = false;
          vm.loginWithOTP.otpError =
            "Something went wrong , Please try again";
          });
      }



      var shake = function () {
        loginModal.addClass("shake");
        $timeout(function () {
          loginModal.removeClass("shake");
        }, 500);
      };
    },
  ],
});

angular.module("app.layout").controller("loginAndSignupBase", [
  "$scope",
  "$uibModalInstance",
  "modalData",
  "loginAndSignupService",
  function($scope, $uibModalInstance, modalData, loginAndSignupService) {
    var vm = this;
    $scope.bbLoader = false;
    $scope.goBack = false;
    $scope.loadSignupCaptcha = true;
    $scope.captcha_url = "";
    $scope.captcha_0 = "";
    $scope.isB2B = window.ISB2B == "True";
    $scope.businessLogin = $scope.isB2B ? true : false;
    $scope.showNavTabs = $scope.isB2B ? false : true;
    $scope.showTitle = $scope.isB2B ? "" : "Verify mobile number";
    $scope.preserved = {};

    //Member Phone Number Verification
    $scope.showPhoneNumberModal = false;
    $scope.memberPhoneOtpData = {};

    var mediaUrl = typeof MEDIA_URL != "undefined" ? MEDIA_URL : "";
    var banners = {};

    if (localStorage.getItem("newLogin")) {
      modalData.next = localStorage.getItem("next");
      localStorage.removeItem("newLogin");
      localStorage.removeItem("next");
    }

    vm.getSearchQueryParam = function(name, a_url) {
      var url = a_url || window.location.href;
      name = name.replace(/[[\]]/g, "\\$&");
      var regex = new RegExp("[?&]${name}(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
      if (!results) {
        return "";
      }
      if (!results[2]) {
        return "";
      }
      return decodeURIComponent(results[2].replace(/\+/g, " "));
    };

    if (
      window.location.pathname.indexOf("/auth/login/") > -1 ||
      window.location.pathname.indexOf("/auth/signup/") > -1
    ) {
      modalData.next =
        vm.getSearchQueryParam("next") !== ""
          ? vm.getSearchQueryParam("next")
          : "/";
      modalData.tab =
        window.location.pathname.indexOf("/auth/login/") > -1
          ? "login"
          : "signup";
    }

    $scope.dismiss = function() {
      if (document.querySelector(".text-primary") && (document.querySelector(".text-primary").innerText === "Almost there" || document.querySelector(".text-primary").innerText === "Verify Email Address")) {
        $uibModalInstance.dismiss();
        window.location.href = "/";
      } else {
        $(document).trigger("ScreenViewLoginClose");
        $uibModalInstance.dismiss();
        if (window.location.search.indexOf("next") > -1) {
          window.location.pathname = window.location.search.split("next=")[1];
        }
      }
    };
    $scope.close = function() {
      $uibModalInstance.dismiss();
    };
    vm.tabs = {
      login: true,
      signup: false
    };
    vm.switchTab = function(tabKey) {
      Object.keys(vm.tabs).forEach(function(key) {
        vm.tabs[key] = false;
      });
      vm.tabs[tabKey] = true;
      vm.bannerUrl = banners[tabKey] ? banners[tabKey].url : "";
      vm.bannerId = banners[tabKey] ? banners[tabKey].id : "";
      screenSlug = vm.tabs.login ? "/auth/login" : "/auth/signup";
      $(document).trigger("trackLSBanners", [
        vm.bannerId,
        screenSlug,
        modalData.pageContext
      ]);
    };

    $scope.switchLoginTab = function(tabKey, mob) {
      Object.keys(vm.tabs).forEach(function(key) {
        vm.tabs[key] = false;
      });
      vm.tabs[tabKey] = true;
      vm.bannerUrl = banners[tabKey] ? banners[tabKey].url : "";
      vm.bannerId = banners[tabKey] ? banners[tabKey].id : "";
      screenSlug = vm.tabs.login ? "/auth/login" : "/auth/signup";
      $(document).trigger("trackLSBanners", [
        vm.bannerId,
        screenSlug,
        modalData.pageContext
      ]);
      $scope.preserved.mobileNumber = mob;
      $scope.$broadcast("mbUpdated");
    };

    $scope.redirect = function() {
      $(document).trigger("LoginRedirection");
      if (window.location.href != modalData.next) {
        var regex = new RegExp(
          "^(http[s]?:\\/\\/(www\\.)?|ftp:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?|(https?://)?(www.)?[a-z0-9-]+.(com|org|in|co|inc)(.[a-z]{2,3})?"
        );

        if (modalData.next == null || regex.test(modalData.next)) {
          window.location.href = "/";
        } else {
          window.location.href = modalData.next;
        }
      } else {
        window.location.reload();
      }
    };
    //Removing the code due to backend issue - comment the above code once things start working
    // $scope.redirect = function() {
    //     $(document).trigger('LoginRedirection')

    //     loginAndSignupService.getRequest("/mapi/v3.5.1/member/?_bb_client_type=web", {})
    //     .then(function(response) {
    //       if (response) {
    //         $scope.memberPhoneOtpData = response.data.response.member_details;
    //         if ($scope.memberPhoneOtpData.mobile_number) {
    //             $scope.close();
    //             if(window.location.href != modalData.next) {
    //                 var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");

    //                 if(modalData.next == null || regex.test(modalData.next)){
    //                     window.location.href = "/";
    //                 }else{
    //                     window.location.href = modalData.next;
    //                 }
    //             }
    //             else {
    //                 window.location.reload();
    //             };
    //         } else {
    //             $scope.showPhoneNumberModal = true;
    //         }
    //       }else{
    //         window.location.reload();
    //       }
    //     });
    // }

    vm.loginClicked = function($event) {
      data = $event.currentTarget.getAttribute("data-logininteraction");
      $(document).trigger("loginInteractions", [data]);
    };
    vm.loginPageShown = function($event, tab) {
      var screenSlug = "";
      if (tab === undefined) {
        screenSlug = vm.tabs.login ? "/auth/login" : "/auth/signup";
        $(document).trigger("LoginScreenView", [
          screenSlug,
          modalData.pageContext
        ]);
      } else {
        if (
          (tab == "signup" && vm.tabs.login) ||
          (tab == "login" && vm.tabs.signup)
        ) {
        //  vm.loginClicked($event);
          screenSlug = !vm.tabs.login ? "/auth/login" : "/auth/signup";
          $(document).trigger("LoginScreenView", [
            screenSlug,
            modalData.pageContext
          ]);
        }
      }
    };
    var init = function() {
      //console.log(modalData);
      vm.banners = {};
      if (modalData.tab) vm.switchTab(modalData.tab);
      else vm.switchTab("login");
      //call banner
      loginAndSignupService
        .getRequest("/auth/lsbanners/", {})
        .then(function(response) {
          if (response.data.login_banner) {
            vm.loginBannerImgUrl = mediaUrl + response.data.login_banner.img;
            banners.login = response.data.login_banner;
          }
          if (response.data.signup_banner) {
            vm.signupBannerImgUrl = mediaUrl + response.data.signup_banner.img;
            banners.signup = response.data.signup_banner;
          }

          vm.bannerUrl = banners[modalData.tab]
            ? banners[modalData.tab].url
            : "";
          vm.bannerId = banners[modalData.tab] ? banners[modalData.tab].id : "";
          screenSlug = vm.tabs.login ? "/auth/login" : "/auth/signup";
          $(document).trigger("trackLSBanners", [
            vm.bannerId,
            screenSlug,
            modalData.pageContext
          ]);
        });
    };
    init();
  }
]);

angular.module('app.layout').component('passwordStrength', {
    templateUrl: 'app/templates/innertemplates/password-strength.html',
    bindings: {
        password: '<',
        username: '<',
        onChange: '&'
    },
    controller: ['$scope', function($scope) {

        var vm = this;
        vm.message = ''
        vm.messageClass = "";
        vm.barClass = "";
        vm.barHeight = "1px"
        var oldRate = '';
        vm.$onChanges = function(changesObj) {
            if (changesObj.password == undefined) return;
            var rating = passwordRating(changesObj.password.currentValue || '', vm.username);
            vm.message = passwordRating.messages[rating.messageKey];
            vm.messageClass = "password-meter-message-" + rating.messageKey;
            vm.barClass = "password-meter-" + rating.messageKey;
            vm.barHeight=rating.rate==0?'1px':'2px';
            if (rating.rate !== oldRate) {
                vm.onChange({
                    valid: rating.rate
                });
                oldRate = rating.rate;
            }

        }
        var LOWER = /[a-z]/,
            UPPER = /[A-Z]/,
            DIGIT = /[0-9]/,
            DIGITS = /[0-9].*[0-9]/,
            SPECIAL = /[^a-zA-Z0-9]/,
            SAME = /^(.)\1+$/;

        var rating = function(rate, message) {
            return {
                rate: rate,
                messageKey: message
            };
        }

        var uncapitalize = function(str) {
            return str.substring(0, 1).toLowerCase() + str.substring(1);
        }

        var passwordRating = function(password, username) {
            if (password.length < 8)
                return rating(0, "too-short");
            if (password.length > 29)
                return rating(0, "too-long")
            if (password.match(/\s{1,}/))
                return rating(0, "spaces");
            if (username && password.toLowerCase().match(username.toLowerCase()))
                return rating(0, "similar-to-username");
            if (SAME.test(password))
                return rating(2, "weak");
            if (password.match(/^[a-zA-Z]*$/) || password.match(/^(\d)\1*$/))
                return rating(2, "weak");


            var lower = LOWER.test(password),
                upper = UPPER.test(password),
                digit = DIGIT.test(password),
                digits = DIGITS.test(password),
                special = SPECIAL.test(password);

            if (password.length > 12 && lower && upper && digit && special)
                return rating(4, "strong");
            return rating(3, "good");
        }

        passwordRating.messages = {
            "similar-to-username": "Too similar to username",
            "too-short": "Min 8 Characters",
            "very-weak": "Very weak",
            "weak": "Weak",
            "good": "Medium",
            "strong": "Strong",
            "too-long": "Password must be less than 30 characters",
            "spaces": "Spaces are not allowed. Please try again"

        }
    }],
    controllerAs: 'passwordCtrl'
});
angular.module("app.layout").component("pnv", {
  templateUrl: "app/templates/innertemplates/memberPhoneVerification.html",
  bindings: {
    // goBack: '<'
  },
  controller: [
    "$scope",
    "loginAndSignupService",
    function($scope, loginAndSignupService) {
      var vm = this;
      var parent = $scope.$parent;
      vm.manualEntry = {};

      $scope.phoneNumberFlow = true;
      $scope.otpCounter = "00";
      $scope.errorMessage = "";
      $scope.disablePhoneContinueButton = true;
      $scope.disableOtpContinueButton = true;
      $scope.disableOtpResendButton = true;
      $scope.disableOtpSubmitButton = true;

      //Mobile flow
      $scope.checkPhoneNumberLength = function() {
        if (vm.manualEntry) {
          if (vm.manualEntry.phone.length == 10) {
            $scope.disablePhoneContinueButton = false;
          } else {
            $scope.disablePhoneContinueButton = true;
          }
        } else {
          $scope.disablePhoneContinueButton = true;
        }
      };

      $scope.validateMemberPhone = function() {
        $scope.disablePhoneContinueButton = true;
        $scope.failedMessage = "";
        var postData = {
          first_name: parent.memberPhoneOtpData.first_name,
          last_name: parent.memberPhoneOtpData.last_name,
          date_of_birth: parent.memberPhoneOtpData.date_of_birth,
          email: parent.memberPhoneOtpData.email,
          mobile_number: vm.manualEntry.phone,
          telephone_number: parent.memberPhoneOtpData.telephone_number,
          city_id: $.cookie("_bb_cid"),
          newsletter_subscription:
            parent.memberPhoneOtpData.newsletter_subscription
        };
        loginAndSignupService
          .submitForm(
            { user_details: JSON.stringify(postData) },
            "/mapi/v3.5.1/member/?_bb_client_type=web",
            parent
          )
          .then(function(response) {
            if (response) {
              if (response.data.status == 181 || response.data.success) {
                $scope.phoneNumberFlow = false;
                $scope.startOtpCounter();
              } else {
                $scope.failedMessage = response.data.message;
              }
            }
          });
      };

      //Otp flow
      $scope.otpWaitTime;
      $scope.startOtpCounter = function() {
        $scope.disableOtpResendButton = true;
        var timeleft = 30;
        $scope.otpWaitTime = setInterval(function() {
          var displaytime = timeleft - 1;
          $scope.$apply(function() {
            $scope.otpCounter = displaytime;
          });
          timeleft -= 1;
          if (timeleft <= 0) {
            $scope.$apply(function() {
              $scope.disableOtpResendButton = false;
              clearInterval($scope.otpWaitTime);
            });
          }
        }, 1000);
      };

      if (!$scope.phoneNumberFlow) {
        $scope.startOtpCounter();
      }

      $scope.resendOtpNumber = function() {
        $scope.disableOtpResendButton = true;
        $scope.validateMemberPhone();
        $scope.errorMessage = "Resent OTP";
      };

      $scope.goBackToPhoneNumberFlow = function() {
        $scope.errorMessage = "";
        vm.manualEntry = {};
        $scope.disableOtpResendButton = true;
        $scope.phoneNumberFlow = true;
        clearInterval($scope.otpWaitTime);
      };

      $scope.checkOtpNumberLength = function() {
        if (vm.manualEntry) {
          if (vm.manualEntry.otp.length == 6) {
            $scope.disableOtpContinueButton = false;
          } else {
            $scope.disableOtpContinueButton = true;
          }
        } else {
          $scope.disableOtpContinueButton = true;
        }
      };

      $scope.validateMemberOtp = function() {
        $scope.errorMessage = "";
        $scope.disableOtpContinueButton = true;
        var postData = {
          first_name: parent.memberPhoneOtpData.first_name,
          last_name: parent.memberPhoneOtpData.last_name,
          date_of_birth: parent.memberPhoneOtpData.date_of_birth,
          email: parent.memberPhoneOtpData.email,
          mobile_number: vm.manualEntry.phone,
          telephone_number: parent.memberPhoneOtpData.telephone_number,
          city_id: $.cookie("_bb_cid"),
          newsletter_subscription:
            parent.memberPhoneOtpData.newsletter_subscription,
          otp: vm.manualEntry.otp
        };
        loginAndSignupService
          .submitForm(
            { user_details: JSON.stringify(postData) },
            "/mapi/v3.5.1/member/?_bb_client_type=web",
            parent
          )
          .then(function(response) {
            if (response) {
              if (response.data.message) {
                if (response.data.status == 0) {
                  parent.redirect();
                } else {
                  $scope.errorMessage = "Invalid OTP";
                }
              }
            }
          });
      };
    }
  ]
});

angular.module("app.layout").component("signup", {
  templateUrl: "app/templates/innertemplates/signup.html",
  controller: [
    "$scope",
    "$window",
    "loginAndSignupService",
    "$timeout",
    signupController
  ],
  controllerAs: "signup"
});

function signupController($scope, $window, loginAndSignupService, $timeout) {
  var vm = this;
  var parent = $scope.$parent.$parent;
  var loginModal = angular.element(document.querySelector(".signup-modal"));
  vm.showCaptcha = false;
  vm.captcha_url = parent.loadSignupCaptcha ? "" : parent.captcha_url;
  vm.captcha_0 = parent.loadSignupCaptcha ? "" : parent.captcha_0;
  vm.showSignupForm = true;
  vm.showSocialVerify = false;
  vm.almostThere = false;
  vm.captcha_public_key = CAPTCHA_PUBLIC_KEY;
  vm.passwordInputType = "password";
  vm.showHidePasswordClass = "view";
  vm.bbLoader = false;
  vm.socialUser = {};
  vm.timer = 0;
  vm.time = {};
  vm.seconds = 30;
  vm.showResend = false;
  vm.isEditIdentifier = false;
  vm.identifier = "";
  vm.signupMethod = "normal";
  vm.socialToken = "";
  if (window.mobileNumber) {
    vm.mobile = window.mobileNumber;
  }
  vm.hideShowPassword = function() {
    vm.passwordInputType =
      vm.passwordInputType === "password" ? "text" : "password";
    vm.showHidePasswordClass =
      vm.showHidePasswordClass === "view" ? "hide" : "view";
  };
  vm.member_referral_active = MEMBER_REFERAL_ACTIVE === "True";
  vm.back = function() {
    vm.showSignupForm = true;
    vm.showLoginWithOTPForm = false;
    vm.showSocialVerify = false;
    parent.showNavTabs = true;
    vm.ToggleTimer(false);
  };
  if (!vm.captcha_public_key) {
    vm.showCaptcha = true;
  }

  vm.toggleEditIdentifier = function() {
    vm.ToggleTimer(false);
    setTimeout(function() {
      $( "#mobileEmail" ).focus();
  },100)
    vm.resetServerMessages();
    //Snowplow = Mobile change / edit scenario
    var data = JSON.stringify({
      EventName: "Mobile_Change",
      EventSubGroup: "signup",
      Action: "change"
    });
    $(document).trigger("loginInteractions", [data]);
    vm.isEditIdentifier = true;
    vm.showResend = false;
    // $scope.$digest();
  };

  vm.changeIdentifier = function() {
    //Snowplow = Mobile submit / done scenario
    var data = JSON.stringify({
      EventName: "Mobile_Change",
      EventSubGroup: "signup",
      Action: "submit"
    });
    $(document).trigger("loginInteractions", [data]);
    vm.isEditIdentifier = false;
    vm.showResend = true;
    vm.resendOTP();
    vm.loginWithOTP.OTP = "";
    vm.resetServerMessages();
  };

  vm.reset_captcha = function() {
    loginAndSignupService.get_captcha_url().then(function(response) {
      vm.captcha_url = response.data.captcha_url;
      parent.captcha_url = vm.captcha_url;
      vm.captcha_0 = response.data.captcha_challenge;
      parent.captcha_0 = vm.captcha_0;
      vm.captcha_1 = "";
    });
  };
  vm.showSocialSignupForm = function(signupType) {
    vm.isfbSignup = signupType === "fb" ? true : false;
    vm.referralSocialErrorMsg = "";
    vm.doSocialRedirect();

    //**** Disabling Referral screen on social signup ****
    // if (!vm.member_referral_active) {
    //     vm.redirectToSocialService(false);
    // } else {
    //     parent.showNavTabs = false;
    //     vm.showSignupForm = false;
    // }
  };
  vm.doSocialRedirect = function() {
    if (vm.isfbSignup) {
      loginAndSignupService.fb_login("reg", vm.referralCodeSocial);
    } else {
      loginAndSignupService.gplus_login("reg", vm.referralCodeSocial);
    }
  };
  vm.redirectToSocialService = function(validateReferralCode) {
    if (validateReferralCode) {
      vm.referralSocialErrorMsg = "";
      var input = {
        ref_code: vm.referralCodeSocial
      };
      loginAndSignupService
        .getRequest("/auth/valid-referral-code/", input, parent)
        .then(function(response) {
          if (response.data.valid) {
            vm.doSocialRedirect();
          } else {
            vm.referralSocialErrorMsg = "Invalid referral code";
          }
        });
    } else {
      vm.doSocialRedirect();
    }
  };
  //prevent captcha reload on switch between login and signup tabs
  if (parent.loadSignupCaptcha) {
    vm.reset_captcha();
    parent.loadSignupCaptcha = false;
  }
  vm.reset_form = function() {
    vm.reset_captcha();
    $scope.signupForm.$setPristine();
    $scope.signupForm.$setUntouched();
  };
  vm.show_server_error = function(err_response) {
    Object.keys(err_response).forEach(function(key) {
      if (key in vm.error_messages) {
        vm.error_messages[key] = err_response[key][0];
      }
    });
  };
  vm.resetServerMessages = function() {
    vm.error_messages = {
      mobile: "",
      update: ""
    };
    vm.loginWithOTP.otpError = "";
    vm.loginWithOTP.otpServerError = "";
  };

  vm.resendOTP = function() {
    vm.showResend = false;
    vm.ToggleTimer(false);
    vm.resetServerMessages();
    var input = {
      identifier: vm.mobile
    };
    //Snowplow = Resend otp scenario
    var data = JSON.stringify({
      EventName: "Resend_OTP",
      EventSubGroup: "signup",
      Action: "mobile"
    });
    $(document).trigger("loginInteractions", [data]);

    vm.resetServerMessages();
    vm.bbLoader = true;
    loginAndSignupService
      .postHulk("/mapi/v4.0.0/member-svc/otp/send/", input, parent)
      .then(function(response) {
        vm.bbLoader = false;
        vm.otpResendMessage = response.message;
        document.querySelector("#otp").focus();
        $timeout(function() {
          vm.otpResendMessage = "";
          $scope.$digest();
        }, 6000);
        vm.ToggleTimer(true);
      })
      .catch(function(err) {
        vm.bbLoader = false;
        vm.showResend=false;
        vm.otpResendMessage = "Somethings went wrong,Plaese try again";
        $timeout(function() {
          vm.otpResendMessage = "";
        }, 3000);
        var data = JSON.stringify({
          EventName: "Resend_OTP_Failed",
          EventSubGroup: "signup",
          Action: "mobile",
          FailureReason: err
        });
        $(document).trigger("loginInteractions", [data]);
      });
  };
  var aThirySecondTimer = {};
  vm.ToggleTimer = function(toggle) {
    //OTP thiry second timer.
    var thirtySeconds = 30;
    function validityOfOTPTimer() {
      if (thirtySeconds < 0) {
        clearInterval(aThirySecondTimer);
        vm.showResend = true;
        $scope.$digest();
      }
    }
    // var aThirySecondTimer = {};
    if (toggle && document.getElementById("timeLeftInSeconds") != "null") {
      aThirySecondTimer = setInterval(function() {
        if (thirtySeconds < 10) {
          thirtySeconds = "0" + thirtySeconds;
        }
        document.getElementById("timeLeftInSeconds").innerHTML =
          "00:" + thirtySeconds;
        thirtySeconds = thirtySeconds - 1;
        validityOfOTPTimer();
      }, 1000);
    } else {
      clearInterval(aThirySecondTimer);
      vm.showResend = false;
    }
  };

  // New Signup with OTP
  vm.signupWithOTPLinkClicked = function($event, valid) {
    // $event.preventDefault();
    if (valid) {
      // vm.loginInteraction($event);
      //resetting server errors
      // vm.resetServerMessages();
      initLoginWithOTPForm(vm.mobile);
    } else {
      vm.login.showEmailError = true;
      shake();
    }
  };
  vm.loginWithOTP = {};

  var initLoginWithOTPForm = function(mobile) {
    vm.ToggleTimer(false);
    $(document).trigger("authScreenViews", [
      {
        EventName: "Mobile_OTP_Verification_Shown",
        ScreenType: "Mobile_OTP_verification",
        ScreenURL: window.location.origin + "/Signup/Mobile_OTP_Verification/",
        ScreenSlug: "/Signup/Mobile_OTP_Verification/",
        ReferrerURL: window.location.origin + "/signup/",
        ReferrerSlug: "/signup/",
        ReferrerType: "signup"
      }
    ]);
    vm.loginWithOTP.sendOTP = function() {
      vm.showResend = false;
      vm.resetServerMessages();
      var otpRequestInput = {
        identifier: mobile
      };
      // get request for sending the OTP
      vm.bbLoader = true;

      loginAndSignupService
        .postHulk("/mapi/v4.0.0/member-svc/otp/send/", otpRequestInput, parent)
        .then(function(response) {
          vm.bbLoader = false;
          if (response.success) {
            if (response.error_code) {
              vm.loginWithOTP.otpError = response.message;
            } else {
              vm.loginWithOTP.OTP = "";
              vm.loginWithOTPForm.$setUntouched();
              vm.loginWithOTPForm.$setPristine();
              vm.otpResendMessage = "OTP sent successfully";
              document.querySelector("#otp").focus();
              $timeout(function() {
                vm.otpResendMessage = "";
                // vm.showResend = true;
                $scope.$digest();
              }, 6000);
              vm.ToggleTimer(true);
            }
          } else {
            //otp failure
            if (response) {
              console.log(JSON.stringify(response));
            }
          }
        })
        .catch(function(err) {
          vm.bbLoader = false;
          vm.showResend=false;
          vm.otpResendMessage = "Somethings went wrong,Please try again";
          var data = JSON.stringify({
            EventName: "Resend_OTP_Failed",
            EventSubGroup: "signup",
            Action: "mobile",
            FailureReason: err
          });
          $(document).trigger("loginInteractions", [data]);
          $timeout(function() {
            vm.otpResendMessage = "";
          }, 3000);
        });
    };
    vm.isEditIdentifier = false;
    vm.showLoginWithOTPForm = true;
    vm.showBusinessLogin = false;
    vm.showSignupForm = false;
    vm.showSocialVerify = false;
    vm.loginWithOTP.OTP = "";
    vm.loginWithOTP.otpError = "";
    parent.showNavTabs = false;
    $timeout(function() {
      vm.loginWithOTPForm.$setUntouched();
      vm.loginWithOTPForm.$setPristine();
      vm.loginWithOTP.sendOTP();
    }, 0);
  };

  vm.verifyOtp = function(valid, identifier) {
    if (valid) {
      initLoginWithOTPForm(identifier);
    }
  };

  vm.loginWithOTP.submit = function(e, valid) {
    vm.ToggleTimer(false)
    e.preventDefault();
    if (valid) {
      var input = {
        mobile_no: vm.mobile,
        mobile_no_otp: vm.loginWithOTP.OTP
      };
      var eventAction = "mobile";
      if ((vm.signupMethod == "social" && vm.socialUser !== undefined)) {
        if (vm.socialUser && vm.socialUser.provider === "facebook") {
          input.fb_token = vm.socialToken;
          eventAction = "facebook";
        } else {
          input.google_token = vm.socialToken;
          eventAction = "google";
        }
      }
      vm.resetServerMessages();
      vm.loginWithOTP.otpError = "";
      vm.bbLoader = true;
      loginAndSignupService
        .postHulk("/mapi/v4.0.0/member-svc/signup/", input, parent)
        .then(function(response) {
          vm.bbLoader = false;
          if (response.success) {
            if (!response.error_code) {
              var data = JSON.stringify({
                EventName: "SignUp_Success",
                EventSubGroup: "signup",
                Action: eventAction
              });
              $(document).trigger("loginInteractions", [data]);
              vm.ToggleTimer(false);
              vm.showLoginWithOTPForm = false;
              if (vm.socialUser !== undefined) {
                if (vm.socialUser.provider === "facebook") {
                  vm.fname = vm.socialUser.first_name;
                  vm.lname = vm.socialUser.last_name;
                  vm.email = vm.socialUser.email;
                } else {
                  vm.fname = vm.socialUser.user && vm.socialUser.user.firstName;
                  vm.lname = vm.socialUser.user && vm.socialUser.user.lastName;
                  vm.email = vm.socialUser.user && vm.socialUser.user.email;
                }
              }
              parent.showNavTabs = false;
              vm.almostThere = true;
              window.loginScreen = "almostThere";
              $(document).trigger("authScreenViews", [
                {
                  EventName: "Signup_details_screen_Shown",
                  ScreenType: "Signup_details_screen",
                  ScreenURL:
                    window.location.origin + "/signup/Signup_details_screen/",
                  ScreenSlug: "/Signup_details_screen/",
                  ReferrerURL:
                    window.location.origin + "/Signup/Mobile_OTP_verification/",
                  ReferrerSlug: "/Mobile_OTP_verification/",
                  ReferrerType: "Mobile_OTP_verification"
                }
              ]);
              $scope.$digest();
              return;
            } else {
              //error come from the server
              if (response.error_code === "HU4000") {
                parent.showNavTabs = false;
                vm.showSignupForm = false;
                vm.showSocialVerify = true;
              } else if (response.error_code !== "HU4000") {
                  vm.loginWithOTP.otpServerError = response.message;
                vm.loginWithOTP.errorCode = response.error_code;
                var data = JSON.stringify({
                  EventName: "SignUp_Failed",
                  EventSubGroup: "signup",
                  Action:
                    response.error_code === "HU4006" ? "Mobile" : eventAction,
                  FailureReason: response.message
                });
                $(document).trigger("loginInteractions", [data]);
                $scope.$digest();
              }
            }
          } else {
            if (response.show_message) {
              vm.loginWithOTP.otpError = response.data.message;
            }
            vm.error_messages["mobile"] = response.message;
            vm.loginWithOTPForm.$setUntouched();
            vm.loginWithOTPForm.$setPristine();

            //Snowplow = Sign up failed via mobile otp scenario
            var data = JSON.stringify({
              EventName: "SignUp_Failed",
              EventSubGroup: "signup",
              Action: eventAction,
              FailureReason: "Something went wrong"
            });
            $(document).trigger("loginInteractions", [data]);
            shake();
          }
        }).catch(function(err) {
          vm.bbLoader = false;
          vm.loginWithOTP.otpServerError ="Something went wrong , Please try again";
        });;
    }
  };

  $scope.$on("mbUpdated", function(event) {
    vm.mobile = parent.preserved.mobileNumber
      ? parent.preserved.mobileNumber
      : "";
  });

  vm.loginRedirect = function(tab) {
    window.mobileNumber = vm.mobile;
    if (tab === "signup") {
      vm.showLoginWithOTPForm = false;
      parent.switchLoginTab("signup", vm.mobile);
      parent.showNavTabs = true;
    } else {
      vm.showLoginWithOTPForm = false;
      parent.switchLoginTab("login", vm.mobile);
      parent.showNavTabs = true;
      parent.preservedMobileNumber = vm.mobile;
    }
  };

  vm.signupSubmit = function(e, validForm) {
    vm.ToggleTimer(false);
    e.preventDefault();
    if (vm.fname || vm.lname || vm.email) {
      var signupInput = {
        first_name: vm.fname,
        last_name: vm.lname,
        email: vm.email
      };
      //re-initialize server error messages before every submit
      vm.error_messages = {
        email: ""
      };
      vm.bbLoader = true;
      loginAndSignupService
        .postHulk("/mapi/v4.0.0/member-svc/update/", signupInput, parent)
        .then(function(response) {
          vm.bbLoader = false;
          if (response.success) {
            if (!response.error_code) {
              //$window.location.pathname = response.data.redirect_url;
              if (localStorage.getItem("nexUrl")) {
                window.location.href =
                  window.location.origin + localStorage.getItem("nexUrl");
                localStorage.setItem("nexUrl", "");
                return;
              } else {
                window.location.href = "/";
              }
              parent.redirect();
              parent.close(); //Removing the code due to backend issue - comment this out
            } else {
              vm.error_messages["update"] = response.message;
              angular
                .element(document.querySelector("#email"))
                .addClass("ng-invalid");
              $scope.$digest();
              //Snowplow = Add Email Failed scenario
              var data = JSON.stringify({
                EventName: "AddEmail_Failed",
                EventSubGroup: "signup",
                Action: "email",
                FailureReason: response.message
              });
              $(document).trigger("loginInteractions", [data]);
            }
          }
          //else handle form errors
          else {
            vm.reset_form();
            vm.show_server_error(response.data);
            loginModal.addClass("shake");
            $timeout(function() {
              loginModal.removeClass("shake");
            }, 500);

            //Snowplow = SignUp failed via mobile otp scenario
            var data = JSON.stringify({
              EventName: "SignUp_Failed",
              EventSubGroup: "signup",
              Action: "mobile",
              FailureReason: response.message
            });
            $(document).trigger("loginInteractions", [data]);
          }
        }).catch(function(err) {
          vm.bbLoader = false;
          vm.error_messages["update"] ="Something went wrong , Please try again";
        });
    } else {
      if (localStorage.getItem("nexUrl")) {
        window.location.href =
          window.location.origin + localStorage.getItem("nexUrl");
        localStorage.setItem("nexUrl", "");
        return;
      } else {
        window.location.href = "/";
      }
    }
  };
  vm.validateOldCaptcha = function(validForm) {
    if (vm.captcha_0 && vm.captcha_1) {
      vm.signupSubmit(validForm, true);
    }
  };
  vm.signup = function(validForm) {
    //vm.bbLoader = true;
    //Recaptcha
    if (vm.captcha_public_key) {
      grecaptcha.ready(function() {
        grecaptcha
          .execute(CAPTCHA_PUBLIC_KEY, { action: "signup" })
          .then(function(token) {
            fetch("/post_recaptcha/", {
              method: "post",
              headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": $.cookie("csrftoken"),
                "X-Requested-With": "XMLHttpRequest"
              },
              credentials: "include",
              body: JSON.stringify({ token: token, action: "signup" })
            })
              .then(function(response) {
                // vm.bbLoader = false;
                if (response.ok) {
                  return response.json();
                } else {
                  vm.showCaptcha = true;
                  $scope.$digest();
                  vm.validateOldCaptcha(validForm, true);
                }
              })
              .then(function(response) {
                //vm.bbLoader = false;
                if (!(response.status === "200")) {
                  vm.showCaptcha = true;
                  $scope.$digest();
                  vm.validateOldCaptcha(validForm, true);
                } else {
                  vm.showCaptcha = false;
                  vm.signupSubmit(validForm, false);
                }
              });
          });
      });
    } else {
      //vm.bbLoader = false;
      vm.showCaptcha = true;
      $scope.$digest();
      vm.validateOldCaptcha(validForm, true);
    }
    //Recaptcha
  };

  var addScript = function(id, src) {
    return new Promise(function(resolve, reject) {
      var element = document.getElementById(id);

      if (element) {
        return;
      }

      var script = document.createElement("script");
      script.setAttribute("type", "text/javascript");
      script.setAttribute("id", id);
      script.setAttribute("src", src);
      script.addEventListener("load", resolve);
      script.addEventListener("error", function() {
        return reject(new Error("Error loading ".concat(id, ".")));
      });
      script.addEventListener("abort", function() {
        return reject(new Error("".concat(id, "  loading aborted.")));
      });
      document.getElementsByTagName("head")[0].appendChild(script);
    });
  };

  var addGoogleScript = function() {
    var id = "googleAuth";
    var src = "//apis.google.com/js/client:platform.js";
    return addScript(id, src);
  };

  vm.initGoogle = function() {
    try {
      addGoogleScript();
      var params = {
        client_id:
          "610100195438-jbg7jnikaqbn0rsiicbf72s45t55dvt1.apps.googleusercontent.com", // prod
          // "968245319944-jhqhki8h8m9psqe9m9bampi7gm0r4cqe.apps.googleusercontent.com", //non-prod
        scope: "profile email"
      };
      window.gapi.load("auth2", function() {
        if (!window.gapi.auth2.getAuthInstance()) {
          window.gapi.auth2.init(params);
        }
      });
    } catch (error) {
      console.log(error.name, ":", error.message);
    }
  };

  var onFailure = function(data) {
    console.log("==== google onError ====");
    console.log(data);
  };

  vm.googleSignup = function() {
    if(!window.gapi || !window.gapi.auth2) return;
    var auth2 = window.gapi.auth2.getAuthInstance();
    vm.bbLoader = true;
    //Snowplow = Social signup clicked via google
    var data = JSON.stringify({
      EventName: "Social_Clicked",
      EventSubGroup: "signup",
      Action: "google"
    });
    $(document).trigger("loginInteractions", [data]);

    // if (loading) {
    //   return;
    // }
    auth2.signIn().then(
      function(res) {
        // If authorization pass well, we take profile info
        var basicProfile = res.getBasicProfile();
        var data = {};
        data.identity = {
          uid: basicProfile.getId(),
          provider: "google"
        };
        data.user = {
          email: basicProfile.getEmail(),
          firstName: basicProfile.getGivenName(),
          lastName: basicProfile.getFamilyName()
        };
        data.auth = res.getAuthResponse();
        // Send data to back end
        onSuccess(data);
      },
      function(err) {
        window.location.href = "/";
        vm.bbLoader = false;
        return onFailure(err);
      }
    );
  };

  var addFacebookScript = function() {
    var id = "facebookAuth";
    var src = "http://connect.facebook.net/en_US/sdk.js";
    return addScript(id, src);
  };

  function fetchFbData() {
    return new Promise(function(resolve, rej) {
      console.log("Welcome!  Fetching your information.... ");
      window.FB.api(
        "/me",
        { fields: "name,email,first_name,last_name" },
        function(response) {
          response.provider = "facebook";
          vm.socialUser = response;
          resolve(response);
        }
      );
    });
  }

  vm.initFacebook = function() {
    try {
      addFacebookScript();
      var params = {
        appId: "1397993430473589",
        cookie: true,
        xfbml: true,
        version: "v5.0"
      };
      window.FB.init(params);
      window.FB.getLoginStatus(function(resp) {
        console.log("FB:status:", resp.status);
      }, true);
    } catch (error) {
      console.log(error.name, ":", error.message);
    }
  };

  vm.initGoogle = function() {
    try {
      addGoogleScript();
      var params = {
        client_id:
          "610100195438-jbg7jnikaqbn0rsiicbf72s45t55dvt1.apps.googleusercontent.com",
        scope: "profile email"
      };
      window.gapi.load("auth2", function() {
        if (!window.gapi.auth2.getAuthInstance()) {
          window.gapi.auth2.init(params);
        }
      });
    } catch (error) {
      console.log(error.name, ":", error.message);
    }
  };
  vm.initFacebook();
  vm.initGoogle();

  vm.facebookSignup = function() {
    //Snowplow = Social signup clicked via facebook
    vm.bbLoader = true;
    var data = JSON.stringify({
      EventName: "Social_Clicked",
      EventSubGroup: "signup",
      Action: "facebook"
    });
    $(document).trigger("loginInteractions", [data]);

    // if (loading) {
    //   return;
    // }
    window.FB.getLoginStatus(function(resp) {
      console.log("FB:status:", resp.status);
      var params = {
        provider: "facebook"
      };

      if (resp.status === "connected") {
        params.uid = resp.authResponse.accessToken;
        // Send data to back end
        fetchFbData().then(function(res) {
          onSuccess(params);
        });
        return;
      }
      FB.login(
        function(response) {
          console.log("FB:status:", response.status);
          if (response.authResponse) {
            params.uid = response.authResponse.accessToken;
            // if (vm.socialUser === undefined) {
            fetchFbData().then(function(res) {
              onSuccess(params);
            });
            // }
          }
          else{
            window.location.href = "/";
        }
        },
        { scope: "public_profile,email", return_scopes: true }
      );
    });
  };

  function verifySocialUser(input) {
    return new Promise(function(resolve, rej) {
      console.log("Verifying Social User.... ");
      loginAndSignupService
        .postHulk(
          "/mapi/v4.0.0/member-svc/social_signup/email/verify/",
          input,
          parent
        )
        .then(function(response) {
          vm.bbLoader = false;
          if (response.success) {
            resolve(response);
          } else {
            return;
          }
        })
    });
  }

  var onSuccess = function(data) {
    var verifySocialInput = {};
    var eventAction = "";
    if (data.provider && data.provider === "facebook") {
      verifySocialInput.fb_token = data.uid;
      eventAction = "facebook";
    } else {
      verifySocialInput.google_token = data.auth.id_token;
      eventAction = "google";
    }
    var input = {};
    if (data && data.provider === "facebook") {
      vm.socialToken = data.uid;
      input.fb_token = data.uid;
      input.email = vm.socialUser.email;
    } else {
      vm.socialToken = data.auth.id_token;
      input.google_token = data.auth.id_token;
      input.email = data.user.email;
      vm.socialUser = data;
    }
    verifySocialUser(verifySocialInput).then(function(res) {
      if (res.success && !res.error_code) {
                  vm.bbLoader = false;
                  vm.signupMethod = "social";
                  parent.showNavTabs = false;
                  vm.showSignupForm = false;
                  vm.showSocialVerify = true;
                  $scope.$apply(function() {
                    $scope.$digest();
                  });
      } 
      else{
        vm.loginWithOTP.otpServerError = res.message;	
        $scope.$digest();
      }
    });
  };

  vm.checkPassword = function(valid) {
    vm.isPasswordValid = valid > 0 ? true : false;
  };
  vm.donotAllowSpecialChars = function(e) {
    if (e.key.search(/^[a-zA-Z0-9\s]+$/) == -1) e.preventDefault();
  };
}

angular.module("app.layout").component("myOrder", {
  templateUrl: "app/templates/innertemplates/myOrder.html",
  bindings: {
    order: "<",
    index: "<",
    showDropdown: "<",
    toggleDropDown: "&"
  },
  controllerAs: "vm",
  controller: [
    "$scope",
    "$timeout",
    function ($scope, $timeout) {
      var vm = this;
      vm.voucher = false;
      var po_id = "";
      var action_links = {
        pay_now: "/payment/pay_now/",
        add_on_order: "",
        change_slot: "/member/self-service/change-delivery-slot/",
        cancel_order: "/member/self-service/cancel-order/",
        apply_voucher: "/co/forgot-voucher/"
      };
      var action_snowplow_event_names = {
        pay_now: "PayNow_Clicked",
        add_on_order: "AddonOrder_Clicked",
        change_slot: "ChangeSlot_Clicked",
        cancel_order: "CancelOrder_Clicked",
        apply_voucher: "ApplyVoucher_Clicked"
      };
      vm.$onInit = function () {
        //console.log(vm.order);
        vm.active = vm.order.order_state == 0 ? true : false;
        vm.isExpress = vm.order.is_express;
        po_id = vm.order.p_order_id;
        vm.cancelledOrder = vm.order.order_state == 2 ? true : false;
        action_links.apply_voucher += vm.order.p_order_id + '/';
        vm.showSavings = Number(vm.order.total_savings) > 0 ? true : false;
      };
      vm.closeAddonModal = function () {
        vm.showAddOnModal = !vm.showAddOnModal;
        $(document).trigger('AddonOrderClosed', [{}]);
      }
      // vm.toggleDropDown = function() {
      //   vm.showDropdown = !vm.showDropdown;
      // };
      vm.getSlotClass = function () {
        if (vm.cancelledOrder) return "strike";
        else return "";
      };
      vm.getWidgetClass = function () {
        if (vm.active) return "bg-eee " + vm.showDropdown ? "" : "dim";
        else return "bg-dbdbdb";
      };
      vm.actionClick = function (action, order) {
        if (action.type == "add_on_order") {
          vm.showAddOnModal = true;
          vm.slotDate = new window.Date(vm.order.slot_info.date);
        } else {
          window.location.href = action_links[action.type] + '?nc=oadtls_page';
        }
        if (order) {
          $(document).trigger('selfServiceInteractionPlower', [{
            'EventName': action_snowplow_event_names[action.type],
            'UserFlow': 'oadtls_page',
            'OrderId': order.order_id,
            'OrderNumber': order.order_number,
            'AdditionalInfo2': order.order_status
          }, true]);
          if (action.type == "add_on_order") {
            $(document).trigger('AddonOrderScreenView', [{
              'EventName': 'FlatPages_Shown',
              'ScreenType': 'flat',
              'ScreenURL': window.location.origin + '/' + 'order/slot_close_time_page/?nc=oadtls_page',
              'ScreenSlug': '/order/slot_close_time_page/',
              'PageTemplate': 'default',
              'AdditionalInfo2': order.order_status
            }]);
          }
        }
      };
    }
  ]
});

dataLayer = null;
angular.module('app.layout').component('myOrderList', {
    templateUrl: 'app/templates/innertemplates/myOrderList.html',
    bindings: {},
    controllerAs: 'vm',
    controller: ['$scope', '$http', '$timeout', '$q', 'toastr', function ($scope, $http, $timeout, $q, toastr) {
        var vm = this;
        vm.page = 1
        vm.totalPages = 1;
        vm.showViewMore = false;
        vm.activeOrders = [];
        vm.pastOrders = [];
        vm.currentExpandedOrder = undefined;
        vm.activeOrderResponse = false;
        vm.pastOrderResponse = false;
        vm.jusPayFlow = false

        //Order Listing Flow
        vm.poList = [];
        vm.currentPoId = undefined;
        vm.voList = [];
        vm.showVoModal = false;
        vm.selectedVoCode = undefined;
        vm.voucherError = undefined;

        ///////////////////////////////////////////////////////////////////
        ///////////////// New Order Listing Logic ////////////////////////
        ///////////////////////////////////////////////////////////////////

        //Page Loader
        vm.pageLoader = function (status) {
            vm.showPageLoader = status;
        }

        //Component OnInit
        vm.$onInit = function () {
            // vm.pageLoader(true);

            $http.get('/mapi/v3.5.0/order/order-assistant/?&page=1&type=active&&_bb_client_type=web&version=2')
                .then(function (response) {
                    var responseData = response.data.response || [];

                    for (var props in responseData.orders) {
                        if (responseData.orders[props].can_pay) {
                            vm.poList.push(responseData.orders[props].p_order_id);
                            responseData.orders[props].isChecked = true;
                        }
                    }

                    var activeOrderCount = responseData.total_active_orders
                    vm.orderList = responseData.orders
                    vm.activeOrders = vm.orderList;
                    vm.activeOrderResponse = true;
                    vm.triggerScreenView();
                    if (activeOrderCount > 0) {
                        vm.activeOrders[0].showDropdown = true;
                    }
                })
                .catch(function (err) {
                    // vm.pageLoader(false);
                    console.error(err);
                })

            $http.get('/mapi/v3.5.0/order/order-assistant/?&page=1&type=past&&_bb_client_type=web&version=2')
                .then(function (response) {
                    // vm.pageLoader(false);
                    vm.page++;
                    var responseData = response.data.response;
                    vm.pastOrders = responseData.orders;
                    vm.totalPages = Number(responseData.total_pages);
                    vm.pastOrderResponse = true;
                    vm.triggerScreenView();
                    if (vm.totalPages > 1) {
                        vm.showViewMore = true;
                    }
                })
                .catch(function (err) {
                    // vm.pageLoader(false);
                    console.error(err);
                })
        }

        vm.triggerScreenView = function () {
            if (vm.activeOrderResponse && vm.pastOrderResponse) {
                var ScreenTypeId = "";
                var AdditionalInfo2 = "";
                if (vm.activeOrders && vm.activeOrders.length > 0) {
                    ScreenTypeId = vm.activeOrders[0].order_id;
                    AdditionalInfo2 = vm.activeOrders[0].order_status;
                    vm.currentExpandedOrder = vm.activeOrders[0];
                }
                else if (vm.pastOrders && vm.pastOrders.length > 0) {
                    ScreenTypeId = vm.pastOrders[0].order_id;
                    AdditionalInfo2 = vm.pastOrders[0].order_status;
                    vm.currentExpandedOrder = vm.pastOrders[0];
                }
                screenViewValue = JSON.parse($($("[data-scrv]")[$("[data-scrv]").length - 1]).val());
                screenViewValue.ScreenTypeID = ScreenTypeId;
                screenViewValue.AdditionalInfo2 = AdditionalInfo2;
                screenViewValue.skipScreenView = "false";
                $($("[data-scrv]")[$("[data-scrv]").length - 1]).val(JSON.stringify(screenViewValue));
                $(document).trigger('OADetailsShown', [{}]);
                //trigger order expanded for default expanded order
                if (vm.activeOrders && vm.activeOrders.length > 0) {
                    $(document).trigger('selfServiceInteractionPlower', [{
                        'EventName': 'OrderExpanded',
                        'UserFlow': 'oadtls_page',
                        'OrderId': vm.currentExpandedOrder.order_id,
                        'OrderNumber': vm.currentExpandedOrder.order_number,
                        'AdditionalInfo2': vm.currentExpandedOrder.order_status
                    }]);
                }
            }
        }

        vm.toggleDropDown = function (order) {
            var showDropdown = order.showDropdown
            if (vm.activeOrders) {
                vm.activeOrders.forEach(function (order) { order.showDropdown = false });
            }
            if (vm.pastOrders) {
                vm.pastOrders.forEach(function (order) { order.showDropdown = false });
            }
            order.showDropdown = !showDropdown;
            if (order.showDropdown) {
                vm.currentExpandedOrder = order;
                screenViewValue = JSON.parse($($("[data-scrv]")[$("[data-scrv]").length - 1]).val());
                screenViewValue.ScreenTypeID = order.order_id;
                $($("[data-scrv]")[$("[data-scrv]").length - 1]).val(JSON.stringify(screenViewValue));
                $(document).trigger('selfServiceInteractionPlower', [{
                    'EventName': 'OrderExpanded',
                    'UserFlow': 'oadtls_page',
                    'OrderId': vm.currentExpandedOrder.order_id,
                    'OrderNumber': vm.currentExpandedOrder.order_number,
                    'AdditionalInfo2': vm.currentExpandedOrder.order_status
                }]);
            }
        }

        vm.viewmore = function () {
            $http.get('/mapi/v3.5.0/order/order-assistant/?&page=' + vm.page + '&type=past&&_bb_client_type=web&version=2').then(function (response) {
                vm.page++;
                var responseData = response.data.response;
                var orderList = responseData.orders;
                vm.pastOrders = vm.pastOrders.concat(orderList);
                if (vm.totalPages < vm.page) {
                    vm.showViewMore = false;
                }
            })
        }

        vm.helpClicked = function () {
            if (vm.currentExpandedOrder) {
                $(document).trigger('selfServiceInteractionPlower', [{
                    'EventName': 'Help_Clicked',
                    'UserFlow': 'oadtls_page',
                    'OrderId': vm.currentExpandedOrder.order_id,
                    'OrderNumber': vm.currentExpandedOrder.order_number,
                    'AdditionalInfo2': vm.currentExpandedOrder.order_status
                }, true]);
            }
            else {
                $(document).trigger('selfServiceInteractionPlower', [{
                    'EventName': 'Help_Clicked',
                    'UserFlow': 'oadtls_page',
                    'OrderId': -1,
                    'OrderNumber': '-1',
                    //'AdditionalInfo2': vm.vm.pastOrders[0].order_status
                }, true]);
            }
        }

        //Handle Radio button change
        vm.handleRadioChange = function (order) {

            for (var prop in vm.activeOrders) {
                if (vm.activeOrders[prop].p_order_id == order.p_order_id) {
                    vm.activeOrders[prop].isChecked = !vm.activeOrders[prop].isChecked;
                }
            }

            var index = vm.poList.indexOf(order.p_order_id);
            if (index > -1) {
                vm.poList.splice(index, 1);
                console.log(vm.poList);
            } else {
                vm.poList.push(order.p_order_id);
                console.log(vm.poList);
            }

        }

        //Handle Save SDK Payload
        vm.handleSdkSave = function (data) {
            localStorage.setItem('sdkPayload', JSON.stringify(data));
        }

        //Handle routing
        vm.handleRouteChange = function (action) {
            var nxtParams = {
                order_ids: vm.getActiveOrderIds(action.payload),
                txn_type: action.txn_type,
                p_order_id: action.type === 'single_po_fv' ? action.payload : undefined,
                paynow_context: action.context === "paynow" ? true : false
            };
            localStorage.setItem('nxtParams', JSON.stringify(nxtParams));

            if (action.type === 'single_po_fv') {
                window.location.href = '/member/pay-now/?nc=applyvoucher';
            } else {
                window.location.href = '/member/pay-now/?nc=paynow';
            }


        }

        vm.toggleTermsAndCondition = function (voucher) {
            voucher.collapsed = !voucher.collapsed;
        };

        vm.isSLPFlow = function () {
            return localStorage.getItem("authFlow") === "seperateTab" ? false : true;
        };

        //Handle Apply Voucher click
        vm.handleApplyVoucherClick = function (order) {
            vm.currentPoId = order.p_order_id;
            if (order.can_pay == true) {

                var sdkPayload = {
                    "channel": "wapi",
                    "txn_type": "pay_now_forget_voucher",
                    "purchased_txn_list": vm.getActiveOrderIds([order.p_order_id]),
                    "app_version": "web"
                }
                if (localStorage.getItem("authFlow") === "urlRedirect" || sessionStorage.getItem("isRedirectedFromTCP") === "true") {
                    sdkPayload.payment_method_locking = true;
                  }
                vm.handleSdkSave(sdkPayload);
                vm.handleRouteChange({
                    type: 'single_po_fv',
                    payload: [order.p_order_id],
                    txn_type: "pay_now_forget_voucher"
                })
            } else {
                var url = "/mapi/v4.0.0/voucher/list/?p_order_id=" + vm.currentPoId;
                vm.getVoucherList(url);
            }
        }

        vm.handlePayNowClick = function () {

            var sdkPayload = {
                "channel": "wapi",
                "txn_type": "",
                "purchased_txn_list": vm.getActiveOrderIds(vm.poList),
                "app_version": "web"
            }
            if (localStorage.getItem("authFlow") === "urlRedirect" || sessionStorage.getItem("isRedirectedFromTCP") === "true") {
                sdkPayload.payment_method_locking = true;
              }
            if (vm.poList.length > 1) {
                sdkPayload.txn_type = 'pay_now';
                vm.handleSdkSave(sdkPayload);
                vm.handleRouteChange({
                    type: 'paynow',
                    payload: vm.poList,
                    txn_type: "pay_now"
                })

            } else {
                for (var props in vm.activeOrders) {
                    if (vm.activeOrders[props].p_order_id == vm.poList[0]) {
                        if (vm.activeOrders[props].voucher_info.can_apply) {
                            sdkPayload.txn_type = 'pay_now_forget_voucher';
                            vm.handleSdkSave(sdkPayload);
                            vm.handleRouteChange({
                                type: 'single_po_fv',
                                payload: vm.poList,
                                txn_type: "pay_now_forget_voucher",
                                context: "paynow"
                            })

                        } else {
                            sdkPayload.txn_type = 'pay_now';
                            vm.handleSdkSave(sdkPayload);
                            vm.handleRouteChange({
                                type: 'paynow',
                                payload: vm.poList,
                                txn_type: "pay_now"
                            })
                        }
                    }
                }
            }

        }

        vm.getActiveOrderIds = function (poList) {

            var orderIds = [];

            for (var po of poList) {

                for (var prop in vm.activeOrders) {

                    if (vm.activeOrders[prop].p_order_id === po) {
                        for (var orders in vm.activeOrders[prop].order_info) {

                            if (vm.activeOrders[prop].order_info[orders].can_pay) {
                                orderIds.push(vm.activeOrders[prop].order_info[orders].order_id)
                            }

                        }
                    }

                }

            }

            return orderIds;
        }


        vm.getVoucherList = function (url) {
            var isTCP = localStorage.getItem("authFlow") === "urlRedirect" || sessionStorage.getItem("isRedirectedFromTCP") === "true";
            vm.pageLoader(true);
            $http.get(url, {
                headers: isTCP ? {"X-Origin-Context" : "tcp-web-app"} : {}
            })
                .then(function (resp) {
                    vm.voucherList = resp.data.response.activeVouchers || [];
                    vm.showVoModal = true;
                    $(document).trigger("paynowVoucherScreenViews", [
                        {
                            EventName: "Checkout_VoucherShown",
                            ScreenType: "covoucher",
                            ScreenSlug: "co-voucher",
                            ReferrerSlug: "co-delivery/paynow/my account",
                        }
                    ]);
                    vm.pageLoader(false);
                })
                .catch(function (err) {
                    vm.pageLoader(false);
                    console.error(err);
                })
        }

        vm.applyVoucher = function () {
            vm.pageLoader(true);

            var applyUrl = '/mapi/v4.0.0/voucher/apply/?p_order_id=' + vm.currentPoId + '&evoucher_code=' + vm.selectedVoCode;

            $http.get(applyUrl)
                .then(function (response) {
                    if (response.data.status == 0) {
                        vm.submitVoucher(vm.currentPoId, vm.selectedVoCode);
                    } else {
                        vm.pageLoader(false);
                        vm.voucherError = response.data.message;
                    }
                })
                .catch(function (err) {
                    vm.pageLoader(false);
                    console.error(err);
                    vm.voucherError = 'Something went wrong, Please try again later';
                });

        }

        vm.submitVoucher = function (poid, vcode) {

            var formData = new FormData();
            formData.append("p_order_id", poid);
            formData.append("evoucher_code", vcode);

            vm.postFormData("/mapi/v4.0.0/voucher/submit/", formData)
                .then(function (response) {
                    if (response.status == 0) {
                        vm.pageLoader(false);
                        vm.handleCloseVoucherModal();
                        toastr.success('', 'Voucher applied successfully', { timeOut: 400, positionClass: "toast-top-full-width", closeButton: true, preventDuplicates: true });
                        vm.$onInit();

                    } else {
                        vm.pageLoader(false);
                        vm.voucherError = response.data.message;
                        vm.selectedVoCode = undefined;
                    }
                }).catch(function (err) {
                    vm.pageLoader(false);
                    vm.selectedVoCode = undefined;
                    console.error(err);
                    vm.voucherError = 'Something went wrong, Please try again later';
                });

        }

        vm.handleVoucherInputChange = function (code, index) {
            vm.voucherError = undefined;
            if (code != '') {
                vm.selectedVoCode = code;
            }
            else if (code == '' || code == ' ') {
                vm.selectedVoCode = undefined;
            }

            if (index || index === 0) {
                var element = document.querySelector(".hightlight-radio-div");
                if (element) {
                    element.classList.remove("hightlight-radio-div");
                }

                var source = "#radioContainerHighlight" + index;
                document.querySelector(source).classList.add('hightlight-radio-div')
            }
        }

        //Close Voucher Modal
        vm.handleCloseVoucherModal = function () {
            vm.showVoModal = false;
            vm.selectedVoCode = undefined;
            vm.voucherError = undefined;
        }

        //Fetch Post methods
        vm.postFormData = function (url, formData) {

            return new Promise(function (resolve) {
                var postHeaders = {
                    "content-type": "application/x-www-form-urlencoded;charset=UTF-8"
                };
                fetch(url, {
                    method: "POST",
                    headers: postHeaders,
                    body: new URLSearchParams(formData),
                }).then(function (response) {
                    resolve(response.json());
                });
            });
        }


    }]
});
dataLayer = null;
angular.module('app.layout').component('myOrderPaynow', {
    templateUrl: 'app/templates/innertemplates/myOrderPaynow.html',
    bindings: {},
    controllerAs: 'vm',
    controller: ['$scope', '$http', '$timeout', '$q', function ($scope, $http, $timeout, $q) {

        var vm = this;
        vm.order_summary_pn = undefined;
        vm.showVoModalPn = false;
        vm.paynowVoucherList = [];
        vm.voucher_code_pn = undefined;
        vm.is_pn_voucher_applied = false;
        vm.pnWalletStatus = false;
        vm.showVoucherSection = false;
        
        vm.paynowPayload = JSON.parse(localStorage.getItem('nxtParams')); //check if vm is required.
        var sdkPayload = JSON.parse(localStorage.getItem('sdkPayload'));


        function fallback() {

            if (vm.paynowPayload.txn_type === 'pay_now_forget_voucher') {

                if (vm.paynowPayload.paynow_context) {
                    window.location.href = "/payment/pay_now/";
                    return;
                }
                window.location.href = "/co/forgot-voucher/" + vm.paynowPayload.p_order_id[0] + "/";

            } else {
                window.location.href = "/payment/pay_now/";
            }

        }

        function convertToPositiveNumber(data) {
            data.credit_value = Math.abs(data.credit_value);
            return data;
        }

        function updateDetails(data) {

            vm.order_summary_pn = data.order_details;
            vm.order_summary_pn.wallet = data.wallet_option;

            if (vm.order_summary_pn.wallet.state == 'off') {
                vm.pnWalletStatus = false;
            } else {
                vm.pnWalletStatus = true;
            }

            if (data.credit_details.length > 0) {

                for (var prop of data.credit_details) {
                    if (prop.type == 'credit') {
                        vm.order_summary_pn.useWallet = convertToPositiveNumber(prop);
                    }

                    if (prop.type == 'debit') {
                        vm.order_summary_pn.forceSettleBalance = convertToPositiveNumber(prop);
                    }

                    if (prop.type == 'evoucher') {
                        vm.order_summary_pn.voucherBenefit = convertToPositiveNumber(prop);
                    }

                    if (prop.type == 'delivery_token') {
                        vm.order_summary_pn.deliveryToken = convertToPositiveNumber(prop);
                    }
                }

            }

            //Update Order summary info to the library
            BBPayments.update({
                "type": 'updateOrder',
                "payload": data.juspay_details
            })

            //Update payload info for pay now post
            vm.paynowPayload.wallet = vm.pnWalletStatus ? 1 : 0;
            BBPayments.inputs(vm.paynowPayload, 'PAYNOW');

        }


        vm.handlePaynowErrModal = function () {
            localStorage.removeItem('nxtParams');
            localStorage.removeItem('sdkPayload');
            window.location.href = '/member/active-orders/';
        }

        vm.paynowPageLoader = function (status) {
            vm.showPaynowPageLoader = status;
            setTimeout(function () {
                $scope.$apply(); //this triggers a $digest
            }, 200);
        }

        vm.removeErrorBanner = function () {
            vm.v_pn_msg = undefined;
        }

        vm.invokeErrorHandling = function (status) {
            vm.paynowPageLoader(false);
            if (status) {
                vm.showPayNowErrModal = true;
            } else {
                vm.showPayNowErrModal = false;
                fallback();
            }
        }

        vm.isSLPFlow = function () {
            return localStorage.getItem("authFlow") === "seperateTab" ? false : true;
        };

        vm.getPaynowVoucherList = function (url) {
            // vm.paynowPageLoader(true);
            var isTCP = localStorage.getItem("authFlow") === "urlRedirect" || sessionStorage.getItem("isRedirectedFromTCP") === "true";
            $http.get(url, {
                headers: isTCP ? {"X-Origin-Context" : "tcp-web-app"} : {}
            })
                .then(function (resp) {
                    vm.paynowVoucherList = resp.data.response.activeVouchers || [];
                    // vm.paynowPageLoader(false);
                })
                .catch(function (err) {
                    // vm.paynowPageLoader(false);
                    console.error(err);
                })
        }

        vm.toggleApplyPaynowVoucher = function (e) {
            if (e) {
                e.preventDefault();
                e.stopPropagation();
            }

            if (vm.is_pn_voucher_applied) {
                vm.removePaynowVoucher();
            } else {
                vm.applyPaynowVoucher();
            }

        }

        vm.handlePaynowVoucherModal = function (status) {
            vm.showVoModalPn = status;
            vm.voucher_code_pn = undefined;
            if (status) {
                $(document).trigger("paynowVoucherScreenViews", [
                    {
                        EventName: "Checkout_VoucherShown",
                        ScreenType: "covoucher",
                        ScreenSlug: "co-voucher",
                        ReferrerSlug: "co-delivery/paynow/my orders",
                    }
                ]);
            }
        }

        vm.handleVoucherSelection = function (code, index) {
            vm.voucher_code_pn = code;
            if (index || index === 0) {
                var element = document.querySelector(".hightlight-radio-div");
                if (element) {
                    element.classList.remove("hightlight-radio-div");
                }

                var source = "#radioContainerHighlightPn" + index;
                document.querySelector(source).classList.add('hightlight-radio-div')
            }
        }


        vm.toggleTerms = function (voucher) {
            voucher.collapsed = !voucher.collapsed;
        };

        vm.applyPaynowVoucher = function () {
            vm.paynowPageLoader(true);

            var applyUrl = '/mapi/v4.0.0/voucher/apply/?p_order_id=' + vm.paynowPayload.p_order_id[0] + "&evoucher_code=" + vm.voucher_code_pn + "&bb_txn_id=" + BBPayments.session();

            $http.get(applyUrl)
                .then(function (resp) {
                    if (resp.data.status == 0) {
                        vm.is_pn_voucher_applied = true;
                        vm.v_pn_success = true;
                        vm.v_pn_msg = resp.data.response.display_message;
                        updateDetails(resp.data.response);
                    } else {
                        vm.is_pn_voucher_applied = false;
                        vm.v_pn_success = false;
                        vm.voucher_code_pn = undefined;
                        vm.v_pn_msg = "Please enter the correct voucher code";
                    }
                    vm.showVoModalPn = false;
                    vm.paynowPageLoader(false);

                }).catch(function (err) {
                    vm.is_pn_voucher_applied = false;
                    vm.v_pn_success = false;
                    vm.voucher_code_pn = undefined;
                    vm.v_pn_msg = 'Something went wrong, Please try again later!';
                    vm.showVoModalPn = false;
                    vm.paynowPageLoader(false);
                })

        }

        vm.removePaynowVoucher = function () {
            vm.paynowPageLoader(true);
            var formData = new FormData();
            formData.append("is_forgot_voucher", '1');
            formData.append("referrer", 'pay_now');
            formData.append("p_order_id", vm.paynowPayload.p_order_id[0]);
            formData.append("bb_txn_id", BBPayments.session());

            vm.postFormData("/mapi/v4.0.0/voucher/delete/", formData)
                .then(function (resp) {

                    if (resp.status == 0) {

                        vm.is_pn_voucher_applied = false;
                        vm.v_pn_success = false;
                        vm.v_pn_msg = "Voucher removed";
                        vm.voucher_code_pn = undefined;

                        updateDetails(resp.response);

                    } else {
                        vm.v_pn_success = false;
                        vm.v_pn_msg = "Something went wrong, Please try again!";
                    }

                    vm.paynowPageLoader(false);

                }).catch(function (resp) {
                    vm.v_pn_success = false;
                    vm.v_pn_msg = "Something went wrong, Please try again!";
                    vm.paynowPageLoader(false);
                })

        }

        vm.getOrderIds = function (list) {
            let orderIds = [];
            if (list.length == 0) return orderIds;
            for (var prop of list) {
                orderIds.push(Number(prop))
            }
            return orderIds;
        }

        vm.paymentInitiated = function (eventObj) {

            $(document).trigger('paymentInteractionPlower', [
                {
                    EventName: "Checkout_PaymentInitiated",
                    EventSubGroup: "paynow",
                    PaymentMode: eventObj.payload.payment_method,
                    TxnId: BBPayments.session() ? BBPayments.session() : "",
                    OrderId: vm.getOrderIds(vm.paynowPayload.order_ids),
                    AdditionalInfo2: "Juspay"
                }
            ]);


        }

        vm.checkFlow = function () {
            // vm.paynowPageLoader(true);
            var methods = {
                invokeErrorHandling: vm.invokeErrorHandling,
                loader: vm.paynowPageLoader,
                paymentInitiated: vm.paymentInitiated
            }

            function getCookie(cname) {
                var name = cname + "=";
                var decodedCookie = decodeURIComponent(document.cookie);
                var ca = decodedCookie.split(";");
                for (var i = 0; i < ca.length; i++) {
                  var c = ca[i];
                  while (c.charAt(0) == " ") {
                    c = c.substring(1);
                  }
                  if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                  }
                }
                return "";
              };

            var libParams = {
                url: "/payment_svc/v1/payment/get-sdk-params/",
                payload: sdkPayload,
                flow: "paynow",
                methods: methods,
                customHeaders: {
                    "X-Channel": getCookie("PWA") === "1" ? "BB-PWA" : "BB-WEB"
                }
            }

            if (BBPayments) {
                BBPayments.start(libParams)
                    .then(function (res, msg) {
                        if (res == 'success') {
                            // vm.paynowPageLoader(false);
                            vm.getPaynowInfo();
                            return;
                        }
                        fallback();
                    })
                    .catch(function (err) {
                        // vm.paynowPageLoader(false);
                        console.error(err);
                        fallback();
                    })

            }

        }

        vm.getPaynowInfo = function () {
            // vm.paynowPageLoader(true);

            var poid = vm.paynowPayload.p_order_id && encodeURIComponent(vm.paynowPayload.p_order_id.join(','));
            var oid = encodeURIComponent(vm.paynowPayload.order_ids.join(','))

            var paynowUrl = "/mapi/v4.0.0/pay-now/?referrer='order-history'&remove_voucher=true" +
                "&p_order_id=" + poid + "&order_ids=" + oid + "&bb_txn_id=" + BBPayments.session();

            var voUrl = "/mapi/v4.0.0/voucher/list/?p_order_id=" + poid;

            if (vm.paynowPayload.txn_type === 'pay_now_forget_voucher') {
                paynowUrl += "&txn_type=" + vm.paynowPayload.txn_type;
            }

            $http.get(paynowUrl)
                .then(function (resp) {
                    // vm.paynowPageLoader(false);
                    if (resp.data.status == 0) {
                        updateDetails(resp.data.response);
                    } else {
                        vm.invokeErrorHandling(true);
                        return;
                    }

                    if (BBPayments.session()) {
                        localStorage.setItem('bbTxnId', BBPayments.session());
                    }

                    if (vm.paynowPayload.txn_type === 'pay_now_forget_voucher') {
                        vm.showVoucherSection = true;
                        vm.getPaynowVoucherList(voUrl);
                    }
                })
                .catch(function (err) {
                    // vm.paynowPageLoader(false);
                    console.error(err);
                })

        }


        if (sdkPayload && vm.paynowPayload) {
            vm.checkFlow();
        } else {
            window.location.href = "/member/active-orders/";
        }

        vm.handleWalletErrDecision = function (status) {
            vm.showWalletErr = undefined;
            if (status) {
                vm.removePaynowVoucher();
            }
        }

        vm.togglePnWallet = function () {
            vm.paynowPageLoader(true);

            var poid = vm.paynowPayload.p_order_id && encodeURIComponent(vm.paynowPayload.p_order_id.join(','));
            var oid = encodeURIComponent(vm.paynowPayload.order_ids.join(','))
            var wallet = vm.pnWalletStatus ? "1" : "0";

            var url = "/mapi/v4.0.0/pay-now/?referrer='order-history'" + "&p_order_id=" + poid + '&order_ids=' + oid + '&wallet=' + wallet + '&bb_txn_id=' + BBPayments.session() + '&txn_type=' + vm.paynowPayload.txn_type;

            $http.get(url)
                .then(function (resp) {
                    vm.paynowPageLoader(false);
                    if (resp.data.response.voucher_removal_warning) {
                        vm.pnWalletStatus = !vm.pnWalletStatus;
                        vm.showWalletErr = resp.data.response.voucher_removal_warning;
                        return;
                    }

                    if (resp.data.status == 0) {
                        updateDetails(resp.data.response);
                    } else {
                        vm.pnWalletStatus = !vm.pnWalletStatus;
                    }

                })
                .catch(function (err) {
                    vm.pnWalletStatus = !vm.pnWalletStatus;
                    vm.paynowPageLoader(false);
                })

        }

        //Fetch Post methods
        vm.postFormData = function (url, formData) {

            return new Promise(function (resolve) {
                var postHeaders = {
                    "content-type": "application/x-www-form-urlencoded;charset=UTF-8"
                };
                fetch(url, {
                    method: "POST",
                    headers: postHeaders,
                    body: new URLSearchParams(formData),
                }).then(function (response) {
                    resolve(response.json());
                });
            });
        }


    }]
});





dataLayer = null;
angular.module('app.layout').component('myPaymentsManagement', {
    templateUrl: 'app/templates/innertemplates/myPaymentsManagement.html',
    bindings: {},
    controllerAs: 'vm',
    controller: ['$scope', '$http', '$timeout', '$q', function ($scope, $http, $timeout, $q) {

        var vm = this;

        vm.fallback = function () {
            window.location.href = "/payment/third-party-wallets/"
        }

        vm.invokeErrorHandling = function (status) {
            if (status) {
                vm.showPaymentsErrModal = true;
            } else {
                vm.showPaymentsErrModal = false;
                vm.fallback();
            }
        }

        vm.handlePaynowErrModal = function (status) {
            vm.showPaymentsErrModal = false;
            if (status) {
                window.location.href = "/";
            }
        }

        vm.init = function () {

            var methods = {
                invokeErrorHandling: vm.invokeErrorHandling,
            }

            var libParams = {
                url: "/payment_svc/v1/payment/payment-management/",
                payload: { "app_version": "web" },
                flow: "payments",
                methods: methods,
            }

            if (BBPayments) {
                BBPayments.start(libParams)
                    .then(function (res, msg) {
                        if (res != 'success') {
                            vm.fallback();
                        }

                    })
                    .catch(function (err) {
                        vm.fallback();
                    })
            }
        }

        vm.init();

    }]
});
angular.module('app.layout').component('orderAssistant', {
    templateUrl: 'app/templates/header/orderAssistant.html',
    bindings: {
        'closeOrderAssistant': '&'
    },
    controllerAs: 'vm',
    controller: ['$scope', '$http', '$timeout', '$window', function ($scope, $http, $timeout, $window) {

        var vm = this;
        vm.order = {};
        vm.hide = true;
        vm.cancelledOrder = false;

        vm.$onInit = function () {
            $http.get('/mapi/v3.5.0/order/order-assistant/?_bb_client_type=web').then(function (response) {
                var responseData = response.data.response;
                if (responseData && responseData.orders) {
                    var noOfOrders = responseData.orders.length;
                    var orders = responseData.orders;
                    if (noOfOrders > 0) {
                        vm.hide = false;
                        vm.order = orders[responseData.display_index];
                        vm.noOfactiveOrders = responseData.total_active_orders;
                        $(document).trigger('selfServiceInteractionPlower', [{
                            'EventName': 'OaWidget_launched',
                            'UserFlow': 'system',
                            'OrderId': vm.order.order_id,
                            'OrderNumber': vm.order.order_number,
                            'AdditionalInfo2': vm.order.order_status
                        }]);
                    }
                    // vm.order = orders[2];
                    vm.isExpress = vm.order.is_express;
                    vm.cancelledOrder = vm.order.order_state == 2 ? true : false;
                    $timeout(function () {
                        $window.scrollBy(0, 1);
                    }, 200)
                }

            })

        }
        vm.getSlotClass = function () {
            if (vm.cancelledOrder) return 'strike';
            else return 'bold-dark';
        }
        vm.oaWidgetClicked = function () {
            $(document).trigger('screenViewReferralsEvent', [{}]);
            $(document).trigger('selfServiceInteractionPlower', [{
                'EventName': 'OaWidget_Clicked',
                'UserFlow': 'User_action',
                'OrderId': vm.order.order_id,
                'OrderNumber': vm.order.order_number,
                'AdditionalInfo2': vm.order.order_status
            }]);
        }
        vm.oaWidgetClosed = function () {
            $(document).trigger('selfServiceInteractionPlower', [{
                'EventName': 'OaWidget_Closed',
                'UserFlow': 'User_action',
                'OrderId': vm.order.order_id,
                'OrderNumber': vm.order.order_number,
                'AdditionalInfo2': vm.order.order_status
            }]);
        }

    }]
});
angular.module('app.layout').component('orderStatusWidget', {
    templateUrl: 'app/templates/header/orderStatusWidget.html',
    bindings: {
        arrowIndex: '<',
        states: '<',
        showArrow: '<',
    },
    controllerAs: 'vm',
    controller: ['$scope', '$timeout', function ($scope, $timeout) {
        var vm = this;
        vm.statusMeter = 0;
        vm.$onChanges = function () {
            vm.states.forEach(function (a, i) {
                if (a.is_active) vm.statusMeter = i;
            });
            console.log(vm.statusMeter);

        }
    }]
});
(function() {
    'use strict';

    configure.$inject = ['$logProvider', '$interpolateProvider', '$httpProvider', '$compileProvider'];
    var core = angular.module('app.core');

    var config = {
        appErrorPrefix: '[Bigbasket Error] ', //Configure the exceptionHandler decorator
        appTitle: 'Custom Page',
        version: '1.0.0'
    };

    core.value('config', config);

    core.config(configure);
    core.config(['$locationProvider', function($locationProvider){
        $locationProvider.html5Mode({
            enabled:true,
            requireBase:false,
            rewriteLinks:false})
            .hashPrefix('!');
    }]);
    core.constant('R', R); //ramda.js
    core.constant('toastr', toastr); //toastr

    /* @ngInject */
    function configure ($logProvider, $interpolateProvider, $httpProvider, $compileProvider) {
        // $compileProvider.debugInfoEnabled(false);
        $httpProvider.useApplyAsync(true);

        // turn debugging off/on (no info or warn)
        if ($logProvider.debugEnabled) {
            $logProvider.debugEnabled(false);
        }

        $interpolateProvider.startSymbol('{[{');
        $interpolateProvider.endSymbol('}]}');

        $httpProvider.defaults.xsrfCookieName = 'csrftoken';
        $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';
        $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
        $httpProvider.defaults.headers.post['X-CSRFToken'] = $.cookie('csrftoken');
        $.cookie('PWA') === "1" ? $httpProvider.defaults.headers.common['X-Channel'] = 'BB-PWA' : $httpProvider.defaults.headers.common['X-Channel'] = 'BB-WEB';
        $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|chrome-extension|bigbasket):/);
    }
})();

// Include in index.html so that app level exceptions are handled.
// Exclude from testRunner.html which should run exactly what it wants to run
(function() {
    'use strict';

    config.$inject = ['$provide'];
    extendExceptionHandler.$inject = ['$delegate', 'exceptionHandler', 'logger'];
    angular
        .module('blocks.exception')
        .provider('exceptionHandler', exceptionHandlerProvider)
        .config(config);

    /**
     * Must configure the exception handling
     * @return {[type]}
     */
    function exceptionHandlerProvider() {
        /* jshint validthis:true */
        this.config = {
            appErrorPrefix: undefined
        };

        this.configure = function (appErrorPrefix) {
            this.config.appErrorPrefix = appErrorPrefix;
        };

        this.$get = function() {
            return {config: this.config};
        };
    }

    /**
     * Configure by setting an optional string value for appErrorPrefix.
     * Accessible via config.appErrorPrefix (via config value).
     * @param  {[type]} $provide
     * @return {[type]}
     * @ngInject
     */
    function config($provide) {
        $provide.decorator('$exceptionHandler', extendExceptionHandler);
    }

    /**
     * Extend the $exceptionHandler service to also display a toast.
     * @param  {Object} $delegate
     * @param  {Object} exceptionHandler
     * @param  {Object} logger
     * @return {Function} the decorated $exceptionHandler service
     */
    function extendExceptionHandler($delegate, exceptionHandler, logger) {
        return function(exception, cause) {
            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
            var errorData = {exception: exception, cause: cause};
            exception.message = appErrorPrefix + exception.message;
            $delegate(exception, cause);
            /**
             * Could add the error to a service's collection,
             * add errors to $rootScope, log errors to remote web server,
             * or log locally. Or throw hard. It is entirely up to you.
             * throw exception;
             *
             * @example
             *     throw { message: 'error message we added' };
             */
            logger.error(exception.message, errorData);
        };
    }
})();

(function() {
    'use strict';

    exception.$inject = ['logger'];
    angular
        .module('blocks.exception')
        .factory('exception', exception);

    /* @ngInject */
    function exception(logger) {
        var service = {
            catcher: catcher
        };
        return service;

        function catcher(message) {
            return function(reason) {
                logger.error(message, reason);
            };
        }
    }
})();
(function() {
    'use strict';

    angular
        .module('blocks.logger')
        .factory('logger', logger);

    logger.$inject = ['$log', 'toastr'];

    function logger($log, toastr) {
        var service = {
            showToasts: true,

            error   : error,
            info    : info,
            success : success,
            warning : warning,

            // straight to console; bypass toastr
            log     : $log.log
        };

        return service;
        /////////////////////

        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Error: ' + message, data);
        }

        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info: ' + message, data);
        }

        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Success: ' + message, data);
        }

        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Warning: ' + message, data);
        }
    }
}());

(function() {
    'use strict';

    angular
        .module('blocks.router')
        .provider('routehelperConfig', routehelperConfig)
        .factory('routehelper', routehelper);

    routehelper.$inject = ['$location', '$rootScope', '$route', 'logger', 'routehelperConfig'];

    // Must configure via the routehelperConfigProvider
    function routehelperConfig() {
        /* jshint validthis:true */
        this.config = {
            // These are the properties we need to set
            // $routeProvider: undefined
            // docTitle: ''
            // resolveAlways: {ready: function(){ } }
        };

        this.$get = function() {
            return {
                config: this.config
            };
        };
    }

    function routehelper($location, $rootScope, $route, logger, routehelperConfig) {
        var handlingRouteChangeError = false;
        var routeCounts = {
            errors: 0,
            changes: 0
        };
        var routes = [];
        var $routeProvider = routehelperConfig.config.$routeProvider;

        var service = {
            configureRoutes: configureRoutes,
            getRoutes: getRoutes,
            routeCounts: routeCounts
        };

        init();

        return service;
        ///////////////

        function configureRoutes(routes) {
            routes.forEach(function(route) {
                route.config.resolve =
                    angular.extend(route.config.resolve || {}, routehelperConfig.config.resolveAlways);
                $routeProvider.when(route.url, route.config);
            });
            $routeProvider.otherwise({redirectTo: '/'});
        }

        function handleRoutingErrors() {
            // Route cancellation:
            // On routing error, go to the dashboard.
            // Provide an exit clause if it tries to do it twice.
            $rootScope.$on('$routeChangeError',
                function(event, current, previous, rejection) {
                    if (handlingRouteChangeError) {
                        return;
                    }
                    routeCounts.errors++;
                    handlingRouteChangeError = true;
                    var destination = (current && (current.title || current.name || current.loadedTemplateUrl)) ||
                        'unknown target';
                    var msg = 'Error routing to ' + destination + '. ' + (rejection.msg || '');
                    logger.warning(msg, [current]);
                    $location.path('/');
                }
            );
        }

        function init() {
            handleRoutingErrors();
            updateDocTitle();
        }

        function getRoutes() {
            for (var prop in $route.routes) {
                if ($route.routes.hasOwnProperty(prop)) {
                    var route = $route.routes[prop];
                    var isRoute = !!route.title;
                    if (isRoute) {
                        routes.push(route);
                    }
                }
            }
            return routes;
        }

        function updateDocTitle() {
            $rootScope.$on('$routeChangeSuccess',
                function(event, current, previous) {
                    routeCounts.changes++;
                    handlingRouteChangeError = false;
                    var title = routehelperConfig.config.docTitle + ' ' + (current.title || '');
                    $rootScope.title = title; // data bind to <title>
                }
            );
        }
    }
})();

(function () {
    "use strict";

    angular
        .module('app')
        .controller('EngagementStore', EngagementStore);

    EngagementStore.$inject = ['engagementStore_dataService', '$scope'];

    function EngagementStore(engagementStore_dataService, $scope) {
        var vm = this, byCategory = R.groupBy(function (product) {return product.category; });
        var selected = function(enProduct){ return enProduct.product.select === true };
        vm.engagementStore = {};
        vm.categories = {};
        vm.filters = {};
        vm.numSelectedProducts = 0;
        vm.grandTotal = 0;
        vm.totalSaved = 0;
        vm.isItemAlreadyInCart = false;
        vm.addProductstoCart=addProductstoCart;
        vm.selectStore = engagementStoreName;
        vm.updateEngagementStore = updateEngagementStore;
        vm.updateEngagementStoreFromCart = updateEngagementStoreFromCart;
        var currentSelectedStore = engagementStoreName;
        var getEngagementStoreComplete = function (response) {
                    vm.filters = {};
                    vm.engagementStore = response.data;
                    createCategoryFilter();
                    appendFlatPage(vm.engagementStore.flatPage);

                    $scope.$watch('vm.engagementStore.products', function(newProducts, oldProducts) {
                        vm.numSelectedProducts = R.filter(selected, newProducts).length;
                        calculateGrandTotal(newProducts);
                        restrictSelectedQuantity();
                    },true);
                    $scope.$watch('vm.engagementStore.store.numberOfGuests',function(newNumberOfGuests,oldNumberOfGuests){
                       if(newNumberOfGuests < 2){
                           vm.engagementStore.store.numberOfGuests = 2;
                       }
                       angular.forEach(vm.engagementStore.products, function(product, key) {
                            product.product.selectedQuantity = Math.round(product.fractionatedUnits * newNumberOfGuests);
                        });
                    },true);

                    if(R.isEmpty(vm.engagementStore.promo)){
                       vm.engagementStore.promo=null;
                    }
                        $("#engagementStoreMainContainer" ).fadeIn( "slow" );
                        HoldOn.close();
                    return vm.engagementStore;
                };

        activate();

        function activate() {
            var promises = [getEngagementStore()];
            engagementStore_dataService.ready(promises).then(function () { });
        }

        function createCategoryFilter(){
            vm.categories = byCategory(vm.engagementStore.products);
            vm.filters.category = '';
        }

        function appendFlatPage(flatPageContent){
            $('#engagementStoreFlatPage').hide();
            $('#engagementStoreFlatPage').append(flatPageContent);
            $('#engagementStoreFlatPage').show();
        }

        function getEngagementStore() {
            var getStoresComplete = function (response){
                vm.engagement_stores = response.data;
                engagementStore_dataService.getEngagementStore(currentSelectedStore).then(getEngagementStoreComplete);
            };
            engagementStore_dataService.getAllStores().then(getStoresComplete);
        }

        function selectStore(storeName){
            engagementStore_dataService.getEngagementStore(storeName).then(getEngagementStoreComplete);
        }

        function calculateGrandTotal(newProducts){
           vm.grandTotal = 0;
           vm.totalSaved = 0;
           angular.forEach(R.filter(selected, newProducts), function(vProduct, key) {
                vm.grandTotal = vm.grandTotal + (vProduct.product.selectedQuantity * vProduct.product.sell_price);
                vm.totalSaved = vm.totalSaved + (vProduct.product.selectedQuantity * vProduct.product.mrp);
           });
        }

        function addProductstoCart(){
           angular.forEach(R.filter(selected, vm.engagementStore.products), function(vProduct, key) {
                if(vProduct.product.selectedQuantity > 0){
                    add_to_basket(vProduct.pid, vProduct.product.selectedQuantity, 1, null, ADD_TO_CART_SOURCES.ENGAGEMENT_STORE,null);
                }
           });
        }

        function restrictSelectedQuantity(){
           angular.forEach(R.filter(selected, vm.engagementStore.products), function(vProduct, key) {
                if(vProduct.product.selectedQuantity < 0){
                   vProduct.product.selectedQuantity = 0;
                }
                if(vProduct.product.selectedQuantity > 25){
                   vProduct.product.selectedQuantity = 25;
                }
           });
        }

        function updateEngagementStore(pid,quantity){
            angular.forEach(vm.engagementStore.products, function(vProduct, key) {
                if(vProduct.pid === Number(pid)){
                    vProduct.cart.quantity = quantity;
                     $scope.$digest();
                }
           });

        }

        function updateEngagementStoreFromCart(){
            angular.forEach(vm.engagementStore.products, function(vProduct, key) {
                if($('#p_'+vProduct.pid) !== undefined){
                    if($('#p_'+vProduct.pid).length === 0){
                        vProduct.cart.quantity = 0;
                    }else{
                       vProduct.cart.quantity = $('#p_'+vProduct.pid).val();
                    }

                     $scope.$digest();
                }
           });

        }

    }//end of controller.

}) ();
(function () {
    "use strict";
    angular
        .module('app')
        .factory('engagementStore_dataService', engagementStore_dataService);

    engagementStore_dataService.$inject = ['$http','$q'];

    function engagementStore_dataService($http,$q) {
        var isPrimed = false;
        var primePromise;

        var dataService = {
            ready: ready,
            getEngagementStore: getEngagementStore,
            addtocart:addtocart,
            getAllStores: getAllStores,
        };

        function getEngagementStore(storeName) {
            function getEngagementStoreComplete(data, status,header, config){
                return data.data;
            }
           return  $http({
                method: 'GET',
                url: '/engagementStore?store='+storeName
            }).then(getEngagementStoreComplete);
        }

        function prime() {
            // This function can only be called once.
            if (primePromise) {
                return primePromise;
            }

            primePromise = $q.when(true).then(success);
            return primePromise;

            function success() {
                isPrimed = true;
            }
        }

        function addtocart(data){
            return $http({
                method:'POST',
                url:"/basket/add/",
                data: $.param(data)
            })
        }

        function ready(nextPromises) {
            var readyPromise = primePromise || prime();
            return readyPromise
                .then(function() { return $q.all(nextPromises); });
        }

        function getAllStores(){
            return  $http({
                method: 'GET',
                url: '/engagementStore/engage/getStores/'
            })
        }

        return dataService;
    }

})();
(function() {
    "use strict";


    var fv_app = angular.module('app.GiftCard');

    //    Directive to restrict user to enter
    fv_app.directive('allowOnlyNumbers', function () {
        return {
            restrict: 'A',
            link: function (scope, elm, attrs, ctrl) {
                elm.on('keydown', function (event) {
                    var $input = $(this);
                    var value = $input.val();
                    value = value.replace(/[^0-9]/g, '')
                    $input.val(value);
                    if (event.which == 64 || event.which == 16) {
                        // to allow numbers
                        return false;
                    } else if (event.which >= 48 && event.which <= 57) {
                        // to allow numbers
                        return true;
                    } else if (event.which >= 96 && event.which <= 105) {
                        // to allow numpad number
                        return true;
                    } else if ([8, 9, 13, 17, 27, 37, 38, 39, 40, 67, 86, 91].indexOf(event.which) > -1) {
                        // to allow backspace, enter, escape, arrows
                        return true;
                    } else {
                        event.preventDefault();
                        // to stop others
                        //alert("Sorry Only Numbers Allowed");
                        return false;
                    }
                });
            }
        }
    });

    var _gaq = {
        push: function (ga_params) {
            var cmd = ga_params[0];
            if (cmd === '_trackEvent') {
                var category = ga_params[1], action = ga_params[2], opt_label = ga_params[3], opt_value = ga_params[4];

                if (opt_value) {
                    // ga('send', 'event', category, action, opt_label, opt_value, {
                    //     'nonInteraction': 1
                    // });
                    gtag('event', action, {
                        'event_category': category,
                        'event_label': opt_label,
                        'value': opt_value,
                        'non_interaction': true
                    });
                } else {
                    // ga('send', 'event', category, action, opt_label, {
                    //     'nonInteraction': 1
                    // });
                    gtag('event', action, {
                        'event_category': category,
                        'event_label': opt_label,
                        'value': '',
                        'non_interaction': true
                    });
                }
            }
            if (cmd === '_addTrans') {
                // ga('ecommerce:addTransaction', {
                //     'id': ga_params[1], // Transaction ID. Required
                //     'affiliation': 'BigBasket.com', // Affiliation or store name
                //     'revenue': ga_params[3], // Grand Total
                //     'shipping': ga_params[5], // Shipping
                //     'tax': ga_params[4] // Tax
                // });
                // ga('ecommerce:send');

                gtag('event', 'purchase', {
                    "transaction_id": ga_params[1], // Transaction ID. Required
                    "affiliation": 'BigBasket.com', // Affiliation or store name
                    "value": ga_params[3], // Grand Total
                    "tax": ga_params[4], // Tax
                    "shipping": ga_params[5], // Shipping
                    // "items": ga_params[6] != undefined ? [ga_params[6]] : []
                });
            }
            if (cmd === '_addItem') {
                // ga('ecommerce:addItem', {
                //     'id': ga_params[1], // Transaction ID. Required
                //     'name': ga_params[3], // Product name. Required
                //     'sku': ga_params[2], // SKU/code
                //     'category': ga_params[4], // Category or variation
                //     'price': ga_params[5], // Unit price
                //     'quantity': ga_params[6] // Quantity
                // });
                // ga('ecommerce:send');

                gtag('event', 'add_to_cart', {
                    "items": [
                      {
                        "id": ga_params[1], // Transaction ID. Required
                        "name": ga_params[3], // Product name. Required
                        "category": ga_params[4], // Category or variation
                        "quantity": ga_params[6], // Quantity
                        "price": ga_params[5], // Unit price
                      }
                    ]
                });
            }
        }
    }

    fv_app.controller('GiftCardController', GiftCardController);

    GiftCardController.$inject = ['$scope', 'GiftCardService', '$timeout'];

    function GiftCardController($scope, GiftCardService, $timeout) {


        $scope.get_gift_card_data = function() {
        var _gaq = {
        push: function (ga_params) {
            var cmd = ga_params[0];
            if (cmd === '_trackEvent') {
                var category = ga_params[1], action = ga_params[2], opt_label = ga_params[3], opt_value = ga_params[4];

                if (opt_value) {
                    // ga('send', 'event', category, action, opt_label, opt_value, {
                    //     'nonInteraction': 1
                    // });

                    gtag('event', action, {
                        'event_category': category,
                        'event_label': opt_label,
                        'value': opt_value,
                        'non_interaction': true
                    });

                } else {
                    // ga('send', 'event', category, action, opt_label, {
                    //     'nonInteraction': 1
                    // });

                    gtag('event', action, {
                        'event_category': category,
                        'event_label': opt_label,
                        'value': '',
                        'non_interaction': true
                    });
                }
            }
            if (cmd === '_addTrans') {
                // ga('ecommerce:addTransaction', {
                //     'id': ga_params[1], // Transaction ID. Required
                //     'affiliation': 'BigBasket.com', // Affiliation or store name
                //     'revenue': ga_params[3], // Grand Total
                //     'shipping': ga_params[5], // Shipping
                //     'tax': ga_params[4] // Tax
                // });
                // ga('ecommerce:send');

                gtag('event', 'purchase', {
                    "transaction_id": ga_params[1], // Transaction ID. Required
                    "affiliation": 'BigBasket.com', // Affiliation or store name
                    "value": ga_params[3], // Grand Total
                    "tax": ga_params[4], // Tax
                    "shipping": ga_params[5], // Shipping
                    // "items": ga_params[6] != undefined ? [ga_params[6]] : []
                });
            }
            if (cmd === '_addItem') {
                // ga('ecommerce:addItem', {
                //     'id': ga_params[1], // Transaction ID. Required
                //     'name': ga_params[3], // Product name. Required
                //     'sku': ga_params[2], // SKU/code
                //     'category': ga_params[4], // Category or variation
                //     'price': ga_params[5], // Unit price
                //     'quantity': ga_params[6] // Quantity
                // });
                // ga('ecommerce:send');

                gtag('event', 'add_to_cart', {
                    "items": [
                      {
                        "id": ga_params[1], // Transaction ID. Required
                        "name": ga_params[3], // Product name. Required
                        "category": ga_params[4], // Category or variation
                        "quantity": ga_params[6], // Quantity
                        "price": ga_params[5], // Unit price
                      }
                    ]
                });
            }
        }
    }
            GiftCardService.getGiftCardData().then(function(response) {

                $scope.response = response
                $scope.cat_msg = response.data.cat_msg;
                $scope.amount_msg = response.data.amount_msg;
                $scope.themes = response.data.themes;
                $scope.amts = response.data.amts;
                $scope.pm_list = response.data.pm_list;
                $scope.wal_balance = response.data.wal_balance;
                $scope.final_wal_balance = 0;
                $scope.sub_total = 0;
                $scope.final_total = 0;
                $scope.wallet_sel = false;
                $scope.selected_theme = ''
                $scope.selected_image = ''
                $scope.first_name = ''
                $scope.email_id = ''
                $scope.mobile_no = ''
                $scope.gift_sender = response.data.user_name;
                $scope.selected_recipient = ''
                $scope.selected_theme = $scope.themes[0].slug
                $scope.selected_amt = $scope.amts[0]
                $scope.edit_card = false;
                $scope.images = $scope.themes[0].images;
                $scope.show_drop = false,
                $scope.is_member =$.cookie("_bb_mid");

                //Loading form fields from localStorage
                if (window.localStorage.getItem("recipient_list") === null) {
                    $scope.recipient_list = [{first_name:"",email_id:"",mobile_no:""}];
                }
                else {
                    $scope.recipient_list = angular.fromJson( localStorage.getItem( 'recipient_list' ) );
                }
                if (window.localStorage.getItem("gift_msg") === null) {
                    $scope.gift_msg = ""
                }
                else {
                    $scope.gift_msg = localStorage.getItem( 'gift_msg' );
                }

                $timeout(function(){
                    $('#gift-carousel').owlCarousel({
                        items:1,
                        loop:false,
                        nav: true,
                        dots:true,
                        callbacks: true,
                        navText: ["<i class='fa fa-chevron-left' aria-hidden='true'></i>", "<i class='fa fa-chevron-right' aria-hidden='true'></i>"]
                    });
                },0)

                for (var j=0; j<$scope.pm_list.length; j++){
                    // This logic would change if user is allowed to select different gateways
                    $scope.payment_methods = $scope.pm_list[j].options;
                    $scope.sel_pm = $scope.pm_list[j].options[j].value;
                }

                $scope.gift_card_google_analytics('create-gift-card-page', 'gift-card', '/member/gift_cards/')
                window.scope = $scope
            });
        }

        $scope.get_images = function() {

            console.log("images:" + $scope.images)
            console.log("slec theme:" + $scope.selected_theme)
            for (var i=0; i<$scope.themes.length; i++) {
                if ($scope.themes[i].slug == $scope.selected_theme) {
                    $scope.images = $scope.themes[i].images;
                }
            }
        }

        $scope.save_recipient = function(temp) {
                var SlideTo = $(".recipients .recipient-details").length;
                var RecipientDiv = $('.recipients .recipient-details').size() + 1;
                var RecipientLimit = 5;
                // ADD A NEW ELEMENT.
                if (RecipientDiv <= RecipientLimit) {
                    $scope.recipient_list.push({ first_name: $scope.first_name, email_id: $scope.email_id, mobile_no: $scope.mobile_no });
                    if (temp) {
                        //Temporarily saving recipient data
                        $scope.recipient_list.pop();
                        localStorage.setItem( 'recipient_list', angular.toJson( $scope.recipient_list ) );
                        localStorage.setItem( 'gift_msg', $scope.gift_msg );
                    }
                }
                else {
                    $(".add_recipient_alert").fadeIn();
                    $timeout(function(){
                        $(".add_recipient_alert").fadeOut();
                    },2000);
                }
                // CLEAR THE FIELDS.
                $scope.first_name = '';
                $scope.email_id = '';
                $scope.mobile_no = '';
                $('#gift-carousel').owlCarousel().trigger('destroy.owl.carousel');
                $timeout(function(){
                    $('#gift-carousel').owlCarousel({items:1,dots:true,nav:true,navText: ["<i class='fa fa-chevron-left' aria-hidden='true'></i>", "<i class='fa fa-chevron-right' aria-hidden='true'></i>"]});
                    $('#gift-carousel').trigger('to.owl.carousel', SlideTo)
                    $('.recipient-details').removeClass('active');
                    $('.recipient-details:last-child').addClass('active');
                },0);
        }

        $scope.go_to_slide = function(index) {
            $('#gift-carousel').trigger('to.owl.carousel', index);
            $('.recipient-details').removeClass('active');
            $('.recipient-details.count_'+index).addClass('active');
        }

        $scope.update_recipient_name = function(first_name,index) {
            console.log("Preview name" + first_name);
            $scope.selected_recipient = first_name;
            $('#gift-carousel').trigger('to.owl.carousel', index)
        }

        $scope.remove_recipient = function(index) {
            var RecipientDiv = $('.recipients .recipient-details').size() + 1;
            $('#gift-carousel').owlCarousel().trigger('destroy.owl.carousel');
            $timeout(function(){
                $('#gift-carousel').owlCarousel({items:1,dots:true,nav:true,navText: ["<i class='fa fa-chevron-left' aria-hidden='true'></i>", "<i class='fa fa-chevron-right' aria-hidden='true'></i>"]});
                $('#gift-carousel').trigger('to.owl.carousel', index - 1)
                $('.recipient-details').removeClass('active');
                $('.recipient-details:nth-last-child(2)').addClass('active');
            },100);
            if( RecipientDiv > 2 ) {
                $scope.recipient_list.splice(index, 1);
            }
        }


       $scope.gift_card_google_analytics = function(eventCategory, eventAction, eventLabel){
        // if(window.ga != undefined){
        //     _gaq.push(['_trackEvent', eventCategory, eventAction ,eventLabel]);
        // }

        if(window.gtag != undefined){
            gtag('event', eventAction, {
                'event_category': eventCategory,
                'event_label': eventLabel,
                'value': '',
            });
        }

       }



//        $scope.pre_select_wallet = function() {
//            $scope.wallet_sel = true;
//            console.log("wallet selected");
//            $scope.wallet_selected();
//        }


//        $scope.wallet_selected = function() {
//            console.log("wallet_sel:", $scope.wallet_sel);
//            if ($scope.wal_balance > 0) {
//                if ($scope.wallet_sel){
//                    var final_amt_to_pay = $scope.sub_total - $scope.wal_balance
//                    if (final_amt_to_pay < 0) {
//                        $scope.final_total = 0
//                        $scope.final_wal_balance = $scope.sub_total
//                    } else {
//                        $scope.final_total = final_amt_to_pay
//                        $scope.final_wal_balance = $scope.wal_balance
//                    }
//                } else {
//                    $scope.final_total = $scope.sub_total
//                    $scope.final_wal_balance = 0
//                }
//            }
//        }

        $scope.editCard = function() {
            $scope.edit_card = false;
            $scope.wallet_sel = false;
            $scope.final_wal_balance = 0;
            $("#collapseOne").collapse('show');
            $("#collapseTwo").collapse('hide');
        }

        $scope.calc_total = function() {
            if(!$scope.is_member) {
                $scope.save_recipient(true);
                window["openLoginModal"]("login", "/co/create-gift-card/");
            }
            else {
                $scope.gift_card_google_analytics('clicked-proceed-to-payment', 'gift-card', '/member/gift_cards/')
                if($scope.giftForm.$valid) {
                    var total_gift_amt = $scope.selected_amt * $scope.recipient_list.length;
                    $scope.sub_total =  total_gift_amt;
    //                if ($scope.wal_balance < 0) {
    //                    $scope.final_total = $scope.sub_total - $scope.wal_balance;
    //                    $scope.final_wal_balance = $scope.wal_balance
    //                } else {
                    $scope.final_total = $scope.sub_total;
    //                }
                    $scope.edit_card = true;
                    $("#collapseTwo").collapse('show');
    //                $scope.pre_select_wallet(); // Weird
                    $(this).fadeOut();
                    localStorage.removeItem('recipient_list');
                    localStorage.removeItem('gift_msg');
                }
                else {
                    console.log('Unable to save. Validation error!');
                }
            }
        }
    }
})();

"use strict";
angular.module("app.GiftCard").service("GiftCardService",['$http','$q',function($http, $q){

        function getGiftCardData() {
            return $http.get("/co/gift-card-data/");
        }

        return {getGiftCardData:getGiftCardData}

}]);

(function(){
    "use strict";
    angular.module('app.layout').service('GAService', GAService);

    GAService.$inject = ['$window'];
    /* @ngInject */
    function GAService($window){
        var _gaq = {
            push: function (ga_params) {
                var cmd = ga_params[0];
                if (cmd === '_trackEvent') {
                    var category = ga_params[1], action = ga_params[2], opt_label = ga_params[3], opt_value = ga_params[4];

                    if (opt_value) {
                        // ga('send', 'event', category, action, opt_label, opt_value, {
                        //     'nonInteraction': 1
                        // });
                        gtag('event', action, {
                            'event_category': category,
                            'event_label': opt_label,
                            'value': opt_value,
                            'non_interaction': true
                        });
                    } else {
                        // ga('send', 'event', category, action, opt_label, {
                        //     'nonInteraction': 1
                        // });
                        gtag('event', action, {
                            'event_category': category,
                            'event_label': opt_label,
                            'value': '',
                            'non_interaction': true
                        });
                    }
                }

            }
        };
        var gaservice = {
            'pushToGoogleAnalytics': pushToGoogleAnalytics
        }
        return gaservice;

        function pushToGoogleAnalytics(cmd,category,action,label,value){
            "use strict";
            $(document).trigger('screenViewReferralsEvent', [{}]);
            if(ctype == 'custompage'){
                action = 'cp | '+ action;
            }
            else if(ctype == 'customtemplates'){
                action = 'cptp | '+ action;
            }
            // if(window.ga !=undefined){_gaq.push([cmd,category,action,label,value]);}

            if(window.gtag != undefined){
                gtag('event', action, {
                    'event_category': category,
                    'event_label': label,
                    'value': value,
                });
            }

        }

    }
})();
/**
 * Created by nikhil1989 on 23/2/16.
 */
(function() {



    var member = function() {
        this.memberinfo = null;
        this.currentAddress = null;
    }

    angular.module('app.layout').factory('UserDataservice', UserDataservice);

    UserDataservice.$inject = ['$http', '$q','toastr', '$rootScope'];

     function make_req_url(url){
            return (window.location.protocol == 'https:' ? '/auth' : '') + url;
        }

    function UserDataservice($http, $q,toastr,$rootScope) {

        var cart = {};
        var memberProxy = new member(null);
        var isPrimed = false;
        var primePromise;

        function getCartLength(){
            if(cart.items){
                return cart.items.length
            }
            return null;
        }

        function get_formated_cart(){
            var formated = {};
            angular.forEach(cart.items,function(item){
                formated[item.pid]=item.quantity;
            })

            return formated;

        }

        function getCart() {
            function getCartComplete(response) {
                cart = response.data;
                return cart;
            }
            return $http.get(make_req_url('/basket/get/')).then(getCartComplete);
        }


        function updateCartQuantity(productId,quantity,sid){

            function updateCartComplete(response){
                var added = response.data.success;
                if(!added){
                    toastr.error('',response.data.mesg.replace(/<\/?[^>]+(>|$)/g, ""),{timeOut: 500,positionClass: "toast-top-full-width",closeButton: true,preventDuplicates: true,preventOpenDuplicates: true});
                }
                return response.data;
            }

             var data = {
                prod_id:productId,
                qty:quantity,
                cart_type:1,
                is_list:[],
                term: $.query.get('q'),
                term_source: (location.pathname === "/ps/")?"ps":"",
                sid: sid,
                is_express_tab:false,
                cartitem_mode: 'normal'
            };

            var basketUrlBuilder = new BasketUrlBuilder();
            basketUrlBuilder = $rootScope.useNodeCart ? basketUrlBuilder.withNodeCartUrl().build() : basketUrlBuilder.build();
            if (!$rootScope.useNodeCart) {
                data = $.param(data)
            }
            return $http.post(basketUrlBuilder.updateQtyUrl, data).then(updateCartComplete);

        }

        function updateBasket(productId,quantity,sid,searchterm){
            function updateBasketComplete(response){
                var added = response.data.success;
                return added;
            }

            var data = {
                prod_id: productId,
                qty: quantity,
                ru: '/ & spn = 0',
                cart_type: 1,
                nc: 'auto - search',
                term: searchterm,
                term_source: 'AUTO',
                sid: sid,
                csrfmiddlewaretoken: $.cookie('csrftoken'),
                cartitem_mode: 'normal'
            }
            //var data = {
            //    prod_id:productId,
            //    qty:quantity,
            //    cart_type:1,
            //    is_list:[],
            //    term:'',
            //    term_source:'',
            //    sid: sid,
            //    is_express_tab:false,
            //    cartitem_mode: 'normal'
            //}

            var basketUrlBuilder = new BasketUrlBuilder();
            basketUrlBuilder = $rootScope.useNodeCart ? basketUrlBuilder.withNodeCartUrl().build() : basketUrlBuilder.build();
            if (!$rootScope.useNodeCart) {
                data = $.param(data)
            }
            return $http.post(basketUrlBuilder.addToCartUrl, data).then(updateBasketComplete);
        }

        function deleteFromBasket(pid,sid){
            "use strict";
            function deleteFromBasketComplete(response) {
                return response.data;
            }
            var data = {
                sid: sid,
                prod_id:pid,
                cart_type:1,
                is_list:[]
            };
            var basketUrlBuilder = new BasketUrlBuilder();
            basketUrlBuilder = $rootScope.useNodeCart ? basketUrlBuilder.withNodeCartUrl().build() : basketUrlBuilder.build();
            if (!$rootScope.useNodeCart) {
                data = $.param(data)
            }
            return $http.post(basketUrlBuilder.delItemUrl, data).then(deleteFromBasketComplete);
        }


        function getMember() {
            function getMemberComplete(response) {
                memberProxy.memberinfo = response.data;
                return memberProxy;
            }
            return $http.get(make_req_url('/get_member_details/')).then(getMemberComplete);
        };

        function getCartDifference(city_id,address_id){
            var data = {
                city_id:city_id,
                address_id:address_id
            }
            function getCartDifferenceComplete(response){
                if(response.data.success){
                    if(response.data && response.data.items ){
                        if(!R.isEmpty(response.data.items)){

                            return response.data;
                        }
                    }
                    return null;
                }
            }
            return $http.post(make_req_url('/basket/get-cart-item-difference/'), $.param(data)).then(getCartDifferenceComplete);
        }

        function setdelivertoArea(city_id,address_id){
            var data = {
                city_id:city_id,
                address_id:address_id,
                csrfmiddlewaretoken: $.cookie('csrftoken')
            }
            function setAreaComplete(response){
                if(response.data.success){
                    return true;
                }
                else{
                    return false;
                }
            }
            return $http.post(make_req_url('/set-city/'), $.param(data)).then(setAreaComplete);
        }

        // This method will fetch all user address slot at once
        function getSlotsForAddress_all(address_id_list){
            function getSlotsComplete(response){
                if(response.data.success){
                    var address_map_to_slots = {}
                    var availaible_slots = [];
                    angular.forEach(response.data.adresses, function (address) {

                        if(address.is_5k){
                            availaible_slots = [{
                                type: 'Express Delivery',
                                'slot': address.darkstore_next_slot,
                                'img': 'custPage/build/content/img/bike_red.png',
                                'bb_star_avail': address.bb_star_avail,
                                'is_5k': address.is_5k,
                                'show_express': address.show_express

                            }, {
                                type: 'Standard Delivery',
                                'slot': address.darkstore_next_slot,
                                'img': 'custPage/build/content/img/van_icon_green.png',
                                'bb_star_avail': address.bb_star_avail,
                                'is_5k': address.is_5k,
                                'show_express': address.show_express
                            }]
                        } else {
                            availaible_slots = [{
                                type: 'Express Delivery',
                                'slot': (address.express_closed_5k) ? "(Slots Full)" : address.darkstore_next_slot,
                                'img': 'custPage/build/content/img/bike_red.png',
                                'bb_star_avail': address.bb_star_avail,
                                'is_5k': address.is_5k,
                                'show_express': address.show_express

                            }, {
                                type: 'Standard Delivery',
                                'slot': (address.express_closed_5k) ? address.darkstore_next_slot : address.normal_next_slot,
                                'img': 'custPage/build/content/img/van_icon_green.png',
                                'bb_star_avail': address.bb_star_avail,
                                'is_5k': address.is_5k,
                                'show_express': address.show_express
                            }, {
                                type: 'Express Delivery',
                                'slot': address.express_next_slot,
                                'img': 'custPage/build/content/img/bike_red.png',
                                'bb_star_avail': address.bb_star_avail,
                                'is_5k': address.is_5k,
                                'show_express': address.show_express
                            }];
                        }
                availaible_slots = R.filter(function(avslot) {
                    if (avslot.slot) {return (avslot.slot == "") ? false : true}else{return false;}
                }, availaible_slots)
                availaible_slots = availaible_slots.length > 0 ? availaible_slots : null;
                    availaible_slots = R.forEach(function (slotype) {

                        if (slotype.type === "Standard Delivery") {

                            slotype.type ="Standard";
                        }
                        else{
                            slotype.slot = slotype.type+':'+slotype.slot;
                        }
                    }, availaible_slots);
                    availaible_slots = R.filter(function(avslot) {
                        if (avslot.is_5k &&
                            ((avslot.show_express && avslot.type === "Standard") ||
                                ((!avslot.show_express && avslot.type !== "Standard")))) {
                            return false;
                        }else {
                            return true;
                        }
                    }, availaible_slots);
                address_map_to_slots[address['id']]  = availaible_slots


                    })


                    return address_map_to_slots;


                }
                else{

                    return null;
                }
            }
            var data = {
                address_id:address_id_list,
                all : true
            }
            return $http.post(make_req_url('/member/get-address-slots/'),$.param(data)).then(getSlotsComplete);
        }

        function getmembername(){

            if(memberProxy && memberProxy.memberinfo){

                return memberProxy.memberinfo;
            }

        }

        function sendStockNotification(notifymethod,productId){

            function sendStockNotificationComplete(response) {
                var sent = response.data;
                return sent;
            }
            var data = {
                product_id: productId,
                notify_type: notifymethod,
                is_ct:true,
                csrfmiddlewaretoken: $.cookie('csrftoken')
            };

            return $http.post(make_req_url('/product/call-notify-popup/'), $.param(data)).then(sendStockNotificationComplete);

        }

        function getMultiSkuComboProducts(productSku){
            function getMultiSkuComboProductsComplete(response){
                return response.data;
            }
            return $http.get(make_req_url('/product/get-multi-combo-products?is_cp=1&sku_id='+productSku)).then(getMultiSkuComboProductsComplete);
        }

        var services = {
            getCart: getCart,
            getMember: getMember,
            updateBasket: updateBasket,
            deleteFromBasket: deleteFromBasket,
            ready: ready,
            getCartDifference:getCartDifference,
            setdelivertoArea:setdelivertoArea,
            sendStockNotification: sendStockNotification,
            getSlotsForAddress: getSlotsForAddress_all,
            updateCartQuantity: updateCartQuantity,
            getmembername: getmembername,
            getformatedcart:get_formated_cart,
            getCartLength: getCartLength,
            getMultiSkuComboProducts:getMultiSkuComboProducts
        };

        return services;


        function prime() {
            // This function can only be called once.
            if (primePromise) {
                return primePromise;
            }
            primePromise = $q.when(true).then(success);
            return primePromise;

            function success() {
                isPrimed = true;
            }
        }

        function ready(nextPromises) {
            var readyPromise = primePromise || prime();

            return readyPromise
                .then(function() {
                    return $q.all(nextPromises);
                })
                .catch(function (e) {

                });
        }


        

    }
})();
/**
 * Created by nikhil1989 on 11/2/16.
 */

(function () {
angular.module('app.layout').controller('Footer',Footer);

Footer.$inject = ['$scope','FooterDataservice'];

//Angular controller for footer on index.html
function Footer($scope,FooterDataservice){
    var vm = this;
    vm.footerData = [];
    if ($.cookie('_bb_vid')) {
        FooterDataservice.getfooter().then(function (response) {
            vm.footerData = response;
        });
    }
}
}
)();
/**
 * Created by nikhil1989 on 11/2/16.
 */
(function() {
    angular.module('app.layout').factory('FooterDataservice', FooterDataservice);

    FooterDataservice.$inject = ['$http', '$window'];

    function FooterDataservice($http, $window) {
        var isPrimed = false;
        var primePromise;

        function getFooter() {
            function getFooterComplete(response) {
                "use strict";
                return response.data;
            }
            var city_hidden_input_elem= document.getElementById("city_id");
            var footer_url= "/auth/get_footer/?";
            if (city_hidden_input_elem && city_hidden_input_elem.value){
                footer_url+= ("city_id="+ Number(city_hidden_input_elem.value));
            }
            else {
                footer_url+= "cai="+$window.CURRENT_ADDRESS_ID;
            }
            return $http.get(footer_url).then(getFooterComplete);
        }


        var services = {
            getfooter: getFooter,
            ready: ready
        };

        return services;


        function prime() {
            // This function can only be called once.
            if (primePromise) {
                return primePromise;
            }
            primePromise = $q.when(true).then(success);
            return primePromise;

            function success() {
                isPrimed = true;

            }
        }

        function ready(nextPromises) {
            var readyPromise = primePromise || prime();
            return readyPromise
                .then(function() {
                    return $q.all(nextPromises);
                })
                .catch();
        }
    }

})();

/**
 * Created by nikhil1989 on 12/2/16.
 */

 (function() {
    
    angular.module("app.layout").controller("Header", Header);

    Header.$inject = [
        "$scope",
        "$http",
        "$rootScope",
        "HeaderDataservice",
        "UserDataservice",
        "toastr",
        "$window",
        "$timeout",
        "GAService",
        "$uibModal",
        "$cookies"
    ];

    //Angular controller for footer on index.html
    function Header(
        $scope,
        $http,
        $rootScope,
        HeaderDataservice,
        UserDataservice,
        toastr,
        $window,
        $timeout,
        GAService,
        $uibModal,
        $cookies
    )
     {
        
        
        if(window.loadGTA){
            window.loadGTA();
        }
        var vm = this,
        
        jqueryAutoSelectCityArray = [];
        if ($.cookie("_fls") === "true") {
            $window.remove_cache = true;
        }
        if (typeof new_checkout === "undefined") {
            new_checkout = false;
        }
        if (window.location.pathname == "/basket/" && new_checkout) {
            vm.newPopup = true;
            
        }
        //akamai city info
        if ($.cookie("_bb_ftvid")) {
            vm.cityMessage = true;
        } else {
            vm.cityMessage = false;
        }
        vm.firstTimeUser = false;
        vm.showError = false;
        vm.autoRenewalClicked = false;

        //akamai city info
        vm.default_address = {};
        vm.user = {};
        vm.cart = {};
        vm.showSearchContent = false;
        vm.searchfound = false;
        vm.showdrop = false;
        vm.cartupdate = true;
        vm.availaible_slots = {};
        vm.leftmenu = {};
        vm.shops = {};
        vm.offers = {};
        vm.AreaList = [];
        vm.notifymethod = "E";
        vm.notifyMe = notifyMe;
        vm.currentAddress = "";
        vm.isB2BSite = $("#IS_B2B_SITE").val() === "True" ? true : false;
        vm.selectedAddressDefault = provideSelectedAddressIfOneNotPresent();
        vm.set_city_cart_check = set_city_cart_check;
        vm.newLoginFlow = window.NEW_LOGIN_FLOW;
        vm.nuepassRedirection =nuepassRedirection;
        vm.showConsentPopUp= showConsentPopUp;
        vm.VerifyAgeClose = VerifyAgeClose;
        // vm.aggredClicked = aggredClicked;
        $rootScope.member_stores = {};
        $rootScope.cart_no_items = 0;
        $rootScope.ismember = false;
        $rootScope.csrf = $.cookie("csrftoken");
        var sortcitybyname = R.sortBy(R.compose(R.toLower, R.prop("name")));
        vm.selectedlocation = {
            city: sortcitybyname[0],
            area: ""
        };
        vm.neuPassflag=false;
        vm.bb_star_membership_info={url:"",name:""}
        var $lastActiveRow = [];
        vm.readyToShow = false;
        vm.show_cart_change_popup = show_cart_change_popup_mw;
        vm.showOrderAssistant = false;
        vm.countForTobaccoConnection=1;
        $(".top-header").removeClass("dispNone");
        $(".clear-search").removeClass("dispNone");
        vm.tobacooFlag=null

       

        function VerifyAgeClose(){
            alert("close pop-up")
            vm.tobacooFlag=""
        }
       
         
     
        if (window.OA_WIDGET) {
            $window.addEventListener("load", function() {
                vm.showOrderAssistant =
                    window.location.pathname == "/" &&
                    !(sessionStorage.getItem("orderAssistant") == "hide");
                checkScroll();
                if (vm.showOrderAssistant) {
                    angular.element($window).bind("scroll", function(e) {
                        checkScroll();
                    });
                }
                $scope.$apply();
            });
        }
        function getCookie(cname) {
            var name = cname + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(";");
            for (var i = 0; i < ca.length; i++) {
              var c = ca[i];
              while (c.charAt(0) == " ") {
                c = c.substring(1);
              }
              if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
              }
            }
            return "";
          };

        if(window.localStorage.getItem('GRCall')!=true && getCookie("_bb_mid")!="" && getCookie("_bb_mid")!=undefined){
            var X_Channel=""                         
            if(getCookie("X-Channel")){
                 X_Channel = getCookie("X-Channel") 
            }
            else{
              X_Channel = getCookie("PWA") === "1" ? "BB-PWA" : "BB-WEB"
            }
            var headers={
                "X-Channel": X_Channel,
                "X-TCP-TOKEN":localStorage.getItem("access_token")
            }
            fetch('/member-tdl/v3/member/gr-member', {
                method: 'GET',
                headers:headers
                })
                .then((result) => result.json())
                //Then with the data from the response in JSON...
                .then((res) => {
                    localStorage.setItem("GRCall",res.isNeuPass)
                })
                //Then with the error genereted...
                .catch((error) => {
                console.error('Error:', error);
                });
        }
        function checkScroll() {
            var temp = vm.hideOnscroll;
            if ($window.scrollY > $window.innerHeight * 2)
                vm.hideOnscroll = false;
            else vm.hideOnscroll = true;
            if (temp != vm.hideOnscroll) $scope.$apply();
        }

        function show_cart_change_popup_mw(city_id, addr_id) {
            $(".dropbtn").removeClass("dropdown-active");
            $(document).trigger("addressInteractionPlower", [
                { 
                    EventName: "ChangeAddress_MessageDisplay"
                }
            ]);
            window.show_cart_change_popup(city_id, addr_id);
        }

        function set_city_cart_check(adr) {
            vm.deliveryaddress = {
                address: adr
            };
            UserDataservice.getCartDifference(adr.city_id, adr.id).then(
                function(qcdata) {
                    vm.deliveryaddress.addresschangeqc = qcdata;
                    $(document).trigger("addressInteractionPlower", [
                        {
                            EventName: "ChangeAddress_MessageDisplay"
                        }
                    ]);
                    if( vm.user.currentAddress.nick === "alcohol_delivery"){
                        $(".dropdown-menu1, .overlay-dropdown").hide();
                        $(".dropbtn").removeClass("dropdown-active");
                        $("#transitionModal").modal();
                    }
                    else if (vm.deliveryaddress.addresschangeqc || !vm.newPopup) {
                        $(".dropdown-menu1, .overlay-dropdown").hide();
                        $(".dropbtn").removeClass("dropdown-active");
                        $("#uiv2-multicity-change").show();
                        $("#shoplist-mask").fadeIn();
                    } else {
                        $("body").removeClass("pos-fixed");
                        $(".dropdown-menu1").hide();
                        $(".dropbtn").removeClass("dropdown-active");
                        $(".top-header").removeClass("locpops");
                        $(".middle-header").css("top", "0px");
                        $("#pageLoader").show();
                        $(".basket-loader").css("display", "block");
                        vm.setdeliveryArea();
                    }
                }
            );
        }

        function getMemberDetails() {
            "use strict";
            return UserDataservice.getMember().then(function(member) {
                vm.user.memberinfo = member.memberinfo;
            });
        }

        function objectToQueryString(obj) {
            var str = [];
            for (var p in obj)
              if (obj.hasOwnProperty(p)) {
                str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
              }
            return str.join("&");
          }

        function nuepassRedirection(){
            var limit=vm.bb_star_membership_info.url.bbstar_page_display_count||0;
            var count = window && window.localStorage && localStorage.getItem('neupass_onboarding_display_count')||0;
              var redirectionUrl=parseInt(count)>=limit && vm.bb_star_membership_info.url.neupass_url !=""?vm.bb_star_membership_info.url.neupass_url:vm.bb_star_membership_info.url.url;
              window && window.localStorage && parseInt(localStorage.setItem('neupass_onboarding_display_count',parseInt(count)||0)+1);
              if(!redirectionUrl.includes("bbstar") && redirectionUrl!=""){
                var params= {
                    "redirect_url":redirectionUrl,
                    "redirect_client_id": "TCP-WEB-APP"
                  }
                  var csurftoken = $cookies.get('csurftoken');
                    if (csurftoken) {
                        var headers = {"x-csurftoken" : csurftoken,
                        "X-Channel":"BB-WEB",
                        "Content-Type": "application/json"};
                    } 
                    var queryString=objectToQueryString(vm.bb_star_membership_info && vm.bb_star_membership_info.neupass_query_params);

                  fetch('/member-tdl/v3/member/reverse-sso', {
                    method: 'POST',
                    headers:headers,
                    body: JSON.stringify(params),
                    })
                    .then((result) => result.json())
                    //Then with the data from the response in JSON...
                    .then((res) => {
                        if (res &&  res.code_verifier) {
                            window.location.href=redirectionUrl+"?codeVerifier="+res.code_verifier+"&authCode="+res.auth_code+"&"+queryString
                        }
                    })
                    //Then with the error genereted...
                    .catch((error) => {
                    console.error('Error:', error);
                    });
              }
              else{
                window.location.href=redirectionUrl;
              }
            }

        function showConsentPopUp(){
           var popUpDiv= document.getElementById('Tobacoo')
           popUpDiv.style.display = "block";
           var shoplistMask= document.getElementById('shoplist-mask')
           shoplistMask.style.display = "block";
        }  

        vm.gotosubcategory = function(cat) {
            window.location.href = cat.url;
        };

        vm.getNumberOfCartItems = function() {
            vm.user.cart_no_items = UserDataservice.getCartLength()
                ? UserDataservice.getCartLength()
                : vm.user.cart_no_items;
        };

        vm.siteMessageAvaiable = function(siteMessage) {
            vm.siteMessage = siteMessage;
            $("#site_msg_label").text(siteMessage);
            $("#site_msg").show();
            return 1;
        };

        function getURLParameter(name) {
            return (
                decodeURIComponent(
                    (new RegExp(
                        "[?|&]" + name + "=" + "([^&;]+?)(&|#|;|$)"
                    ).exec(location.search) || [null, ""])[1].replace(
                        /\+/g,
                        "%20"
                    )
                ) || null
            );
        }
        
        
        vm.bbstarAutoRenewalPopupViewed = function(){
            vm.autoRenewalClicked = true;
            $('#bbstarAutoRenewalReminder').modal('hide');
        }

        function getPageInfo() {
            "use strict";
            HeaderDataservice.getPageInfo().then(function(data) {
                vm.member_done = true;
                if(window.location.pathname == '/'){
                    vm.isHomePage = true;
                    if (data.special_notifications) {
                        if(data.special_notifications.length > 0){

                            for(var prop in data.special_notifications){
                                if(data.special_notifications[prop].special_notification_type === "bbstar_expiry"){
                                    data.special_notifications[prop].member_name = data.member_info.first_name;
                                    vm.specialnotification = data.special_notifications[prop];
                                    if(vm.specialnotification.show_popup){
                                            
                                        $('#bbstarAutoRenewalReminder').modal();
                                        $('#bbstarAutoRenewalReminder').on('hidden.bs.modal', function (e) {
                                            HeaderDataservice.bbstarAutoRenewalPopupViewed()
                                            .then(function(data) {
                                                if(vm.autoRenewalClicked){
                                                    window.location.href="/bbstar-renewal/";
                                                }
                                            })
                                            .catch(function(err) {
                                                // console.log(err);
                                            })
                                        })
                                        
                                    }
                                    
                                }
                            }

                        }
                    }                    
                }else{
                    vm.isHomePage = false;
                }
                
                if(data.selected_address.is_partial == false) {
                    if(data.selected_address.address_1)
                        vm.currentAddress = vm.currentAddress + data.selected_address.address_1 + ", ";
                    if(data.selected_address.residential_complex)
                        vm.currentAddress = vm.currentAddress + data.selected_address.residential_complex + ", ";
                    if(data.selected_address.address_2)
                    vm.currentAddress = vm.currentAddress + data.selected_address.address_2 + ", ";
                    vm.currentAddress = vm.currentAddress + data.selected_address.area + ", ";
                    vm.currentAddress = vm.currentAddress + data.selected_address.city_name + " - ";
                    vm.currentAddress = vm.currentAddress + data.selected_address.pin;
                    $("#tokenWidgetPopup__addr").text(vm.currentAddress);
                }
                
                $rootScope.is_5k = (data.selected_address) ? data.selected_address.is_5k: false;
                //getShops();
                $rootScope.member_stores = data.member_stores;
                $rootScope.express_closed = "BB EXPRESS"
                $rootScope.is_express_availaible = checkForExpressStore(data.member_stores);

                $rootScope.$broadcast("PAGE_DATA_LOADED", {});
                if (window.foo){
                    foo.emit('PAGE_DATA_LOADED', data.member_stores);
                    window.member_stores = data.member_stores;
                }

                $rootScope.useNodeCart = data.USE_NODE_CART_SERVICE;
                vm.current_city = data.current_city;
                vm.selectedAddressDefault.city_id = vm.current_city.id;
                vm.selectedAddressDefault.city_name = vm.current_city.name;
                if (data.site_message) {
                    vm.siteMessageAvaiable(data.site_message);
                    $("#site_msg_label").text(data.site_message);
                    $("#site_msg").show();
                }
                vm.address_city_name =
                    data.selected_address === undefined
                        ? vm.selectedAddressDefault.city_name
                        : data.selected_address.city_name;
                vm.address_city_id =
                    data.selected_address === undefined
                        ? vm.selectedAddressDefault.city_id
                        : data.selected_address.city_id;
                vm.user.currentAddress =
                    data.selected_address === undefined
                        ? vm.selectedAddressDefault
                        : data.selected_address;
                if (
                    vm.user.currentAddress.residential_complex &&
                    vm.user.currentAddress.residential_complex.length > 0
                ) {
                    vm.user.currentAddress.address_display_name =
                        vm.user.currentAddress.residential_complex +
                        "," +
                        vm.user.currentAddress.area;
                }

                //adding city to GTM
                if (window.dataLayer) {
                    dataLayer.push({
                        city: vm.address_city_name
                    });
                }

                vm.user.currentAddress.city_support_number =
                    data.city_support_number;
                vm.user.cart_no_items = $window.CART;
                $rootScope.cart_no_items = vm.user.cart_no_items;
                vm.offerFlowEnabled = data.OFFERS_FLOW_ENABLED;
                $("#totalNumberOfCartItems").html(
                    vm.user.cart_no_items + " items"
                );
                $("#mobiletotalNumberOfCartItems").html(vm.user.cart_no_items);
                vm.user.is_member = data.is_member;
                if (!data.selected_address) {
                    vm.selectedlocation.cityquery = "";
                } else {
                    vm.selectedlocation.cityquery = vm.address_city_name;
                }

                $rootScope.has_speciality = data.has_speciality;
                vm.all_cities = sortcitybyname(data.all_cities_choices);
                vm.selectedlocation.city = {
                    name: vm.address_city_name,
                    value: vm.address_city_id,
                    id: vm.address_city_id
                };
                vm.kapture_chat = data.kapture_chat;
                vm.cityselected = true;
                //this code will initialize select box
                vm.selectedlocation.area = "";
                vm.headerBanner = data.header_banner;
                vm.searchPlaceholder = data.search_label;
                vm.show_my_membership_link = data.show_my_membership_link;
                vm.is_loyal = data.is_loyal;
                vm.show_priority_slot_msg = data.show_priority_slot_msg;
                vm.is_active_bb_star_member = data.is_active_bb_star_member;
                //-------neupass bbstar changes start--------//
                if(data.bb_star_membership_info!= undefined){
                    if(data.bb_star_membership_info.is_neupass_pilot){ // neupass then dont show
                      if(data.bb_star_membership_info.url){
                        vm.bb_star_membership_info ={url:data.bb_star_membership_info,
                            name:data.bb_star_membership_info.title
                            
                        }
                        vm.neuPassflag=true;
                  }
                    }
                    if(!(data && data.bb_star_membership_info && data.bb_star_membership_info.is_neupass_pilot)){
                      let count = window && window.localStorage && localStorage.getItem('neupass_onboarding_display_count')|| data.bb_star_membership_info.bbstar_page_display_count;
                      vm.bb_star_membership_info ={
                          url:data.bb_star_membership_info,

                        name:data.bb_star_membership_info.title
                    }
                    vm.neuPassflag=true;
                  }
                  }
                //-------neupass bbstar changes end--------//




                vm.giftingMsg = data.gifting_msg;
                //Akmai based city info - Executes when the User has partial address after Login

                if (loggedInUser == true) {
                    if (
                        data.selected_address.is_partial == true &&
                        $rootScope.cart_no_items > 0
                    ) {
                        //Change this
                        $timeout(function() {
                            vm.cityMessage = false;
                            $(document).trigger("addressInteractionPlower", [
                                {
                                    EventName:
                                        "Login_PartialAddressPopUp_Shown",
                                    Location:
                                        vm.user.currentAddress.city_name +
                                        "|" +
                                        vm.user.currentAddress.area,
                                    AdditionalInfo2: $.cookie("_bb_locSrc")
                                }
                            ]);
                            vm.locdropdown();
                        }, 0);
                    } else {
                        $timeout(function() {
                            vm.cityMessage = false;
                            $.removeCookie("_bb_ftvid", {
                                path: "/",
                                domain: window.location.host.replace("www", "")
                            });
                            $.removeCookie("_bb_locSrc", {
                                path: "/",
                                domain: window.location.host.replace("www", "")
                            });
                        }, 0);
                    }
                }

                if ($.cookie("_bb_mid")) {
                    vm.cityMessage = false;
                    $.removeCookie("_bb_locSrc", {
                        path: "/",
                        domain: window.location.host.replace("www", "")
                    });
                }

                setCityMessageForGifting();
                //Akmai based city info - Executes when the User has partial address after Login

                vm.hp_sections = {};
                vm.hp_sections.section1 = data.hp_sec1_banner;
                var is_pg = getURLParameter("pg");
                if (vm.headerBanner != null) {
                    vm.headerBanner["Image name"] =
                        MEDIA_URL + vm.headerBanner["Image name"];
                }
                if (
                    vm.searchPlaceholder != null ||
                    vm.searchPlaceholder != undefined
                ) {
                    vm.searchPlaceholder =
                        vm.searchPlaceholder["Banner Text"]["caption1"];
                } else {
                    vm.searchPlaceholder = "Search for Products..";
                }

                if (data.has_speciality) {
                    vm.has_speciality = data.has_speciality;
                }
                if (vm.user.is_member) {
                    vm.user.memberinfo = data.member_info;
                    vm.user.other_address = false;
                    $rootScope.ismember = true;
                    if (
                        data.top_nav_addresses &&
                        !R.isEmpty(data.top_nav_addresses)
                    ) {

                        vm.user.other_address = data.top_nav_addresses.filter(function(address) {
                            return address.nick !== "alcohol_delivery";
                        });
                    }
                    if (
                        window.location.href.indexOf(
                            "choose-city/?pg=1&next=/"
                        ) > -1
                    ) {
                        if (is_pg == 1) {
                            $scope.$$postDigest(function() {
                                vm.locationMWDropdown();
                            });
                        }
                    }
                    if (window.dataLayer) {
                        dataLayer.push({
                            noo: vm.user.memberinfo.noo,
                            dolo: vm.user.memberinfo.dolo,
                            dofo: vm.user.memberinfo.dofo
                        });
                    }
                }
                var availaible_slots = [
                    {
                        type: "Express",
                        slot: data.express_closed_5k
                            ? "Express Delivery: (Slots Full)"
                            : data.darkstore_next_slot,
                        img: USED_STATIC_URL + "img/express-del.svg"
                    },
                    {
                        type: "Standard",
                        slot: data.express_closed_5k
                            ? data.darkstore_next_slot
                            : data.normal_next_slot,
                        img: USED_STATIC_URL + "img/standard-del.svg"
                    },
                    {
                        type: "Express",
                        slot: data.express_next_slot,
                        img: USED_STATIC_URL + "img/express-del.svg"
                    }
                ];
                availaible_slots = R.filter(function(avslot) {
                    if (avslot.slot) {
                        return avslot.slot.length > 0 ? true : false;
                    } else {
                        return false;
                    }
                }, availaible_slots);
                vm.availaible_slots =
                    availaible_slots.length > 0 ? availaible_slots : null;

                angular.forEach(vm.availaible_slots, function(slot, index) {
                    vm.availaible_slots[index].slot = vm.format_slot(
                        vm.availaible_slots[index].slot
                    );
                });

                if (data.selected_address === undefined) {
                    $("#main_menu_icon").removeAttr("onclick");
                    $(".cart-image").removeAttr("href");
                    $(".mw-bb-logo").removeAttr("href");
                    $(
                        "#main_menu_icon, .user-mw-drop, .mw-bb-logo, .cart-image, .mask"
                    ).click(function() {
                        $(".dropdown-menu").effect(
                            "shake",
                            {
                                times: 1
                            },
                            {
                                distance: 5
                            },
                            300
                        );
                    });

                    var is_mobile = mobileChannelCheck();
                    if (is_mobile == true) {
                        vm.locationMWDropdown();
                    } else {
                        //                        vm.locationChangeDropdown();
                    }
                }
                if (!vm.user.is_member) {
                    if (
                        window.location.href.indexOf(
                            "choose-city/?pg=1&next=/"
                        ) > -1
                    ) {
                        if (is_pg == 1) {
                            $scope.$$postDigest(function() {
                                vm.locationMWDropdown();
                            });
                        }
                    }
                }

                for (var i = 0; i < vm.all_cities.length; i++) {
                    data = vm.all_cities[i];
                    data.label = vm.all_cities[i].name;
                    data.value = vm.all_cities[i].name;
                    data.id = vm.all_cities[i].id;
                    jqueryAutoSelectCityArray.push(data);
                }
            });
        }

        function mobileChannelCheck() {
            (function(a) {
                if (
                    /(android|ipad|playbook|silk|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(
                        a
                    ) ||
                    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                        a.substr(0, 4)
                    )
                )
                    return true;
            })(navigator.userAgent || navigator.vendor || window.opera);
            return false;
        }

        function notifyMe() {
            if (vm.user.is_member) {
                UserDataservice.sendStockNotification(
                    "B",
                    vm.outofstockproduct
                ).then(function(status) {
                    if (status) {
                        toastr.success(
                            "",
                            "You will be notified via Email, SMS/Push Notification when the product is available",
                            {
                                timeOut: 5000,
                                positionClass: "toast-top-full-width",
                                closeButton: true,
                                preventDuplicates: true
                            }
                        );
                    }
                });
            } else {
                window.location.href = "/auth/login/?nc=nb";
            }
        }
        $rootScope.$on("Notify", function(scope, pid) {
            "use strict";
            vm.outofstockproduct = pid;
            //Check if any comboModal_<sectionID> exists and close if open
            if ($("div[id*='comboModal']") != null) {
                $("div[id*='comboModal']").modal("hide");
            }
            vm.notifyMe();
        });

        function provideSelectedAddressIfOneNotPresent() {
            "use strict";

            return {
                residential_complex: " ",
                isdummy: true,
                nick: " ",
                first_name: " ",
                last_name: " ",
                is_partial: false,
                pin: 560001,
                area: " ",
                city_id: 0,
                contact_area: "",
                contact_no: "",
                landmark: "",
                address_display_name: "M.G Road   ",
                city_name: "",
                address_1: "",
                address_2: "",
                lat: 12.919697509246365,
                lng: 77.57679894536898,
                nickname: "",
                id: "",
                is_express: true
            };
        }

        function checkForExpressStore(memberStores){
            var status = false;
            for (var key in memberStores){
                if(memberStores[key]["show_express"]){
                    status = true;
                    break;
                }
            }
            return status;
        }

        function getShops() {
            "use strict";
            return HeaderDataservice.getShops().then(function(data) {
                vm.shops = data.shops;

                vm.express_shops = R.filter(function(shop) {
                    return shop.is_express == 1 ? true : false;
                }, vm.shops);

                vm.shops = R.filter(function(shop) {
                    return shop.is_express == 0 ? true : false;
                }, vm.shops);

                vm.offers = data.offers;

                // if(vm.express_shops.length > 0){
                //    $rootScope.is_express_availaible = true;
                // }
                //
                // if(data.express_closed){
                //     $rootScope.is_express_availaible = true;
                //     $rootScope.express_closed = "BB EXPRESS (SLOTS FULL)";
                // } else if ($rootScope.is_express_availaible) {
                //     $rootScope.express_closed = "BB EXPRESS";
                // }


                vm.mainMenuEntryShop1 = data.main_menu_banner1;
                if (vm.mainMenuEntryShop1 != null) {
                    vm.mainMenuEntryShop1["Image name"] =
                        MEDIA_URL + vm.mainMenuEntryShop1["Image name"];
                }
            });
        }

        function activate() {
            var memberPromises = [],
                headerPromises = [];
            if (PAGE_TYPE != undefined && PAGE_TYPE === "hpcp") {
                headerPromises = [getPageInfo(), getMenu()];
            } else {
                headerPromises = [getPageInfo()];
            }
            HeaderDataservice.ready(headerPromises).then(function() {
                "use strict";
                $("#pageLoader").hide();
            });

            //The code below is for static versionin
            vm.VERSIONED_STATIC = VERSIONED_STATIC == "True" ? true : false;
            vm.STATIC_URL = STATIC_URL;
            vm.VERSION = VERSION;
            vm.MEDIA_URL = MEDIA_URL;
            vm.USE_NODE = USE_NODE;
            vm.BBPLUS_ENABLED = false;
            if (typeof CUSTOMER_SELF_SERVICE_WEB_DISABLED !== "undefined") {
                vm.CUSTOMER_SELF_SERVICE_WEB_DISABLED = CUSTOMER_SELF_SERVICE_WEB_DISABLED;
            }
            vm.MEMBER_REFERAL_ACTIVE = false;
            //This variable is used during change location post call
            vm.currenturl = window.location.pathname + window.location.search;
            var nexturl = window.location.search.match(/next=(.*)/);
            if (nexturl && nexturl.length > 1) {
                vm.currenturl = encodeURIComponent(nexturl[1]);
            } else {
                vm.currenturl = "/";
            }

            setCityMessageForGifting();
        } //end of activate

        vm.showDropdown = function() {
            vm.showdrop = true;
        };

        //**********Search bar Controls begins **************

        var isObject = function(obj) {
            return R.is(Object, obj);
        };

        var setAutosearchQuantity = function(obj) {
            obj.qty = 1;
        };

        var setCityMessageForGifting = function() {
            if (window.location.pathname == "/gifting/") {
                vm.currenturl = "/gifting/";
                vm.cityMessage = true;
            }
        };

        vm.validate_cookie = function() {
            if ($.cookie("_bb_vid") == undefined) {
                window.location.href = "/";
                return false;
            } else {
                return true;
            }
        };

        vm.searchProducts = function() {
            "use strict";
            vm.noRes = "No results found for ";
            var is_cookie = vm.validate_cookie();
            if (is_cookie) {
                if (vm.searchPhrase.length >= 3) {
                    vm.showSearchContent = true;

                    HeaderDataservice.searchProducts(
                        vm.searchPhrase,
                        vm.current_city.id,
                        ""
                    ).then(onSearchProductsComplete);
                } else if (vm.searchPhrase.length === 0) {
                    vm.showSearchContent = false;
                }

                function onSearchProductsComplete(response) {
                    vm.searchResults = response.results;
                    vm.searchResults.data = R.filter(
                        isObject,
                        vm.searchResults.data
                    );
                    if (vm.searchResults.data.length === 0) {
                        vm.searchfound = false;
                    } else {
                        vm.searchfound = true;
                        angular.forEach(
                            vm.searchResults.data,
                            setAutosearchQuantity
                        );
                        if (R.isEmpty(vm.searchResults.suggestions.ads)) {
                            vm.searchResults.suggestions.ads = false;
                        }
                        if (R.isNil(vm.searchResults.suggestions.discounts)) {
                            vm.searchResults.suggestions.discounts = false;
                        } else {
                            vm.searchResults.suggestions.discounts.pid =
                                vm.searchResults.suggestions.discounts.id;
                            vm.searchResults.suggestions.discounts.text =
                                vm.searchResults.suggestions.discounts.description;
                            setAutosearchQuantity(
                                vm.searchResults.suggestions.discounts
                            );
                        }
                    }
                    vm.showSearchContent = true;
                }
            }
        };

        vm.addProductsFromSearch = function(searchProduct) {
            if (isNaN(searchProduct.qty) || searchProduct.qty < 0) {
                toastr.error("Invalid Quantity", "Add To Basket", {
                    timeOut: 5000,
                    positionClass: "toast-top-full-width",
                    closeButton: true,
                    preventDuplicates: true,
                    preventOpenDuplicates: true
                });
            } else {
                UserDataservice.updateBasket(
                    searchProduct.pid,
                    searchProduct.qty,
                    "",
                    vm.searchPhrase
                ).then(function(status) {
                    if (status) {
                        toastr.success(
                            "",
                            "Successfully added " +
                                searchProduct.text +
                                " to the basket",
                            {
                                timeOut: 500,
                                positionClass: "toast-top-full-width",
                                closeButton: true,
                                preventDuplicates: true
                            }
                        );
                        $rootScope.$broadcast("getCart", vm.selectedProduct);
                        $(document).trigger(
                            "basketInteractionsPlowerWithAngular",
                            [
                                {
                                    EventName: "Basket_Add",
                                    SkuID: searchProduct.pid,
                                    Quantity: searchProduct.qty,
                                    UnitMrp: searchProduct.price,
                                    UnitSalePrice: searchProduct.price,
                                    ScreenInPageContext: "auto-search"
                                }
                            ]
                        );
                    }
                });
            }
        };

        vm.callBroadcastGetCart = function() {
            "use strict";
            $rootScope.$broadcast("getCart", {});
        };

        vm.clearSearch = function() {
            vm.searchResults = null;
            vm.showSearchContent = false;
        };
        vm.clearSearches = function() {
            vm.searchResults = null;
            vm.showSearchContent = false;
            vm.searchPhrase = "";
        };

        vm.canShowSearchSuggestions = function() {
            if (vm.searchResults && vm.searchResults.suggestions) {
                if (
                    vm.searchResults.suggestions.ads ||
                    vm.searchResults.suggestions.terms.length > 0 ||
                    vm.searchResults.suggestions.brands.length > 0 ||
                    vm.searchResults.suggestions.categories.length > 0
                ) {
                    return true;
                }
            }

            return false;
        };

        vm.userManualSearch = function() {
            if (vm.searchPhrase && vm.searchPhrase.length > 0) {
                $(document).trigger("screenViewReferralsEvent", [{}]);
                window.location.href = "/ps/?q=" + encodeURIComponent(vm.searchPhrase);
            }
        };

        function debounce(func, wait, immediate){
            var timeout;
            return function() {
                var context = this, args = arguments;
                var later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

        vm.debouncedsearchProducts = debounce(function() {
            vm.searchProducts();
        }, 250);

        //**********Search bar Controls Ends **************

        //**********Left Menu Controls begins **************



        function getMenu() {
            "use strict";
            HeaderDataservice.getLeftMenu().then(function(response) {
                var data = response;
                vm.leftmenu = data["topcats"];
                vm.viewAllBanner = data["viewallbanner"];
                if (vm.viewAllBanner) {
                    vm.viewAllBanner = vm.viewAllBanner[0];
                }
                vm.showSubmenu(vm.leftmenu[0]);

                //this code tries to fecth subcategories for each of top level categories
                var submenupromises = [];
                angular.forEach(vm.leftmenu, function(topcategory, catindex) {
                    submenupromises.push(
                        getMenuSubcategory(topcategory, catindex)
                    );
                    if (topcategory.top_category.nav_banner) {
                        topcategory.top_category.nav_banner.banners =
                            topcategory.top_category.nav_banner.banners[0];

                        topcategory.top_category.nav_banner.banners.image = {
                            background:
                                "url(" +
                                "'" +
                                vm.MEDIA_URL +
                                topcategory.top_category.nav_banner.banners
                                    .image +
                                "'" +
                                ")",
                            height: "400px",
                            "background-repeat": "no-repeat",
                            "background-position": "right"
                        };
                    }
                });
                vm.showSubmenu(vm.leftmenu[0]);
                setTimeout(function() {
                    $("#navBarMegaNav").menuAim({
                        activate: activateSubmenu, // fired on row activation
                        deactivate: deactivateSubmenu, // fired on row deactivation
                        submenuDirection: "right"
                    });
                    $("#navBarSticky").menuAim({
                        activate: activateSubmenu, // fired on row activation
                        deactivate: deactivateSubmenu, // fired on row deactivation
                        submenuDirection: "right"
                    });
                }, 3000);
            });
        }

        var angularElm = angular.element(
            document.getElementById("headerControllerId")
        );

        function activateSubmenu(row) {
            var $row = $(row);
            $lastActiveRow = row;
            angularElm
                .scope()
                .vm.menuHoverFixCallingshowSubmenu($row.data("l2"));
            var submenuId = $row.data("submenuId"),
                $submenu = $("#" + submenuId),
                height = $($row)
                    .parent()
                    .outerHeight(); //$menu.outerHeight(),
            width = $($row)
                .parent()
                .outerWidth(); //$menu.outerWidth();

            // Show the submenu
            $submenu.css({
                display: "block",
                top: -1,
                left: width - 3, // main should overlay submenu
                height: height - 4 // padding for main dropdown's arrow
            });

            // Keep the currently activated row's highlighted look
            $row.find("a").addClass("active");
        }

        function activateClearSubmenu(row) {
            var $row = $(row);
            var submenuId = $row.data("submenuId"),
                $submenu = $("#" + submenuId),
                height = $($row)
                    .parent()
                    .outerHeight(); //$menu.outerHeight(),
            width = $($row)
                .parent()
                .outerWidth(); //$menu.outerWidth();

            // Show the submenu
            $submenu.css({
                display: "block",
                top: -1,
                left: width - 3, // main should overlay submenu
                height: height - 4 // padding for main dropdown's arrow
            });

            // Keep the currently activated row's highlighted look
            $row.find("a").addClass("active");
        }

        function deactivateSubmenu(row) {
            var $row = $(row),
                submenuId = $row.data("submenuId"),
                $submenu = $("#" + submenuId);
            // Hide the submenu and remove the row's highlighted look
            $submenu.css("display", "none");
            $row.find("a").removeClass("active");
        }

        //This method accepts a top category id to fectch all subcategory data
        function getMenuSubcategory(topcategory, categoryindex) {
            "use strict";
            var subcatinfo = categoryReceived(topcategory.sub_cats);
            topcategory.subcategories = subcatinfo;
            topcategory.subcategories.chunks = {
                chunk1: subcatinfo[0]
            };

            if (subcatinfo.length > 1) {
                topcategory.subcategories.chunks.chunk2 = subcatinfo[1];
                if (subcatinfo[1].length > 9) {
                    topcategory.subcategories.chunks.chunk2 = subcatinfo[1].splice(
                        0,
                        9
                    );
                    topcategory.subcategories.chunks.showmore = true;
                }
            }

            //return HeaderDataservice.getSubcategory(topcategory.top_category.id).then(processCategoryComplete);
        }

        function categoryReceived(sub_cats) {
            var chunks = [];
            if (sub_cats) {
                var chunkdata = null;
                angular.forEach(sub_cats, function(chunk) {
                    var chunkdata = [];
                    angular.forEach(chunk, function(subcat) {
                        var processedsubcat = {
                            name: subcat.sub_category[0],
                            slug: subcat.sub_category[1],
                            url: subcat.sub_category[2]
                        };
                        processedsubcat.search_term = subcat.search_term;
                        if (subcat.l2_banner) {
                            var formated_banners = {};
                            formated_banners.type = subcat.l2_banner.type;
                            angular.forEach(subcat.l2_banner.banners, function(
                                subcatbanner
                            ) {
                                formated_banners[
                                    subcatbanner.display_name
                                ] = subcatbanner;
                            });
                            processedsubcat.banner = formated_banners;
                        }
                        processedsubcat.options = null;
                        if (subcat.cats && subcat.cats.length > 0) {
                            processedsubcat.options = [];
                            angular.forEach(subcat.cats, function(option) {
                                var optiondata = {
                                    name: option.cat[0],
                                    slug: option.cat[1],
                                    url: option.cat[2]
                                };
                                processedsubcat.options.push(optiondata);
                            });
                        }
                        chunkdata.push(processedsubcat);
                    });

                    if (chunkdata) {
                        chunks.push(chunkdata);
                    }
                });
            }
            return chunks;
        }

        vm.showL2Category = function(l2cat) {
            //The template in leftmeny L2 is bound to this variable
            vm.selectedl2 = l2cat;
        };

        vm.showSubmenu = function(topcat) {
            //The template in leftmen topcategory is bound to this variable
            vm.selectedtop = topcat;
            if (vm.selectedtop.subcategories) {
                vm.showL2Category(
                    vm.selectedtop.subcategories.chunks.chunk1[0]
                );
            }
        };

        vm.selectmenubanner = function() {
            window.location.href =
                vm.selectedtop.top_category.nav_banner.banners.url;
        };

        //This method just resets the menu model to first category
        vm.clearMenu = function() {
            vm.viewall = false;
            vm.showSubmenu(vm.leftmenu[0]);
            activateClearSubmenu([$("#navBarMegaNav li")[0]]);
            activateClearSubmenu([$("#navBarSticky li")[0]]);
            deactivateSubmenu($lastActiveRow);
        };

        vm.menuHoverFixCallingshowSubmenu = function(indexPosition) {
            "use strict";
            if (indexPosition !== undefined) {
                vm.showSubmenu(vm.leftmenu[indexPosition]);
                $scope.$apply();
            }
        };

        //TODO need to come up with a better approach
        vm.offcanvasToggle = function(subcatid) {
            var l2cat = $("#offsubmenu" + subcatid);
            l2cat.find("ul").slideToggle();
            l2cat.find("i").toggleClass("fa-plus fa-minus");
        };

        //**********Left Menu Controls ends **************

        //***Area auto complete******

        vm.changeLocation = function() {
            vm.showdrop = false;
        };

        vm.chooseCity = function(city) {
            vm.selectedlocation.city = city.id;
        };

        vm.skipandexplore = function(city_id) {
            if (!city_id) {
                if (
                    !vm.cityselected ||
                    !vm.selectedlocation.cityquery ||
                    vm.selectedlocation.cityquery.length === 0
                ) {
                    vm.selectedlocation.city = {
                        name: vm.current_city.name,
                        value: vm.current_city.id,
                        id: vm.current_city.id
                    };
                }
                if (
                    vm.selectedlocation.cityquery !==
                    vm.selectedlocation.city.name
                ) {
                    vm.selectedlocation.city = R.find(
                        R.propEq("name", vm.selectedlocation.cityquery)
                    )(vm.all_cities);
                }
                $(document).trigger("addressInteractionPlower", [
                    {
                        EventName: "SkipExplore_Clicked",
                        Location: vm.selectedlocation.city.name,
                        AdditionalInfo2: $.cookie("_bb_locSrc")
                    }
                ]);
                $.removeCookie("_bb_locSrc", {
                    path: "/",
                    domain: window.location.host.replace("www", "")
                });
                window.location.href =
                    "/skip_explore/?c=" +
                    vm.selectedlocation.city.id +
                    "&l=0&s=0&n=" +
                    vm.currenturl;
            } else {
                window.location.href =
                    "/skip_explore/?c=" +
                    city_id +
                    "&l=0&s=0&n=" +
                    vm.currenturl;
            }
        };
        vm.continueClicked = function() {
            $(document).trigger("addressInteractionPlower", [
                {
                    EventName: "ChangeMyLocation_ContinueClicked",
                    Location:
                        vm.selectedlocation.cityquery +
                        "|" +
                        vm.selectedlocation.area.label,
                    AdditionalInfo2: $.cookie("_bb_locSrc")
                }
            ]);
            $.removeCookie("_bb_locSrc", {
                path: "/",
                domain: window.location.host.replace("www", "")
            });
            GAService.pushToGoogleAnalytics(
                "_trackEvent",
                "city-select",
                "change-city | Success",
                vm.user.currentAddress.city_name +
                    "|" +
                    vm.user.currentAddress.area,
                1
            );
        };

        function getParameterByName(name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return "";
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }
        //vm.getAreasForCity = function (value,callback) {
        //        vm.selectedlocation.query = value;
        //
        //        return HeaderDataservice.getAreasForCity(vm.selectedlocation.city.id, vm.selectedlocation.query).then(function (arealist) {
        //            vm.AreaList = arealist;
        //            if(callback){
        //            callback(vm.AreaList)
        //            }
        //            else{
        //                return vm.AreaList;
        //            }
        //
        //        });
        //        if (value.length === 1) {
        //            vm.selectedlocation.submit=false;
        //        }
        //
        //}
        vm.emptyCheck = function() {
            vm.showErrorMsg = "Sorry, we do not deliver in the selected location. Please try again.";
            if (!vm.selectedlocation.query) {
                vm.showError = false;
            }
        };

        vm.getAreasForCity = function(value, callback) {
            vm.selectedlocation.query = value;
            if (
                vm.selectedlocation.cityquery &&
                vm.selectedlocation.cityquery.length > 0 &&
                vm.selectedlocation.query &&
                R.find(R.propEq("name", vm.selectedlocation.cityquery))(
                    vm.all_cities
                )
            ) {
                return HeaderDataservice.getAreasForCity(
                    vm.selectedlocation.city.id,
                    vm.selectedlocation.query,
                    vm.USE_NODE
                ).then(function(arealist) {
                    vm.AreaList = arealist;
                    if (arealist.length === 0) {
                        vm.areaselected = false;
                        vm.showError = true;
                    }
                    if (callback) {
                        callback(arealist);
                    } else {
                        return arealist.map(function(item) {
                            if (item.display_name === item.pincode) {
                                item.label =
                                    item.display_name +
                                    " , " +
                                    vm.selectedlocation.city.name;
                            } else {
                                item.label =
                                    item.display_name +
                                    "-" +
                                    item.pincode +
                                    "," +
                                    vm.selectedlocation.city.name;
                            }

                            return item;
                        });
                    }
                });
            } else {
                vm.areaselected = false;
                vm.showError = true;
                return [];
            }
        };

        vm.isSkipnExplore = function() {
            if (vm.cityselected && vm.selectedlocation.cityquery) {
                if (vm.areaselected && vm.selectedlocation.query) {
                    return false;
                }
            }
            return true;
        };

        vm.onSelect = function($item) {
            var city = vm.selectedlocation.city;
            vm.selectedlocation.area = $item;
            vm.selectedlocation.submit = true;
            vm.areaselected = true;
            vm.showError = false;
        };

        vm.onSelectCity = function(selectdcity) {
            vm.selectedlocation.city = {
                id: selectdcity.id,
                name: selectdcity.name
            };
            vm.selectedlocation.cityquery = vm.selectedlocation.city.name;
            vm.citychanged();
            setTimeout(function() {
                $( "#areaselect" ).focus();
            },100)
            
        };
        vm.findOne= function(cond, addresses){
            var address;
            for (var i=0; i<addresses.length; i++){
                var matched= true;
                for (var key in cond){
                    if (addresses[i][key] !== cond[key]){
                        matched= false;
                        break;
                    }
                }
                if (matched){
                    address= addresses[i];
                    address.index= i;
                    break;
                }
            }
            return address;
        };
        vm.changeToDefaultAddress =  function () {
            var url= "/mapi/v3.5.1/address/list/?send_partial=0";
            $http.get(url)
                .then(function (response) {
                    _addresses= angular.copy(response.data.response.addresses||[]);
                    vm.default_address= vm.findOne({is_default: true}, _addresses);
                    vm.changeDeliveryAddress(vm.default_address,true);
                });
                
        }
        vm.changeDeliveryAddress = function(toadress,isHomePageBanner) {
            $(document).trigger("addressInteractionPlower", [
                {
                    EventName: "ChangeAddress_MessageDisplay"
                }
            ]);
            $("#left-menu-overlay").hide();
            vm.showdrop = false; //this variable is set to false to close the address selection dropdown.
            vm.deliveryaddress = {
                address: toadress
            };
            UserDataservice.getCartDifference(
                toadress.city_id,
                toadress.id
            ).then(function(qcdata) {
                vm.deliveryaddress.addresschangeqc = qcdata;
            });
            if(isHomePageBanner){
                vm.setdeliveryArea();
            }
            
        };

        vm.setdeliveryArea = function() {
            if (vm.newPopup) {
                $("#uiv2-multicity-change").hide();
                $(".basket-loader").css("display", "block");
                $(".overlay-dropdown").css("display", "block");
            }
            UserDataservice.setdelivertoArea(
                vm.deliveryaddress.address.city_id,
                vm.deliveryaddress.address.id
            ).then(function(success) {
                if (success) {
                    var itemsremovedonCityChange = [];
                    if (vm.deliveryaddress.addresschangeqc) {
                        for (
                            var i = 0;
                            i < vm.deliveryaddress.addresschangeqc.items.length;
                            i++
                        ) {
                            itemsremovedonCityChange.push(
                                "" +
                                    vm.deliveryaddress.addresschangeqc.items[i]
                                        .skuid
                            );
                        }
                    }

                    $(document).trigger("addressInteractionPlower", [
                        {
                            EventName: "ChangeAddress_Continue",
                            ItemsRemoved: itemsremovedonCityChange
                        }
                    ]);
                    window.location.reload();
                }
            });
        };

        vm.getslotsforaddress = function(address_list) {
            var latest_address_list = [];
            UserDataservice.getSlotsForAddress(
                R.map(function(address) {
                    return address.id;
                }, address_list)
            ).then(function(address_map_slots) {
                angular.forEach(address_list, function(address, index) {
                    if (address_map_slots && address_map_slots[address.id]) {
                        address.availaibleslots = address_map_slots[address.id];
                        angular.forEach(address.availaibleslots, function(
                            slot,
                            index
                        ) {
                            address.availaibleslots[
                                index
                            ].slot = vm.format_slot(
                                address.availaibleslots[index].slot
                            );
                            if (slot.bb_star_avail === 1) {
                                address.bb_star_avail = 1;
                            }
                        });
                        var ava_slots = address.availaibleslots;
                        if (
                            ava_slots.length == 2 &&
                            (ava_slots[0].bb_star_avail != 1 &&
                                ava_slots[1].bb_star_avail != 1)
                        ) {
                            address.bb_star_avail = 0;
                        } else if (
                            ava_slots.length == 1 &&
                            ava_slots[0].bb_star_avail != 1
                        ) {
                            address.bb_star_avail = 0;
                        }
                        latest_address_list.push(address);
                    }
                });
                vm.user.other_address = latest_address_list.filter(function(address) {
                    return address.nick !== "alcohol_delivery";
                });
            });
        };

        vm.citychanged = function() {
            vm.selectedlocation.query = "";
            vm.selectedlocation.submit = false;
            vm.cityselected = true;
        };

        vm.format_slot = function(slot) {
            // var format = slot.match(/:(.*)/)[1];
            var format = slot;
            format = format.replace("Standard Delivery:", '');
            format = format.replace("Express Delivery:", '');
            format = format.replace("By", "");
            format = format.replace("Next", "");
            format = format.replace(/AM.*to/, " -");
            format = format.replace(/PM.*to/, " -");
            return format;
        };
        vm.showuserdrop = function() {
            if (!vm.user.currentAddress.isdummy) {
                $(".mask").show();
                $(".dropbtn").removeClass("dropdown-active");
                $(".user-btn").addClass("dropdown-active");

                $(".mask").click(function() {
                    $(this).fadeOut();
                    $("body").removeClass("pos-fixed");
                    $(".user-btn").removeClass("dropdown-active");
                });
            }
        };

        //     mobile view city dropdown
        vm.locationMWDropdown = function() {
            $("#city-select").val(vm.user.currentAddress.city_name);
            vm.selectedlocation.query = "";
            var dropdown = $(".dropbtn");

            $(".user-btn").removeClass("dropdown-active");
            $(".dropbtn").addClass("dropdown-active");
            $("body").addClass("pos-fixed");
            $(".mask").fadeIn();

            // get slots for member address to display in this drop down menu (for static pages)
            if (
                $("dropbtn.xhrcalls-only").hasClass("dropdown-active") == true
            ) {
                if (vm.user.is_member && vm.user.other_address) {
                    // call the below method only if user is a member & it has other address
                    vm.getslotsforaddress(vm.user.other_address);
                }
            }

            if (!vm.user.currentAddress.isdummy) {
                $(".mask").click(function() {
                    $(this).fadeOut();
                    $("body").removeClass("pos-fixed");
                    dropdown.removeClass("dropdown-active");
                });
            }

            //For Area
            if (typeof jQuery("#area-select").autocomplete === "function") {
                jQuery("#area-select").autocomplete({
                    source: function(request, response) {
                        vm.getAreasForCity(vm.selectedlocation.query, function(
                            data
                        ) {
                            // assuming data is a JavaScript array such as
                            // ["one@abc.de", "onf@abc.de","ong@abc.de"]
                            // and not a string
                            formatted = [];
                            for (var i = 0; i < data.length; i++) {
                                if (data[i].display_name === data[i].pincode) {
                                    data[i].label =
                                        data[i].display_name +
                                        " , " +
                                        vm.selectedlocation.city.name;
                                } else {
                                    data[i].label =
                                        data[i].display_name +
                                        "-" +
                                        data[i].pincode +
                                        "," +
                                        vm.selectedlocation.city.name;
                                }

                                formatted.push(data[i]);
                            }
                            response(formatted);
                        });
                    },
                    select: function(event, ui) {
                        var angularElement = angular.element(
                            document.getElementById("headercontroller")
                        );
                        angularElement.scope().vm.onSelect(ui.item);
                        $scope.$digest();
                    },
                    minLength: 3
                });

                //For City
                jQuery("#city-select")
                    .autocomplete({
                        source: jqueryAutoSelectCityArray,
                        select: function(event, ui) {
                            var angularElement = angular.element(
                                document.getElementById("headercontroller")
                            );
                            angularElement.scope().vm.onSelectCity(ui.item);
                            $scope.$digest();
                            $("#area-select").focus();
                            if (vm.user.currentAddress.isdummy) {
                                vm.skipandexplore(ui.item.id);
                            }
                        },
                        minLength: 0
                    })
                    .focus(function() {
                        "use strict";
                        $("#city-select").val("");
                        $("#city-select").autocomplete(
                            "search",
                            $("#city-select").val()
                        );
                        vm.selectedlocation.query = "";
                    });
            }
        };
        vm.openAutoSearch = function() {
            $("#city-select").autocomplete("search", "");
        };
        $(".mask").click(function() {
            $("#city-select").autocomplete("close");
        });
        //        mobile view city dropdown end

        //   Static desktop view city dropdown
        //Akmai based city info - First time user will see a city message on top

        $(document).on("firstBasketAdd", function() {
            $timeout(function() {
                vm.firstTimeUser = true;
                vm.dont_send_changemylocation_event = true;
                vm.locationChangeDropdown();
                $(document).trigger("addressInteractionPlower", [
                    {
                        EventName: "AddToCart_AddressPopUp_Shown",
                        Location:
                            vm.user.currentAddress.city_name +
                            "|" +
                            vm.user.currentAddress.area,
                        AdditionalInfo2: $.cookie("_bb_locSrc")
                    }
                ]);
            }, 0);
        });
        vm.cancelFirstStaticPopup = function() {
            vm.firstTimeUser = false;
            $(".overlay-dropdown").fadeOut();
            $("body").removeClass("pos-fixed");
            $(".dropdown-menu1").hide();
            $(".dropbtn").removeClass("dropdown-active");
            $(".top-header").removeClass("locpops");
            $(".middle-header").css("top", "0px");
            GAService.pushToGoogleAnalytics(
                "_trackEvent",
                "city-select",
                "continue",
                vm.user.currentAddress.city_name,
                1
            );
            $(document).trigger("addressInteractionPlower", [
                {
                    EventName: "AddToCart_AddressPopUp_Continue_Clicked",
                    Location:
                        vm.user.currentAddress.city_name +
                        "|" +
                        vm.user.currentAddress.area,
                    AdditionalInfo2: $.cookie("_bb_locSrc")
                }
            ]);
        };

        //Akmai based city info - First time user will see a city message on top
        vm.locationChangeDropdown = function(cookieReset) {
            //Akmai based city info - removing city info code from the site.
            vm.cityMessage = false;
            if ($.cookie("_bb_ftvid")) {
                $.removeCookie("_bb_ftvid", {
                    path: "/",
                    domain: window.location.host.replace("www", "")
                });
            }
            if (cookieReset) {
                if ($.cookie("_bb_locSrc")) {
                    $.removeCookie("_bb_locSrc", {
                        path: "/",
                        domain: window.location.host.replace("www", "")
                    });
                }
            }
            //Akmai based city info - removing city info code from the site.

            $("#city-select").val(vm.user.currentAddress.city_name);
            vm.selectedlocation.query = "";
            var dropdown = $(".dropbtn");
            $(".user-btn").removeClass("dropdown-active");
            $(".dropdown-menu1").show();
            dropdown.addClass("dropdown-active");
            $(".overlay-dropdown").fadeIn();
            $("body").addClass("pos-fixed");

            // get slots for member address to display in this drop down menu (for static pages)
            if (
                $("button.dropbtn.xhrcalls-only").hasClass("dropdown-active") ==
                true
            ) {
                if (vm.user.is_member && vm.user.other_address) {
                    // call the below method only if user is a member & it has other address
                    vm.getslotsforaddress(vm.user.other_address);
                }
            }

            if (!vm.user.currentAddress.isdummy) {
                $(".overlay-dropdown").click(function() {
                    $(this).fadeOut();
                    $("body").removeClass("pos-fixed");
                    $(".dropdown-menu1").hide();
                    dropdown.removeClass("dropdown-active");
                    $(".top-header").removeClass("locpops");
                    $(".middle-header").css("top", "0px");
                    vm.showError = false;
                    GAService.pushToGoogleAnalytics(
                        "_trackEvent",
                        "city-select",
                        "continue",
                        vm.user.currentAddress.city_name,
                        1
                    );
                });
            }

            //For Area
            if (typeof jQuery("#area-select").autocomplete === "function") {
                jQuery("#area-select").autocomplete({
                    source: function(request, response) {
                        vm.getAreasForCity(vm.selectedlocation.query, function(
                            data
                        ) {
                            // assuming data is a JavaScript array such as
                            // ["one@abc.de", "onf@abc.de","ong@abc.de"]
                            // and not a string
                            formatted = [];
                            for (var i = 0; i < data.length; i++) {
                                if (data[i].display_name === data[i].pincode) {
                                    data[i].label =
                                        data[i].display_name +
                                        " , " +
                                        vm.selectedlocation.city.name;
                                } else {
                                    data[i].label =
                                        data[i].display_name +
                                        "-" +
                                        data[i].pincode +
                                        "," +
                                        vm.selectedlocation.city.name;
                                }

                                formatted.push(data[i]);
                            }
                            response(formatted);
                        });
                    },
                    select: function(event, ui) {
                        var angularElement = angular.element(
                            document.getElementById("headercontroller")
                        );
                        angularElement.scope().vm.onSelect(ui.item);
                        $scope.$digest();
                    },
                    minLength: 3
                });

                //For City
                jQuery("#city-select")
                    .autocomplete({
                        source: jqueryAutoSelectCityArray,
                        select: function(event, ui) {
                            var angularElement = angular.element(
                                document.getElementById("headercontroller")
                            );
                            angularElement.scope().vm.onSelectCity(ui.item);
                            $scope.$digest();
                            $("#area-select").focus();
                            //                        if (vm.user.currentAddress.isdummy) {
                            //                            vm.skipandexplore(ui.item.id);
                            //                        }
                        },
                        minLength: 0
                    })
                    .focus(function() {
                        "use strict";
                        $("#city-select").val("");
                        $("#city-select").autocomplete(
                            "search",
                            $("#city-select").val()
                        );
                        vm.selectedlocation.query = "";
                    });
            }
            $(".overlay-dropdown").click(function() {
                $("#city-select").autocomplete("close");
            });
            if (!vm.dont_send_changemylocation_event) {
                $(document).trigger("addressInteractionPlower", [
                    {
                        EventName: "ChangeMyLocation_Shown",
                        Location:
                            vm.user.currentAddress.city_name +
                            "|" +
                            vm.user.currentAddress.address_display_name
                    }
                ]);
            }
            vm.dont_send_changemylocation_event = false;
        };
        //     desktop view city dropdown

        //Akmai based city info - First time user will see a city message on top
        vm.cityMessageClose = function() {
            vm.cityMessage = false;
            $.removeCookie("_bb_ftvid", {
                path: "/",
                domain: window.location.host.replace("www", "")
            });
        };

        vm.loginClick = function() {
            window.location = "/"
            localStorage.setItem( 'newLogin', true );
            localStorage.setItem( 'next', window.location.pathname + window.location.search );
        };


        //User clicks add button on a product for the first time without choosing city / login
        $rootScope.$on("FirstTimeUser", function() {
            vm.firstTimeUser = true;
            vm.dont_send_changemylocation_event = true;
            vm.locdropdown();
            $(document).trigger("addressInteractionPlower", [
                {
                    EventName: "AddToCart_AddressPopUp_Shown",
                    Location:
                        vm.user.currentAddress.city_name +
                        "|" +
                        vm.user.currentAddress.area,
                    AdditionalInfo2: $.cookie("_bb_locSrc")
                }
            ]);
        });

        vm.cancelFirstPopup = function() {
            vm.firstTimeUser = false;
            $("#city-drop-overlay").fadeToggle();
            $("body").removeClass("toggle-scroll");
            $(".new-to-bb").removeClass("drop-z-index");
            $(".dropdown.new-to-bb").removeClass("open");
            $(".top-header").removeClass("locpops");
            $(".bb-brand-section").css("top", "0px");
            GAService.pushToGoogleAnalytics(
                "_trackEvent",
                "city-select",
                "continue",
                vm.user.currentAddress.city_name,
                1
            );
            if (!vm.user.is_member) {
                $(document).trigger("addressInteractionPlower", [
                    {
                        EventName: "AddToCart_AddressPopUp_Continue_Clicked",
                        Location:
                            vm.user.currentAddress.city_name +
                            "|" +
                            vm.user.currentAddress.area,
                        AdditionalInfo2: $.cookie("_bb_locSrc")
                    }
                ]);
            } else {
                if (vm.user.currentAddress.is_partial) {
                    $(document).trigger("addressInteractionPlower", [
                        {
                            EventName:
                                "Login_PartialAddressPopUp_Continue_Clicked",
                            Location:
                                vm.user.currentAddress.city_name +
                                "|" +
                                vm.user.currentAddress.area,
                            AdditionalInfo2: $.cookie("_bb_locSrc")
                        }
                    ]);
                }
            }
        };
        vm.changeFirstPopup = function() {
            vm.firstTimeUser = !vm.firstTimeUser;
            $(document).trigger("addressInteractionPlower", [
                {
                    EventName: "AddToCart_AddressPopUp_ChangeCity_Clicked",
                    Location:
                        vm.user.currentAddress.city_name +
                        "|" +
                        vm.user.currentAddress.area,
                    AdditionalInfo2: $.cookie("_bb_locSrc")
                }
            ]);
        };

        //Akmai based city info - First time user will see a city message on top
        vm.locdropdown = function(cookieReset) {
            //Akmai based city info - removing city info code from the site.
            vm.cityMessage = false;
            if ($.cookie("_bb_ftvid")) {
                $.removeCookie("_bb_ftvid", {
                    path: "/",
                    domain: window.location.host.replace("www", "")
                });
            }
            if (cookieReset) {
                if ($.cookie("_bb_locSrc")) {
                    $.removeCookie("_bb_locSrc", {
                        path: "/",
                        domain: window.location.host.replace("www", "")
                    });
                }
            }

            //Akmai based city info - removing city info code from the site.

            $("#city-drop-overlay").fadeToggle();
            $("body").toggleClass("toggle-scroll");
            $(".new-to-bb").toggleClass("drop-z-index");
            $(".dropdown.new-to-bb").toggleClass("open");

            // get slots for member address to display in this drop down menu (for custom pages)
            if (
                $(".dropdown.new-to-bb.xhrcalls-only").hasClass("open") == true
            ) {
                if (vm.user.is_member && vm.user.other_address) {
                    // call the below method only if user is a member & it has other address
                    vm.getslotsforaddress(vm.user.other_address);
                }
            }

            if (!vm.user.currentAddress.isdummy) {
                $("#city-drop-overlay").click(function() {
                    $("#city-drop-overlay").fadeOut("slow");
                    $("body").removeClass("toggle-scroll");
                    $(".new-to-bb").removeClass("drop-z-index");
                    $(".dropdown.new-to-bb").removeClass("open");
                    $(".top-header").removeClass("locpops");
                    $(".bb-brand-section").css("top", "0px");
                    vm.showError = false;
                    vm.firstTimeUser = false;
                    GAService.pushToGoogleAnalytics(
                        "_trackEvent",
                        "city-select",
                        "continue",
                        vm.user.currentAddress.city_name,
                        1
                    );
                });
            }
            vm.selectedlocation.cityquery = vm.address_city_name;
            vm.selectedlocation.city.name = vm.address_city_name;
            vm.selectedlocation.city.id = vm.address_city_id;
            vm.selectedlocation.query = "";
            if (!vm.dont_send_changemylocation_event) {
                if (!vm.user.is_member) {
                    $(document).trigger("addressInteractionPlower", [
                        {
                            EventName: "ChangeMyLocation_Shown",
                            Location:
                                vm.address_city_name +
                                "|" +
                                vm.user.currentAddress.address_display_name
                        }
                    ]);
                } else {
                    if (!vm.user.currentAddress.is_partial) {
                        $(document).trigger("addressInteractionPlower", [
                            {
                                EventName: "ChangeMyLocation_Shown",
                                Location:
                                    vm.address_city_name +
                                    "|" +
                                    vm.user.currentAddress.address_display_name
                            }
                        ]);
                    } else {
                        $(document).trigger("addressInteractionPlower", [
                            {
                                EventName: "Login_PartialAddressPopUp_Shown",
                                Location:
                                    vm.user.currentAddress.city_name +
                                    "|" +
                                    vm.user.currentAddress.area,
                                AdditionalInfo2: $.cookie("_bb_locSrc")
                            }
                        ]);
                    }
                }
            }
            vm.dont_send_changemylocation_event = false;
            vm.showNocityMsg = "Sorry! We couldn\'t find any choices...";
        };

        vm.locdropclose = function() {
            $("#city-drop-overlay").fadeOut();
            $("body").removeClass("toggle-scroll");
            $(".new-to-bb").removeClass("drop-z-index");
            $(".dropdown.new-to-bb").removeClass("open");
        };
        vm.loginClicked = function($event) {
            localStorage.setItem("nexUrl",window.location.pathname);
            data = $event.currentTarget.getAttribute("data-logininteraction");
            $(document).trigger("loginInteractions", [data]);
        };
        vm.handleLogin = function() {
            vm.changeFirstPopup();
            document.getElementById('city-drop-overlay').click();
            vm.openLoginAndSignupModal('login');
        };
        vm.is_ie = function(){
            var undef,
                v = 3,
                div = document.createElement('div'),
                all = div.getElementsByTagName('i');
            while (
                div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
                all[0]
            );
            return v > 4 ? v : undef;

        };
        vm.openLoginAndSignupModal = function(tab, next) {
            if(vm.is_ie() < 10) {
                window.location.href = "/auth/"+tab+"/?next="+next;
            }
            next = location.href;
            // if(tab=='login')
            //  AbstractbbSnowplow.manualInvocation('LoginPlower',{'EventName':'Login_Clicked','EventSubGroup':'login','Action':'loginClick'});
            //  console.log('popup method called');
            var loginSignupModal = $uibModal.open({
                templateUrl:
                    "app/templates/innertemplates/loginAndSignupBaseTemplate.html",
                scope: $scope,
                controller: "loginAndSignupBase",
                controllerAs: "loginAndSignupBase",
                windowClass: "signup-modal",
                resolve: {
                    modalData: function() {
                        return {
                            tab: tab,
                            next: next || "/",
                            pageContext: "nb"
                        };
                    }
                },
                backdrop: "static",
                keyboard: false
            });
            loginSignupModal.result.then(
                function(result) {
                    //  console.log(result);
                },
                function() {
                    //  console.log('modal closed');
                }
            );
        };
        window.openLoginModal = vm.openLoginAndSignupModal;
        vm.logout = function() {
            if(window.FB) {
                window.FB.logout(function(response) {
                    // user is now logged out
                    console.log(response);
                });
            }
            $window.location.href = "/auth/logout/?nc=md&page=custom";
            sessionStorage.clear();
            if (!window.tdlSsoAuth) return;
            window.tdlSsoAuth
            .deleteSession(localStorage.getItem("access_token"))
            .then(function() {
                console.log("User signedout.");
                localStorage.clear();
            });
        };
        vm.closeOrderAssistant = function() {
            vm.showOrderAssistant = false;
            sessionStorage.setItem("orderAssistant", "hide");
        }
        vm.isSLPFlow = function () {
            return localStorage.getItem("authFlow") === "seperateTab" ? false : true;
        }
        activate();
    }
})();
/**
 * Created by nikhil1989 on 12/2/16.
 */
(function() {
  angular.module("app.layout").factory("HeaderDataservice", HeaderDataservice);

  HeaderDataservice.$inject = ["$http", "$q", "$window"];

  function HeaderDataservice($http, $q, $window) {
    var isPrimed = false;
    var primePromise;
    var shops_data = null;
    var services = {
      getPageInfo: getPageInfo,
      getLeftMenu: getLeftMenu,
      getShops: getShops,
      searchProducts: searchProducts,
      ready: ready,
      getSubcategory: getSubcategory,
      getAreasForCity: getAreasForCity,
      getRequestQueue: getRequestQueue,
      bbstarAutoRenewalPopupViewed: bbstarAutoRenewalPopupViewed
    };

    function make_req_url(url) {
      return (window.location.protocol == "https:" ? "/auth" : "") + url;
    }

    return services;

    function searchProducts(searchPhrase, cityId, sid) {
      "use strict";
      function searchProductsComplete(response) {
        return response.data;
      }
      ////product/search/auto/?term=app&city_id=1&_=1456485345592".
      return $http
        .get(
          "/productservice/autocomplete/?term=" +
            encodeURIComponent(searchPhrase) +
            "&city_id=" +
            cityId +
            "&_=" +
            sid
        )
        .then(searchProductsComplete);
    }

    function getPageInfo() {
      function getPageInfoComplete(response) {
        "use strict";
        shops_data = response.data.shops;
        shops_data.express_closed = response.data.express_closed;
        localStorage.setItem("program_id", response && response.data && response.data.bb_star_membership_info && response.data.bb_star_membership_info.program_id);
        return response.data;
      }

      var cache = true;
      if ($window.remove_cache) {
        return $http
          .get(
            make_req_url("/get_page_data/?cai=" + $window.CURRENT_ADDRESS_ID),
            {
              headers: { "Cache-Control": "no-cache" }
            }
          )
          .then(getPageInfoComplete);
      }
      return $http
        .get(make_req_url("/get_page_data/?cai=" + $window.CURRENT_ADDRESS_ID))
        .then(getPageInfoComplete);
    }

    function bbstarAutoRenewalPopupViewed() {
      var responseData = {
        notification_type: "bbstar_expiry",
        member_id: $.cookie("_bb_mid"),
        button_operation: "cancel", // cancel, ok, close
        additional_data: {}
      };

      return $http({
        url: "/mapi/v3.5.1/notification-response/",
        method: "POST",
        data: responseData
      }).then(
        function(response) {
          return response.data; // success
        },
        function(response) {
          // optional
          return response; // failed
        }
      );
    }

    function getLeftMenu() {
      function getLeftMenuComplete(response) {
        "use strict";
        return response.data;
      }
      var get_menu_url = "/get_menu/?";
      var city_hidden_input_elem = document.getElementById("city_id");
      if (city_hidden_input_elem && city_hidden_input_elem.value) {
        get_menu_url += "city_id=" + Number(city_hidden_input_elem.value);
      } else {
        get_menu_url += "cai=" + $window.CURRENT_ADDRESS_ID;
      }
      return $http.get(make_req_url(get_menu_url)).then(getLeftMenuComplete);
    }

    function getShops() {
      function getShopsComplete(response) {
        "use strict";
        return response.data;
      }
      return $q(function(resolve, reject) {
        resolve(shops_data);
      });
    }

    function prime() {
      // This function can only be called once.
      if (primePromise) {
        return primePromise;
      }
      primePromise = $q.when(true).then(success);
      return primePromise;

      function success() {
        isPrimed = true;
      }
    }

    function ready(nextPromises) {
      var readyPromise = primePromise || prime();
      return readyPromise
        .then(function() {
          return $q.all(nextPromises);
        })
        .catch(function(e) {});
    }

    function getSubcategory(catid) {
      "use strict";
      function categoryReceived(response) {
        var chunks = [];
        if (response.data.sub_cats) {
          var chunkdata = null;
          angular.forEach(response.data.sub_cats, function(chunk) {
            var chunkdata = [];
            angular.forEach(chunk, function(subcat) {
              var processedsubcat = {
                name: subcat.sub_category[0],
                slug: subcat.sub_category[1],
                url: subcat.sub_category[2]
              };
              processedsubcat.search_term = subcat.search_term;
              if (subcat.l2_banner) {
                var formated_banners = {};
                formated_banners.type = subcat.l2_banner.type;
                angular.forEach(subcat.l2_banner.banners, function(
                  subcatbanner
                ) {
                  formated_banners[subcatbanner.display_name] = subcatbanner;
                });
                processedsubcat.banner = formated_banners;
              }
              processedsubcat.options = null;
              if (subcat.cats && subcat.cats.length > 0) {
                processedsubcat.options = [];
                angular.forEach(subcat.cats, function(option) {
                  var optiondata = {
                    name: option.cat[0],
                    slug: option.cat[1],
                    url: option.cat[2]
                  };
                  processedsubcat.options.push(optiondata);
                });
              }
              chunkdata.push(processedsubcat);
            });

            if (chunkdata) {
              chunks.push(chunkdata);
            }
          });
        }

        return chunks;
      }
      return $http
        .get(make_req_url("/get_sub_cat_menu/?category_id=" + catid))
        .then(categoryReceived);
    }

    function getAreasForCity(cityid, query, use_node) {
      function areafetchcomplete(response) {
        return response.data.response.results;
      }
      if (use_node) {
        return $http
          .get(
            "/bbplacessearch/getplaces/?term=" + query + "&city_id=" + cityid
          )
          .then(areafetchcomplete);
      } else {
        return $http
          .get(
            make_req_url("/bb/get_area/?term=" + query + "&city_id=" + cityid)
          )
          .then(areafetchcomplete);
      }
    }

    function getRequestQueue(requestlist) {
      return $q.all(requestlist).then(function(response) {
        return true;
      });
    }
  }
  angular.module("app.layout").service("loginAndSignupService", [
    "$http",
    "$q",
    function($http, $q) {
      var createFormInput = function(jsonInput) {
        var formInput = "";
        Object.keys(jsonInput).forEach(function(key) {
          formInput +=
            key + "=" + window.encodeURIComponent(jsonInput[key]) + "&";
        });
        return formInput.slice(0, -1);
      };
      this.submitForm = function(input, url, parent) {
        var requestObject = {
          method: "POST",
          url: url,
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          data: window.location.pathname.includes("bbstar")
            ? input
            : createFormInput(input) // Added for bbstar "/member/check/" Fix
        };
        var deferred = $q.defer();
        if (parent) parent.bbLoader = true;
        $http(requestObject).then(
          function(response) {
            if (parent) parent.bbLoader = false;
            deferred.resolve(response);
          },
          function(error) {
            if (parent) parent.bbLoader = false;
            deferred.reject(error);
          }
        );
        return deferred.promise;
      };

      this.postHulk = function(url, data) {
        return new window.Promise(function(resolve, reject) {
          fetch(url, {
            method: "post",
            body: JSON.stringify(data),
            credentials: "same-origin",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-CSRFToken": $.cookie("csrftoken"),
              "X-Channel": "BB-WEB",
              "X-Caller": "DVAR-SVC"
            }
          }).then(function(data) {
              if (data.status === 200 || data.status === 400) {
                data.json().then(function(data) {
                  data.success = true;
                  resolve(data);
                });
              } else if (data.status === 404) {
                return "404 not found";
              } else if (data.status ==500) {
                reject(data);
              } else reject(data);
            },
            function(e) {
              reject(e);
              console.log(e);
            }
          );
        });
      };

      // this.postHulk = function(url,input,parent){
      //     var requestObject = {
      //              method : 'POST',
      //              url    : url,
      //              headers: {
      //                 Accept: "application/json",
      //                 "Content-Type": "application/json",
      //                 "X-CSRFToken": $.cookie("csrftoken"),
      //                 "X-Channel": "BB-WEB",
      //                 "X-Caller": "DVAR-SVC"
      //             },
      //              data: input,
      //     };
      //       var deferred = $q.defer();
      //      if(parent) parent.bbLoader = true;
      //         $http(requestObject).then(function(response){
      //             if(parent) parent.bbLoader = false;
      //             if(response.status === 200 || response.status === 400) {
      //                 response.data.success = true;
      //                 deferred.resolve(response);
      //             console.log(response);
      //             } else if (response.status === 404) {
      //                 return "404 not found";
      //             } else if (response.status === 500) {
      //                 return response.statusText;
      //             }
      //         },function(error){
      //         if(parent) parent.bbLoader = false;
      //          deferred.reject(error);
      //         });
      //     return deferred.promise;

      // }

      this.getRequest = function(url, input, parent) {
        var requestObject = {
          method: "GET",
          url: url,
          params: input
        };
        var deferred = $q.defer();
        if (parent) parent.bbLoader = true;
        $http(requestObject).then(
          function(response) {
            if (parent) parent.bbLoader = false;
            deferred.resolve(response);
          },
          function(error) {
            if (parent) parent.bbLoader = false;
            deferred.reject(error);
          }
        );
        return deferred.promise;
      };
      this.fb_login = function(page_type, referralCode) {
        // add new fblogin logic here
        // if (typeof _gaq !== "undefined")  {
        // _gaq.push(['_trackEvent','Login', 'Login Action', 'Facebook Login' ]);
        // }
        if (window.gtag != undefined) {
          gtag("event", "Login Action", { method: "Facebook" });
        }

        var href = "/auth/fb/login/?sl=" + page_type;
        if (referralCode && typeof referralCode == "string") {
          href += "&ref_code=" + encodeURIComponent(referralCode);
        }
        location.href = href;
      };

      this.gplus_login = function(page_type, referralCode) {
        // if (typeof _gaq !== "undefined"){
        //  _gaq.push(['_trackEvent','Login', 'Login Action', 'Google Login' ]);
        // }

        if (window.gtag != undefined) {
          gtag("event", "Login Action", { method: "Google" });
        }

        var href = "/auth/gplus/login/?sl=" + page_type;
        if (referralCode && typeof referralCode == "string") {
          href += "&ref_code=" + encodeURIComponent(referralCode);
        }
        location.href = href;
      };

      this.get_captcha_url = function() {
        return $http.get("/captcha/get_new_captcha/").then(function(response) {
          return response;
        });
      };
    }
  ]);
})();

(function() {
    "use strict";
    megaNavTemplate.$inject = ['$timeout'];
    megaNavStickyTemplate.$inject = ['$timeout'];
    cartController.$inject = ['$scope', '$rootScope', 'UserDataservice', '$timeout', '$window', '$uibModal', '$cookies'];
    angular.module('app.layout')
        .directive('megaNavTemplate', megaNavTemplate)
        .directive('megaNavStickyTemplate', megaNavStickyTemplate)
        .directive('leftSubcategoryTemplate', l2CategorymenuTemplate)
        .directive('searchProductsTemplate', searchProductsTemplate)
        .directive('bigbasketCartTemplate', bigbasketCartTemplate);

    function cartController($scope, $rootScope, UserDataservice, $timeout, $window, $uibModal, $cookies) {
        var vm = this;
        vm.cart = {};
        vm.cart.cart_no_items = $window.CART;
        vm.updateCartQuantity = updateCartQuantity;
        vm.goToBasketPage = goToBasketPage;
        vm.is_ie = is_ie;
        vm.deleteFromBasket = deleteFromBasket;
        vm.decreamentQuantity = decreamentQuantity;
        vm.increamentQuantity = increamentQuantity;
        vm.updateOldPage = updateOldPage;
        vm.updateTheOldWidget = updateTheOldWidget;
        vm.isMember = isMember;
        vm.getMemberinfo = getMemberinfo;
        vm.grandTotal = grandTotal;
        vm.USED_STATIC_URL = USED_STATIC_URL;
        vm.fb_login = fb_login;
        vm.gplus_login = gplus_login;
        $rootScope.cart = vm.cart;
        vm.getCartDetails = getCartDetails;
        vm.sendDataToGTM = sendDataToGTM;
        vm.showBasket = showBasket;
        vm.hideBasket = hideBasket;
        vm.basketDrop = false;
        vm.timer = {};


        function fb_login(page_type) {
            //_gaq.push(['_trackEvent', 'Login', 'Login Action', 'Facebook Login']);
            location.href = '/auth/fb/login/?sl=' + page_type;
        }

        function gplus_login(page_type) {
            //_gaq.push(['_trackEvent', 'Login', 'Login Action', 'Google Login']);
            location.href = "/auth/gplus/login/?sl=" + page_type;

        }

        function isMember() {
            return $rootScope.ismember;
        }

        function getMemberinfo() {
            vm.memberinfo = UserDataservice.getmembername();
        }

        function grandTotal(total, deliveryCharge) {
            if (Number(total) >= 1000) {
                return total;
            } else {
                return Number(deliveryCharge) + Number(total);
            }
        }

        function deleteFromBasket(cartItem) {
            UserDataservice.deleteFromBasket(cartItem.pid, cartItem.quantity, $rootScope.sid).then(function(data) {
                if (data.success) {
                    var cartItemIndex = R.findIndex(R.propEq('product_id', cartItem.product_id))(vm.cart.items);
                    vm.cart.items.splice(cartItemIndex, 1);
                    $('#totalNumberOfCartItems').html(data.num_items + ' items');
                    $('#mobiletotalNumberOfCartItems').html(data.num_items);
                    $rootScope.$broadcast('CART_ITEM_CHANGED', {
                        sku: cartItem.pid,
                        qty: 0
                    });
                    updateOldPage(cartItem.pid, 0);
                    updateTheOldWidget(cartItem.pid, data.basket_widget);
                    typeof(updateEngagementStore) === typeof(Function) ? updateEngagementStore(cartItem.pid, 0): '';
                    var salePrice = Number(cartItem.mrp) + Number(cartItem.saving);
                    $(document).trigger('basketInteractionsPlowerWithAngular', [{
                        'EventName': 'Basket_Remove',
                        'SkuID': cartItem.pid,
                        'Quantity': cartItem.quantity,
                        'UnitMrp': salePrice,
                        'UnitSalePrice': Number(cartItem.mrp),
                        'ScreenInPageContext': 'basket'
                    }]);
                    vm.getCartDetails();
                }
            });
            var itemDecrement = document.getElementById('sku_to_update');
                if (itemDecrement) {
                    itemDecrement.value = cartItem.pid;
                    itemDecrement.click();
                }
        }

        // mouseenter event
        function showBasket() {
            vm.basketEmptyMsg = "Your basket is empty. Start shopping now!";
            if (!vm.showbb) {
                vm.showbb = true;
                vm.timer = $timeout(function() {
                    vm.basketDrop = true;
                    vm.getCartDetails();
                    if (vm.cart.cart_no_items != 0) {
                        vm.sendDataToGTM(vm.cart)
                    }
                }, 500);
            }

        }

        // mouseleave event
        function hideBasket() {
            if (vm.showbb) {
                vm.showbb = false;
                $timeout.cancel(vm.timer);
                vm.basketDrop = false;
            }

        }

        function updateCartQuantity(cartItem) {
            if ($.isNumeric(cartItem.quantity)) {
                if (cartItem.quantity > 0 && cartItem.quantity < 25) {
                    UserDataservice.updateCartQuantity(cartItem.pid, Number(cartItem.quantity), $rootScope.sid).then(function(data) {
                        if (data.success) {
                            cartItem.quantity = data.ana_md.qty;
                            $rootScope.$broadcast('CART_ITEM_CHANGED', {
                                sku: cartItem.pid,
                                qty: cartItem.quantity
                            });
                            updateOldPage(cartItem.pid, cartItem.quantity);
                            typeof(updateEngagementStore) === typeof(Function) ? updateEngagementStore(cartItem.pid, 0): ''
                        }
                    });
                } else if (Number(cartItem.quantity) === 0) {
                    deleteFromBasket(cartItem);
                }
            }
        }

        function decreamentQuantity(cartItem) {

            if (Number(cartItem.quantity) > 1) {
                var quantity = Number(cartItem.quantity) - 1;
                UserDataservice.updateCartQuantity(cartItem.pid, quantity, $rootScope.sid).then(function(data) {
                    if (data.success) {
                        cartItem.quantity = data.ana_md.qty;
                        $rootScope.$broadcast('CART_ITEM_CHANGED', {
                            sku: cartItem.pid,
                            qty: quantity
                        });
                        updateOldPage(cartItem.pid, quantity);
                        typeof(updateEngagementStore) === typeof(Function) ? updateEngagementStore(cartItem.pid, 0): '';
                        var salePrice = Number(cartItem.mrp) + (Number(data.p_saving) / data.ana_md.qty);
                        $(document).trigger('basketInteractionsPlowerWithAngular', [{
                            'EventName': 'Basket_Decrement',
                            'SkuID': cartItem.pid,
                            'Quantity': 1,
                            'UnitMrp': salePrice,
                            'UnitSalePrice': Number(cartItem.mrp),
                            'ScreenInPageContext': 'basket'
                        }]);
                        vm.getCartDetails();
                    }
                });
            } else {
                deleteFromBasket(cartItem);
            }
        }

        function updateOldPage(pid, quantity) {
            if (window.location.pathname === '/basket/&nc=basket') {
                $("#p_" + pid).val(quantity);
                refresh();
            } else {
                $("#p_" + pid).val(quantity + ' in basket');
            }
            $("#p" + pid + '_cart').val(quantity);
        }

        function updateTheOldWidget(pid, basket_widget) {
            init_page_data();
            init_basket();
            $("li[name='widget_" + pid + "'] .uiv2-add-to-basket").html(basket_widget);
            init_a2c_for_selector('li[name="widget_' + pid + '"] .a2c');
            if ($('li[name="widget_' + pid + '"].uiv2-selected-product').length >= 1) {
                $('li[name="widget_' + pid + '"]').removeClass('uiv2-selected-product');
            }
            var is_pd_page = $("#a2c-pd-" + pid).val();
            if (is_pd_page == 1) {
                $('li[name="widget_' + pid + '"]').removeClass('uiv2-selected-product');
            }
        }

        function increamentQuantity(cartItem) {
            if (Number(cartItem.quantity) < 25) {
                var quantity = Number(cartItem.quantity) + 1;
                UserDataservice.updateCartQuantity(cartItem.pid, quantity, $rootScope.sid).then(function(data) {
                    if (data.success) {
                        cartItem.quantity = data.ana_md.qty;
                        $rootScope.$broadcast('CART_ITEM_CHANGED', {
                            sku: cartItem.pid,
                            qty: quantity
                        });
                        updateOldPage(cartItem.pid, quantity);
                        typeof(updateEngagementStore) === typeof(Function) ? updateEngagementStore(cartItem.pid, 0): '';
                        vm.getCartDetails();
                        var salePrice = Number(cartItem.mrp) + (Number(data.p_saving) / data.ana_md.qty);
                        $(document).trigger('basketInteractionsPlowerWithAngular', [{
                            'EventName': 'Basket_Increment',
                            'SkuID': cartItem.pid,
                            'Quantity': 1,
                            'UnitMrp': salePrice,
                            'UnitSalePrice': Number(cartItem.mrp),
                            'ScreenInPageContext': 'basket'
                        }]);
                    }
                });
            }
        }
        function is_ie() {
            var undef,
                v = 3,
                div = document.createElement('div'),
                all = div.getElementsByTagName('i');
            while (
                div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
                all[0]
            );
            return v > 4 ? v : undef;
        }
        function goToBasketPage(cart_no_items) {
            vm.basketEmptyMsg = "Your basket is empty. Start shopping now!";
            var isB2B = window.ISB2B=="True";
            $(document).trigger('screenViewReferralsEvent', [{}]);
            if (cart_no_items > 0) {
                localStorage.setItem("nexUrl",  "/basket/?ver=1");
              //  location.href = "/basket/?ver=1";
                if ('hpcp' === PAGE_TYPE && !$cookies.get('_bb_mid') && typeof $uibModal.open == 'function' && window.NEW_LOGIN_FLOW) {
                   window.location.href = "/auth/login/";
                   return;
                    if (is_returning_user !== undefined && is_returning_user) {
                        var tab = 'login';
                    } else {
                        var tab = 'signup';
                    }
                     if(isB2B && tab=='signup') {
                         location.href="/signup/"
                         return;
                     }
                    if(vm.is_ie() < 10) {
                        window.location.href = "/auth/"+tab+"/?next="+"/basket/?ver=1";
                    }

                    var loginSignupModal = $uibModal.open({
                        templateUrl: 'app/templates/innertemplates/loginAndSignupBaseTemplate.html',
                        scope: $scope,
                        controller: 'loginAndSignupBase',
                        controllerAs: 'loginAndSignupBase',
                        resolve: {
                            modalData: function() {
                                return {
                                    tab: tab,
                                    pageContext: "basket",
                                    next: '/basket/?ver=1'
                                }
                            }
                        },
                        backdrop: 'static',
                        windowClass     : 'signup-modal',
                        keyboard: false
                    });
                    loginSignupModal.result.then(function(result) {
                        //  console.log(result);
                    }, function() {
                        //  console.log('modal closed');
                    });
                } else

                    location.href = "/basket/?ver=1";

            }
        }

        function sendDataToGTM(cartdata) {
            if (cartdata.items) {
                var pc = cartdata.items;
                var proddata = [];
                for (var i = 0; i < pc.length; i++) {
                    proddata.push({
                        'id': pc[i]['pid'],
                        'price': pc[i]['mrp'],
                        'quantity': pc[i]['quantity']
                    });
                }
                dataLayer.push({
                    'view_basket_details': proddata
                });
                dataLayer.push({
                    'event': 'view_basket_mouse_hover'
                });
            }
        }

        function getCartDetails() {
            return UserDataservice.getCart().then(function(cart) {
                vm.cart = cart;
                if (vm.cart.basket_banner != null) {
                    vm.cart.basket_banner['Image name'] = MEDIA_URL + vm.cart.basket_banner['Image name'];
                }
                if (Number(cart.cart_total) >= Number(cart.delivery_limit)) {
                    vm.cart.free_delivery = true;
                } else {
                    vm.cart.free_delivery = false;
                }
                $('#totalNumberOfCartItems').html(vm.cart.cart_no_items + ' items');
                $('#mobiletotalNumberOfCartItems').html(vm.cart.cart_no_items);
            });
        }

        function callCartForCustomPagesAndHomePage() {
            if (PAGE_TYPE != undefined && PAGE_TYPE === 'hpcp') {
                //Get cart call on page load should be avoided hence commented below line to fallback incase any error.
                //getCartDetails();
            }
        }
        callCartForCustomPagesAndHomePage();

        $rootScope.$on('getCart', function(event, product) {
            "use strict";
            vm.getCartDetails();
        });
    }

    // This is crazy thing to do to make old work with new
    var oldPageCompatibilityCartController = cartController;
    oldPageCompatibilityCartController.$inject = ['$scope', '$rootScope', 'UserDataservice', '$timeout', '$window', '$uibModal', '$cookies'];
    angular.module('app.layout').controller('oldPageCompatibilityCartController', oldPageCompatibilityCartController);


    function bigbasketCartTemplate() {
        return {
            restrict: 'E',
            templateUrl: 'app/templates/innertemplates/bigbasketCartTemplate.html',
            scope: {},
            controller: ['$scope', '$rootScope', 'UserDataservice', '$timeout', '$window', '$uibModal', '$cookies', cartController],
            controllerAs: 'vm'
        };


    }

    function searchProductsTemplate() {
        return {
            restrict: 'E',
            templateUrl: 'app/templates/innertemplates/searchProductsTemplate.html',
            link: link
        };

        function link(scope, element, attrb) {

        }
    }


    function megaNavTemplate($timeout) {
        return {
            restrict: 'E',
            templateUrl: 'app/templates/innertemplates/megaNav.html',
            link: link
        };

        function link(scope, element, attrb) {

        }
    }

    function megaNavStickyTemplate($timeout) {
        return {
            restrict: 'E',
            templateUrl: 'app/templates/innertemplates/megaNavSticky.html',
            link: link
        };

        function link(scope, element, attrb) {

        }
    }

    l2CategorymenuTemplate.$inject = ['$timeout'];

    function l2CategorymenuTemplate($timeout) {
        return {
            restrict: 'E',
            templateUrl: 'app/templates/innertemplates/DesktopLeftMenuL2template.html',
            link: link
        };

        function link(scope, element, attrb) {

        }
    }
    angular.module("app.layout")
        .filter("ToInt", ["$filter", function($filter) {
                return function(input) {
                    if(input){
                        input = parseFloat(input);
                        input = input.toFixed(input % 1 === 0 ? 0 : 2);
                        return "" + input.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "");
                    }
                    else{
                        return "0";
                    }
                };
            }]);

})();
//For Tab inside Tab feature
(function ($) {
    "use strict";

    /* ==============================================
    TABBED HOVER -->
    =============================================== */

    $('.nav-pills > li ').hover(function () {
        if ($(this).hasClass('hoverblock'))
            return;
        else
            $(this).find('a').tab('show');
    });

    $('.nav-tabs > li').find('a').click(function () {
        $(this).parent()
            .siblings().addClass('hoverblock');
    });

    /* ==============================================
    ON-SCROLL FOR HEADER -->
    =============================================== */

    jQuery(document).ready(function ($) {

        var navbar = $('#navbar-main'),
            $window = $(window);

        $('#left-menu-overlay').click(function () {
            $('#left-menu-overlay').fadeOut('slow');
            $('body').removeClass('toggle-scroll');
            $('.new-to-bb').removeClass('drop-z-index');
        });

        $(window).on('resize', function () {

            if (window.innerWidth <= 991) {
                $('#navbar-main').addClass('navbar-fixed-top');
                $('.body-wrap').css("padding-top", "70px");
                var orderAssistant = document.getElementById('order-assistant');
                if (orderAssistant) {
                    var h = orderAssistant.clientHeight;
                    $(orderAssistant).addClass('fixed');
                    navbar[0].style.top = h + 'px';
                }
            } else {
                $('.body-wrap').css("padding-top", "0px");
                navbar.removeClass('navbar-fixed-top');
                $('.search-bar input').attr("placeholder", "Search for Products..");
                $window.scroll(function () {
                    var orderAssistant = document.getElementById('order-assistant');
                    if ($window.scrollTop() >= 30) {
                        navbar.addClass('navbar-fixed-top');
                        $("body").css("padding-top", "45px");
                        /*$('.bb-brand-section img.logo').attr("src", "/static/custPage/build/content/img/bb-icon.png");*/
                        $('.bb-logo').removeClass('change-logo');
                        $('.bb-logo').addClass('icon');
                        if (orderAssistant) {
                            var h = orderAssistant.clientHeight;
                            $(orderAssistant).addClass('fixed');
                            navbar[0].style.top = h + 'px';
                        }
                    } else {
                        navbar.removeClass('navbar-fixed-top');
                        $("body").css("padding-top", "0px");
                        /*$('.bb-brand-section img.logo').attr("src", "/static/custPage/build/content/img/bb_logo.png");*/
                        $('.bb-logo').addClass('change-logo');
                        $('.bb-logo').removeClass('icon');
                        if (orderAssistant) {
                            navbar[0].style.top = '0';
                            $(orderAssistant).removeClass('fixed');
                        }

                    }
                });
            }

        }).trigger('resize'); // Trigger resize handlers.
    });

    /* ==============================================
    MENU HOVER -->
    =============================================== */
    $("#mega-desktop-navigation .dropdown").hover(
        function () {
            $(this).addClass('open')
        },
        function () {
            $(this).removeClass('open')
        }
    );

    /* ==============================================
    To Rotate the icon on the accordion placed at the footer -->
    =============================================== */

    $('div.panel-collapse').on('show.bs.collapse', function () {
        $(this).parent("div").find(".fa-chevron-right").removeClass("fa fa-chevron-right").addClass("fa fa-chevron-down");
    });
    $('div.panel-collapse').on('hide.bs.collapse', function () {
        $(this).parent("div").find(".fa-chevron-down").removeClass("fa fa-chevron-down").addClass("fa fa-chevron-right");
    });

    /* ==============================================
    To rotate the icon on offcanvas L3 Menu -->
    =============================================== */

    $('.submenu').on('click', function () {
        $(this).find('ul').slideToggle();
        $(this).find('i').toggleClass("fa-plus fa-minus");
    });

})($);


//For Modal Popup on Address Selection and to Rotate the icon on the accordion placed at the footer
$(document).ready(function () {

    //$('.start-shopping').on('click', function(){
    //	$('.error_loc_msg').slideDown();
    //});
    $('.skip').on('click', function () {
        $('.error_loc_msg').hide();
    });
    $('.register-options').on('click', function () {
        $('.visible-div').hide();
        $('.hidden-div').show();
    });
    $('.citychange').on('click', function () {
        $('.visible-div').show();
        $('.hidden-div').hide();
        $('.error_loc_msg').hide();
    });
    $('div.panel-collapse').on('show.bs.collapse', function () {
        $(this).parent("div").find(".fa-chevron-right").removeClass("fa fa-chevron-right").addClass("fa fa-chevron-down");
    });

    $('div.panel-collapse').on('hide.bs.collapse', function () {
        $(this).parent("div").find(".fa-chevron-down").removeClass("fa fa-chevron-down").addClass("fa fa-chevron-right");
    });


});


//Code for Tool Tip
$(function () {
    $('[data-toggle="tooltip"]').tooltip()
})
$(document.body).on('click', '.dropdown-menu.drop-select li a',
    function (event) {
        var $target = $(event.currentTarget);
        $target.closest('.btn-group')
            .find('[data-bind="label"]').text($target.text())
            .end()
            .children('.dropdown-toggle').dropdown('toggle');
        return false;
    });

// Code for Popup Over
$(document).ready(function () {
    $('.po-markup > .po-link-addr').popover({
        trigger: 'hover',
        html: true, // must have if HTML is contained in popover

        // get the title and conent
        title: function () {
            return $(this).parent().find('.po-title').html();
        },
        content: function () {
            return $(this).parent().find('.po-body').html();
        },

        container: 'body',
        placement: 'bottom'

    });

    //Code for create a list on product deck
    $('div.create-list').on('click.bs.dropdown', function (e) {
        var $a = $(e.target),
            is_a = $a.is('.is_a');
        if ($a.hasClass('dropdown-toggle')) {
            $('ul.dropdown-menu', this).toggle(!is_a);
            $a.toggleClass('is_a', !is_a);
        }
    }).on('mouseleave', function () {
        $('ul.dropdown-menu', this).hide();
        $('.is_a', this).removeClass('is_a');
        $(".show-list").hide();
    });

});
//Filter Sort Selection




//Filter Color Selection

$(function () {
    $('.button-checkbox').each(function () {

        // Settings
        var $widget = $(this),
            $button = $widget.find('button'),
            $checkbox = $widget.find('input:checkbox'),
            color = $button.data('color'),
            settings = {
                on: {
                    icon: 'fa fa-check'
                },
                off: {
                    icon: 'fa fa-unchecked'
                }
            };

        // Event Handlers
        $button.on('click', function () {
            $checkbox.prop('checked', !$checkbox.is(':checked'));
            $checkbox.triggerHandler('change');
            updateDisplay();
        });
        $checkbox.on('change', function () {
            updateDisplay();
        });

        // Actions
        function updateDisplay() {
            var isChecked = $checkbox.is(':checked');

            // Set the button's state
            $button.data('state', (isChecked) ? "on" : "off");

            // Set the button's icon
            $button.find('.state-icon')
                .removeClass()
                .addClass('state-icon ' + settings[$button.data('state')].icon);

            // Update the button's color
            if (isChecked) {
                $button
                    .removeClass('btn-default')
                    .addClass('btn-' + color + ' active');
            } else {
                $button
                    .removeClass('btn-' + color + ' active')
                    .addClass('btn-default');
            }
        }

        // Initialization
        function init() {

            updateDisplay();

            // Inject the icon if applicable
            if ($button.find('.state-icon').length == 0) {
                $button.prepend('<i class="state-icon ' + settings[$button.data('state')].icon + '"></i> ');
            }
        }
        init();
    });
});



$("#fileUpload").on('change', function () {

    //Get count of selected files
    var countFiles = $(this)[0].files.length;

    var imgPath = $(this)[0].value;
    var extn = imgPath.substring(imgPath.lastIndexOf('.') + 1).toLowerCase();
    var image_holder = $(".col-wrap");
    image_holder.empty();

    if (extn == "gif" || extn == "png" || extn == "jpg" || extn == "jpeg") {
        if (typeof (FileReader) != "undefined") {

            //loop for each file selected for uploaded.
            for (var i = 0; i < countFiles; i++) {

                var reader = new FileReader();
                reader.onload = function (e) {

                    if (countFiles == 4 || countFiles == 5) {
                        $(image_holder).append('<li style="flex-basis:calc(100% / 4)"><img class="img-responsive" src="' + e.target.result + '"></li> ');
                    } else if (countFiles >= 6) {
                        $(image_holder).append('<li style="flex-basis:calc(100% / 6)"><img class="img-responsive" src="' + e.target.result + '"></li> ');
                    } else {
                        alert("Please select minimum 4 images");
                    }
                }

                image_holder.show();
                reader.readAsDataURL($(this)[0].files[i]);
            }
        } else {
            alert("This browser does not support FileReader.");
        }
    } else {
        alert("Pls select only images");
    }
});

//Scroll to top code
$(document).ready(function () {
    // Hide the toTop button when the page loads.
    $("#toTop").css("display", "none");

    // This function runs every time the user scrolls the page.
    $(window).scroll(function () {
        if ($(window).scrollTop() > 200) {
            $("#toTop").fadeIn("slow");
        } else {
            $("#toTop").fadeOut("slow");
        }
    });

    // When the user clicks the toTop button, we want the page to scroll to the top.
    $("#toTop").click(function () {
        event.preventDefault();

        // Animate the scrolling motion.
        $("html, body").animate({
            scrollTop: 0
        }, "slow");
    });
});

$('.onscroll-dropdown').hover(function () {
    $(this).find('.dropdown-menu').stop(true, true).show();
}, function () {
    $(this).find('.dropdown-menu').stop(true, true).hide();
});

function make_req_url(url) {
    return (window.location.protocol == 'https:' ? '/auth' : '') + url;
}

var BasketUrlBuilder = function () {
    var addToCartUrl = make_req_url('/basket/add/');
    var delItemUrl = make_req_url('/basket/del-item/');
    var updateQtyUrl = make_req_url('/basket/qty-update/');
    var getCartUrl = make_req_url('');
    var emptyCartUrl = make_req_url('/basket/empty-basket/');
    var addListCartUrl = make_req_url('/msl/add-list-item-to-basket/');

    return {
        withNodeCartUrl: function () {
            addToCartUrl = '/basketService/add/';
            delItemUrl = '/basketService/del-item/';
            updateQtyUrl = '/basketService/update-qty/';
            getCartUrl = '';
            emptyCartUrl = '/basketService/empty-cart/';
            addListCartUrl = '/basketService/msl/add-list-item-to-basket/';
            return this;
        },
        build: function () {
            return {
                'addToCartUrl': addToCartUrl,
                'delItemUrl': delItemUrl,
                'updateQtyUrl': updateQtyUrl,
                'getCartUrl': getCartUrl,
                'emptyCartUrl': emptyCartUrl,
                'addListCartUrl': addListCartUrl
            };
        }
    };
};

function get_cookie(cookie_name) {
    var cookie_index = document.cookie.indexOf(cookie_name);
    if (cookie_index > -1) {
        var cookie_value_start_index = document.cookie.indexOf('=', cookie_index) + 2;
        var cookie_value_end_index = document.cookie.indexOf('\"', cookie_value_start_index);
        return document.cookie.substring(cookie_value_start_index, cookie_value_end_index);
    }
    return null;
}


/* ==============================================
Kapture Chat Window -->
=============================================== */

/* Include the following script without any changes */
function initializeKaptureSupport() {
    if ("object" == typeof Kapchat) return initKapchat();
    var e = document.getElementsByTagName("head")[0],
        t = document.createElement("script");
    t.type = "text/javascript", t.src = "https://www.adjetter.com/static/assets/global/plugins/supportmessenger/js/kapturecustomersupport.v2.min.js", t.onload = initKapchat, e.appendChild(t)
}
if ("undefined" == typeof jQuery) {
    var headTag = document.getElementsByTagName("head")[0],
        jqTag = document.createElement("script");
    jqTag.type = "text/javascript", jqTag.src = "https://www.adjetter.com/static/assets/global/plugins/jquery.min.js", jqTag.onload = initializeKapture, headTag.appendChild(jqTag)
} else initializeKaptureSupport(); /* Initialize Kapchat */
function initKapchat() {
    if (!get_cookie('_bb_mid')) {
        return false;
    }
    var request = $.ajax({
        url: "/get_kptur/",
        method: "GET",
    });
    request.done(function (data) {
        "use strict";
        initialize(data.ency, data.kkye);
    });
    var initialize = function (ency, kkey) {
        Kapchat.initialize({
            customercode: ency, // encrypted customer code
            key: '183456e7b3122af0e470176ba2d207a4',
            iv: kkey, // pseudo random string in hex format
            context: 'kapchat-widget-btn',
            label: 'Customer Support',
            widget: 'kp_widget_tk',
            success: function () {
                // your callback here (optional)
            },
            error: function (e) {
                console.log(e);
            }
        });
    };
}
$(document).ready(function () {
    var loc = window.location.pathname;
    var newLogin = localStorage.getItem('newLogin');
    // var branMatchId = window.location.href.indexOf("branch_match_id") > -1;
    var authModal = window.location.search.indexOf("authModal") > -1;
    var loginUrl = loc.indexOf("/auth/login/") > -1;
    var signupUrl = loc.indexOf("/auth/signup/") > -1;
    var mid = get_cookie('_bb_mid');
    var nextUrl = decodeURIComponent(window.location.search.split("next=")[1]);
    // let tab = loc.indexOf("/auth/login/") > -1 ? "/auth/login/" : "/auth/signup"

    if (newLogin || authModal || loginUrl || signupUrl) {
        if (window.location.search !== "") {
            var nextUrl = decodeURIComponent(window.location.search.split('next=')[1]);
            localStorage.setItem('newLogin', nextUrl);
        }
        if (window.location.search.indexOf("authModal") > -1) {
            var cleanUri = window.location.pathname;
            window.history.replaceState({}, document.title, cleanUri);
        }
        if (window.location.search.split("source=")[1] !== "tcp") {
            window.openLoginModal();
        }
    }
    else if (!loginUrl && !signupUrl) {
        setTimeout(function () {
            if (mid) {
                document.getElementById("kapchat-widget-btn") && document.getElementById("kapchat-widget-btn").click();
            }
            else {
                // window.openLoginModal();
            }
        }, 1000);
    }
});

(function($) {

    $.fn.menuAim = function(opts) {
        // Initialize menu-aim for all elements in jQuery collection
        this.each(function() {
            init.call(this, opts);
        });

        return this;
    };

    function init(opts) {
        var $menu = $(this),
            activeRow = null,
            mouseLocs = [],
            lastDelayLoc = null,
            timeoutId = null,
            options = $.extend({
                rowSelector: "> li",
                submenuSelector: "*",
                submenuDirection: "right",
                tolerance: 75,  // bigger = more forgivey when entering submenu
                enter: $.noop,
                exit: $.noop,
                activate: $.noop,
                deactivate: $.noop,
                exitMenu: $.noop
            }, opts);

        var MOUSE_LOCS_TRACKED = 3,  // number of past mouse locations to track
            DELAY = 300;  // ms delay when user appears to be entering submenu

        /**
         * Keep track of the last few locations of the mouse.
         */
        var mousemoveDocument = function(e) {
                mouseLocs.push({x: e.pageX, y: e.pageY});

                if (mouseLocs.length > MOUSE_LOCS_TRACKED) {
                    mouseLocs.shift();
                }
            };

        /**
         * Cancel possible row activations when leaving the menu entirely
         */
        var mouseleaveMenu = function() {
                if (timeoutId) {
                    clearTimeout(timeoutId);
                }

                // If exitMenu is supplied and returns true, deactivate the
                // currently active row on menu exit.
                if (options.exitMenu(this)) {
                    if (activeRow) {
                        options.deactivate(activeRow);
                    }

                    activeRow = null;
                }
            };

        /**
         * Trigger a possible row activation whenever entering a new row.
         */
        var mouseenterRow = function() {
                if (timeoutId) {
                    // Cancel any previous activation delays
                    clearTimeout(timeoutId);
                }

                options.enter(this);
                possiblyActivate(this);
            },
            mouseleaveRow = function() {
                options.exit(this);
            };

        /*
         * Immediately activate a row if the user clicks on it.
         */
        var clickRow = function() {
                activate(this);
            };

        /**
         * Activate a menu row.
         */
        var activate = function(row) {
                if (row == activeRow) {
                    return;
                }

                if (activeRow) {
                    options.deactivate(activeRow);
                }

                options.activate(row);
                activeRow = row;
            };

        /**
         * Possibly activate a menu row. If mouse movement indicates that we
         * shouldn't activate yet because user may be trying to enter
         * a submenu's content, then delay and check again later.
         */
        var possiblyActivate = function(row) {
                var delay = activationDelay();

                if (delay) {
                    timeoutId = setTimeout(function() {
                        possiblyActivate(row);
                    }, delay);
                } else {
                    activate(row);
                }
            };

        /**
         * Return the amount of time that should be used as a delay before the
         * currently hovered row is activated.
         *
         * Returns 0 if the activation should happen immediately. Otherwise,
         * returns the number of milliseconds that should be delayed before
         * checking again to see if the row should be activated.
         */
        var activationDelay = function() {
                if (!activeRow || !$(activeRow).is(options.submenuSelector)) {
                    // If there is no other submenu row already active, then
                    // go ahead and activate immediately.
                    return 0;
                }

                var offset = $menu.offset(),
                    upperLeft = {
                        x: offset.left,
                        y: offset.top - options.tolerance
                    },
                    upperRight = {
                        x: offset.left + $menu.outerWidth(),
                        y: upperLeft.y
                    },
                    lowerLeft = {
                        x: offset.left,
                        y: offset.top + $menu.outerHeight() + options.tolerance
                    },
                    lowerRight = {
                        x: offset.left + $menu.outerWidth(),
                        y: lowerLeft.y
                    },
                    loc = mouseLocs[mouseLocs.length - 1],
                    prevLoc = mouseLocs[0];

                if (!loc) {
                    return 0;
                }

                if (!prevLoc) {
                    prevLoc = loc;
                }

                if (prevLoc.x < offset.left || prevLoc.x > lowerRight.x ||
                    prevLoc.y < offset.top || prevLoc.y > lowerRight.y) {
                    // If the previous mouse location was outside of the entire
                    // menu's bounds, immediately activate.
                    return 0;
                }

                if (lastDelayLoc &&
                        loc.x == lastDelayLoc.x && loc.y == lastDelayLoc.y) {
                    // If the mouse hasn't moved since the last time we checked
                    // for activation status, immediately activate.
                    return 0;
                }

                // Detect if the user is moving towards the currently activated
                // submenu.
                //
                // If the mouse is heading relatively clearly towards
                // the submenu's content, we should wait and give the user more
                // time before activating a new row. If the mouse is heading
                // elsewhere, we can immediately activate a new row.
                //
                // We detect this by calculating the slope formed between the
                // current mouse location and the upper/lower right points of
                // the menu. We do the same for the previous mouse location.
                // If the current mouse location's slopes are
                // increasing/decreasing appropriately compared to the
                // previous's, we know the user is moving toward the submenu.
                //
                // Note that since the y-axis increases as the cursor moves
                // down the screen, we are looking for the slope between the
                // cursor and the upper right corner to decrease over time, not
                // increase (somewhat counterintuitively).
                function slope(a, b) {
                    return (b.y - a.y) / (b.x - a.x);
                };

                var decreasingCorner = upperRight,
                    increasingCorner = lowerRight;

                // Our expectations for decreasing or increasing slope values
                // depends on which direction the submenu opens relative to the
                // main menu. By default, if the menu opens on the right, we
                // expect the slope between the cursor and the upper right
                // corner to decrease over time, as explained above. If the
                // submenu opens in a different direction, we change our slope
                // expectations.
                if (options.submenuDirection == "left") {
                    decreasingCorner = lowerLeft;
                    increasingCorner = upperLeft;
                } else if (options.submenuDirection == "below") {
                    decreasingCorner = lowerRight;
                    increasingCorner = lowerLeft;
                } else if (options.submenuDirection == "above") {
                    decreasingCorner = upperLeft;
                    increasingCorner = upperRight;
                }

                var decreasingSlope = slope(loc, decreasingCorner),
                    increasingSlope = slope(loc, increasingCorner),
                    prevDecreasingSlope = slope(prevLoc, decreasingCorner),
                    prevIncreasingSlope = slope(prevLoc, increasingCorner);

                if (decreasingSlope < prevDecreasingSlope &&
                        increasingSlope > prevIncreasingSlope) {
                    // Mouse is moving from previous location towards the
                    // currently activated submenu. Delay before activating a
                    // new menu row, because user may be moving into submenu.
                    lastDelayLoc = loc;
                    return DELAY;
                }

                lastDelayLoc = null;
                return 0;
            };

        /**
         * Hook up initial menu events
         */
        $menu
            .mouseleave(mouseleaveMenu)
            .find(options.rowSelector)
                .mouseenter(mouseenterRow)
                .mouseleave(mouseleaveRow)
                .click(clickRow);

        $(document).mousemove(mousemoveDocument);

    };
})(jQuery);


/*! jQuery Validation Plugin - v1.16.0 - 12/2/2016
 * http://jqueryvalidation.org/
 * Copyright (c) 2016 Jörn Zaefferer; Licensed MIT */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof module&&module.exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){a.extend(a.fn,{validate:function(b){if(!this.length)return void(b&&b.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."));var c=a.data(this[0],"validator");return c?c:(this.attr("novalidate","novalidate"),c=new a.validator(b,this[0]),a.data(this[0],"validator",c),c.settings.onsubmit&&(this.on("click.validate",":submit",function(b){c.settings.submitHandler&&(c.submitButton=b.target),a(this).hasClass("cancel")&&(c.cancelSubmit=!0),void 0!==a(this).attr("formnovalidate")&&(c.cancelSubmit=!0)}),this.on("submit.validate",function(b){function d(){var d,e;return!c.settings.submitHandler||(c.submitButton&&(d=a("<input type='hidden'/>").attr("name",c.submitButton.name).val(a(c.submitButton).val()).appendTo(c.currentForm)),e=c.settings.submitHandler.call(c,c.currentForm,b),c.submitButton&&d.remove(),void 0!==e&&e)}return c.settings.debug&&b.preventDefault(),c.cancelSubmit?(c.cancelSubmit=!1,d()):c.form()?c.pendingRequest?(c.formSubmitted=!0,!1):d():(c.focusInvalid(),!1)})),c)},valid:function(){var b,c,d;return a(this[0]).is("form")?b=this.validate().form():(d=[],b=!0,c=a(this[0].form).validate(),this.each(function(){b=c.element(this)&&b,b||(d=d.concat(c.errorList))}),c.errorList=d),b},rules:function(b,c){var d,e,f,g,h,i,j=this[0];if(null!=j&&null!=j.form){if(b)switch(d=a.data(j.form,"validator").settings,e=d.rules,f=a.validator.staticRules(j),b){case"add":a.extend(f,a.validator.normalizeRule(c)),delete f.messages,e[j.name]=f,c.messages&&(d.messages[j.name]=a.extend(d.messages[j.name],c.messages));break;case"remove":return c?(i={},a.each(c.split(/\s/),function(b,c){i[c]=f[c],delete f[c],"required"===c&&a(j).removeAttr("aria-required")}),i):(delete e[j.name],f)}return g=a.validator.normalizeRules(a.extend({},a.validator.classRules(j),a.validator.attributeRules(j),a.validator.dataRules(j),a.validator.staticRules(j)),j),g.required&&(h=g.required,delete g.required,g=a.extend({required:h},g),a(j).attr("aria-required","true")),g.remote&&(h=g.remote,delete g.remote,g=a.extend(g,{remote:h})),g}}}),a.extend(a.expr.pseudos||a.expr[":"],{blank:function(b){return!a.trim(""+a(b).val())},filled:function(b){var c=a(b).val();return null!==c&&!!a.trim(""+c)},unchecked:function(b){return!a(b).prop("checked")}}),a.validator=function(b,c){this.settings=a.extend(!0,{},a.validator.defaults,b),this.currentForm=c,this.init()},a.validator.format=function(b,c){return 1===arguments.length?function(){var c=a.makeArray(arguments);return c.unshift(b),a.validator.format.apply(this,c)}:void 0===c?b:(arguments.length>2&&c.constructor!==Array&&(c=a.makeArray(arguments).slice(1)),c.constructor!==Array&&(c=[c]),a.each(c,function(a,c){b=b.replace(new RegExp("\\{"+a+"\\}","g"),function(){return c})}),b)},a.extend(a.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:a([]),errorLabelContainer:a([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(a){this.lastActive=a,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,a,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(a)))},onfocusout:function(a){this.checkable(a)||!(a.name in this.submitted)&&this.optional(a)||this.element(a)},onkeyup:function(b,c){var d=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===c.which&&""===this.elementValue(b)||a.inArray(c.keyCode,d)!==-1||(b.name in this.submitted||b.name in this.invalid)&&this.element(b)},onclick:function(a){a.name in this.submitted?this.element(a):a.parentNode.name in this.submitted&&this.element(a.parentNode)},highlight:function(b,c,d){"radio"===b.type?this.findByName(b.name).addClass(c).removeClass(d):a(b).addClass(c).removeClass(d)},unhighlight:function(b,c,d){"radio"===b.type?this.findByName(b.name).removeClass(c).addClass(d):a(b).removeClass(c).addClass(d)}},setDefaults:function(b){a.extend(a.validator.defaults,b)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:a.validator.format("Please enter no more than {0} characters."),minlength:a.validator.format("Please enter at least {0} characters."),rangelength:a.validator.format("Please enter a value between {0} and {1} characters long."),range:a.validator.format("Please enter a value between {0} and {1}."),max:a.validator.format("Please enter a value less than or equal to {0}."),min:a.validator.format("Please enter a value greater than or equal to {0}."),step:a.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function b(b){!this.form&&this.hasAttribute("contenteditable")&&(this.form=a(this).closest("form")[0]);var c=a.data(this.form,"validator"),d="on"+b.type.replace(/^validate/,""),e=c.settings;e[d]&&!a(this).is(e.ignore)&&e[d].call(c,this,b)}this.labelContainer=a(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||a(this.currentForm),this.containers=a(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var c,d=this.groups={};a.each(this.settings.groups,function(b,c){"string"==typeof c&&(c=c.split(/\s/)),a.each(c,function(a,c){d[c]=b})}),c=this.settings.rules,a.each(c,function(b,d){c[b]=a.validator.normalizeRule(d)}),a(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",b).on("click.validate","select, option, [type='radio'], [type='checkbox']",b),this.settings.invalidHandler&&a(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),a(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),a.extend(this.submitted,this.errorMap),this.invalid=a.extend({},this.errorMap),this.valid()||a(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var a=0,b=this.currentElements=this.elements();b[a];a++)this.check(b[a]);return this.valid()},element:function(b){var c,d,e=this.clean(b),f=this.validationTargetFor(e),g=this,h=!0;return void 0===f?delete this.invalid[e.name]:(this.prepareElement(f),this.currentElements=a(f),d=this.groups[f.name],d&&a.each(this.groups,function(a,b){b===d&&a!==f.name&&(e=g.validationTargetFor(g.clean(g.findByName(a))),e&&e.name in g.invalid&&(g.currentElements.push(e),h=g.check(e)&&h))}),c=this.check(f)!==!1,h=h&&c,c?this.invalid[f.name]=!1:this.invalid[f.name]=!0,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),a(b).attr("aria-invalid",!c)),h},showErrors:function(b){if(b){var c=this;a.extend(this.errorMap,b),this.errorList=a.map(this.errorMap,function(a,b){return{message:a,element:c.findByName(b)[0]}}),this.successList=a.grep(this.successList,function(a){return!(a.name in b)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){a.fn.resetForm&&a(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var b=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(b)},resetElements:function(a){var b;if(this.settings.unhighlight)for(b=0;a[b];b++)this.settings.unhighlight.call(this,a[b],this.settings.errorClass,""),this.findByName(a[b].name).removeClass(this.settings.validClass);else a.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(a){var b,c=0;for(b in a)a[b]&&c++;return c},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(a){a.not(this.containers).text(""),this.addWrapper(a).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{a(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(b){}},findLastActive:function(){var b=this.lastActive;return b&&1===a.grep(this.errorList,function(a){return a.element.name===b.name}).length&&b},elements:function(){var b=this,c={};return a(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var d=this.name||a(this).attr("name");return!d&&b.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.hasAttribute("contenteditable")&&(this.form=a(this).closest("form")[0]),!(d in c||!b.objectLength(a(this).rules()))&&(c[d]=!0,!0)})},clean:function(b){return a(b)[0]},errors:function(){var b=this.settings.errorClass.split(" ").join(".");return a(this.settings.errorElement+"."+b,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=a([]),this.toHide=a([])},reset:function(){this.resetInternals(),this.currentElements=a([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(a){this.reset(),this.toHide=this.errorsFor(a)},elementValue:function(b){var c,d,e=a(b),f=b.type;return"radio"===f||"checkbox"===f?this.findByName(b.name).filter(":checked").val():"number"===f&&"undefined"!=typeof b.validity?b.validity.badInput?"NaN":e.val():(c=b.hasAttribute("contenteditable")?e.text():e.val(),"file"===f?"C:\\fakepath\\"===c.substr(0,12)?c.substr(12):(d=c.lastIndexOf("/"),d>=0?c.substr(d+1):(d=c.lastIndexOf("\\"),d>=0?c.substr(d+1):c)):"string"==typeof c?c.replace(/\r/g,""):c)},check:function(b){b=this.validationTargetFor(this.clean(b));var c,d,e,f=a(b).rules(),g=a.map(f,function(a,b){return b}).length,h=!1,i=this.elementValue(b);if("function"==typeof f.normalizer){if(i=f.normalizer.call(b,i),"string"!=typeof i)throw new TypeError("The normalizer should return a string value.");delete f.normalizer}for(d in f){e={method:d,parameters:f[d]};try{if(c=a.validator.methods[d].call(this,i,b,e.parameters),"dependency-mismatch"===c&&1===g){h=!0;continue}if(h=!1,"pending"===c)return void(this.toHide=this.toHide.not(this.errorsFor(b)));if(!c)return this.formatAndAdd(b,e),!1}catch(j){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+b.id+", check the '"+e.method+"' method.",j),j instanceof TypeError&&(j.message+=".  Exception occurred when checking element "+b.id+", check the '"+e.method+"' method."),j}}if(!h)return this.objectLength(f)&&this.successList.push(b),!0},customDataMessage:function(b,c){return a(b).data("msg"+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase())||a(b).data("msg")},customMessage:function(a,b){var c=this.settings.messages[a];return c&&(c.constructor===String?c:c[b])},findDefined:function(){for(var a=0;a<arguments.length;a++)if(void 0!==arguments[a])return arguments[a]},defaultMessage:function(b,c){"string"==typeof c&&(c={method:c});var d=this.findDefined(this.customMessage(b.name,c.method),this.customDataMessage(b,c.method),!this.settings.ignoreTitle&&b.title||void 0,a.validator.messages[c.method],"<strong>Warning: No message defined for "+b.name+"</strong>"),e=/\$?\{(\d+)\}/g;return"function"==typeof d?d=d.call(this,c.parameters,b):e.test(d)&&(d=a.validator.format(d.replace(e,"{$1}"),c.parameters)),d},formatAndAdd:function(a,b){var c=this.defaultMessage(a,b);this.errorList.push({message:c,element:a,method:b.method}),this.errorMap[a.name]=c,this.submitted[a.name]=c},addWrapper:function(a){return this.settings.wrapper&&(a=a.add(a.parent(this.settings.wrapper))),a},defaultShowErrors:function(){var a,b,c;for(a=0;this.errorList[a];a++)c=this.errorList[a],this.settings.highlight&&this.settings.highlight.call(this,c.element,this.settings.errorClass,this.settings.validClass),this.showLabel(c.element,c.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(a=0;this.successList[a];a++)this.showLabel(this.successList[a]);if(this.settings.unhighlight)for(a=0,b=this.validElements();b[a];a++)this.settings.unhighlight.call(this,b[a],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return a(this.errorList).map(function(){return this.element})},showLabel:function(b,c){var d,e,f,g,h=this.errorsFor(b),i=this.idOrName(b),j=a(b).attr("aria-describedby");h.length?(h.removeClass(this.settings.validClass).addClass(this.settings.errorClass),h.html(c)):(h=a("<"+this.settings.errorElement+">").attr("id",i+"-error").addClass(this.settings.errorClass).html(c||""),d=h,this.settings.wrapper&&(d=h.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(d):this.settings.errorPlacement?this.settings.errorPlacement.call(this,d,a(b)):d.insertAfter(b),h.is("label")?h.attr("for",i):0===h.parents("label[for='"+this.escapeCssMeta(i)+"']").length&&(f=h.attr("id"),j?j.match(new RegExp("\\b"+this.escapeCssMeta(f)+"\\b"))||(j+=" "+f):j=f,a(b).attr("aria-describedby",j),e=this.groups[b.name],e&&(g=this,a.each(g.groups,function(b,c){c===e&&a("[name='"+g.escapeCssMeta(b)+"']",g.currentForm).attr("aria-describedby",h.attr("id"))})))),!c&&this.settings.success&&(h.text(""),"string"==typeof this.settings.success?h.addClass(this.settings.success):this.settings.success(h,b)),this.toShow=this.toShow.add(h)},errorsFor:function(b){var c=this.escapeCssMeta(this.idOrName(b)),d=a(b).attr("aria-describedby"),e="label[for='"+c+"'], label[for='"+c+"'] *";return d&&(e=e+", #"+this.escapeCssMeta(d).replace(/\s+/g,", #")),this.errors().filter(e)},escapeCssMeta:function(a){return a.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(a){return this.groups[a.name]||(this.checkable(a)?a.name:a.id||a.name)},validationTargetFor:function(b){return this.checkable(b)&&(b=this.findByName(b.name)),a(b).not(this.settings.ignore)[0]},checkable:function(a){return/radio|checkbox/i.test(a.type)},findByName:function(b){return a(this.currentForm).find("[name='"+this.escapeCssMeta(b)+"']")},getLength:function(b,c){switch(c.nodeName.toLowerCase()){case"select":return a("option:selected",c).length;case"input":if(this.checkable(c))return this.findByName(c.name).filter(":checked").length}return b.length},depend:function(a,b){return!this.dependTypes[typeof a]||this.dependTypes[typeof a](a,b)},dependTypes:{"boolean":function(a){return a},string:function(b,c){return!!a(b,c.form).length},"function":function(a,b){return a(b)}},optional:function(b){var c=this.elementValue(b);return!a.validator.methods.required.call(this,c,b)&&"dependency-mismatch"},startRequest:function(b){this.pending[b.name]||(this.pendingRequest++,a(b).addClass(this.settings.pendingClass),this.pending[b.name]=!0)},stopRequest:function(b,c){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[b.name],a(b).removeClass(this.settings.pendingClass),c&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(a(this.currentForm).submit(),this.formSubmitted=!1):!c&&0===this.pendingRequest&&this.formSubmitted&&(a(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(b,c){return c="string"==typeof c&&c||"remote",a.data(b,"previousValue")||a.data(b,"previousValue",{old:null,valid:!0,message:this.defaultMessage(b,{method:c})})},destroy:function(){this.resetForm(),a(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(b,c){b.constructor===String?this.classRuleSettings[b]=c:a.extend(this.classRuleSettings,b)},classRules:function(b){var c={},d=a(b).attr("class");return d&&a.each(d.split(" "),function(){this in a.validator.classRuleSettings&&a.extend(c,a.validator.classRuleSettings[this])}),c},normalizeAttributeRule:function(a,b,c,d){/min|max|step/.test(c)&&(null===b||/number|range|text/.test(b))&&(d=Number(d),isNaN(d)&&(d=void 0)),d||0===d?a[c]=d:b===c&&"range"!==b&&(a[c]=!0)},attributeRules:function(b){var c,d,e={},f=a(b),g=b.getAttribute("type");for(c in a.validator.methods)"required"===c?(d=b.getAttribute(c),""===d&&(d=!0),d=!!d):d=f.attr(c),this.normalizeAttributeRule(e,g,c,d);return e.maxlength&&/-1|2147483647|524288/.test(e.maxlength)&&delete e.maxlength,e},dataRules:function(b){var c,d,e={},f=a(b),g=b.getAttribute("type");for(c in a.validator.methods)d=f.data("rule"+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase()),this.normalizeAttributeRule(e,g,c,d);return e},staticRules:function(b){var c={},d=a.data(b.form,"validator");return d.settings.rules&&(c=a.validator.normalizeRule(d.settings.rules[b.name])||{}),c},normalizeRules:function(b,c){return a.each(b,function(d,e){if(e===!1)return void delete b[d];if(e.param||e.depends){var f=!0;switch(typeof e.depends){case"string":f=!!a(e.depends,c.form).length;break;case"function":f=e.depends.call(c,c)}f?b[d]=void 0===e.param||e.param:(a.data(c.form,"validator").resetElements(a(c)),delete b[d])}}),a.each(b,function(d,e){b[d]=a.isFunction(e)&&"normalizer"!==d?e(c):e}),a.each(["minlength","maxlength"],function(){b[this]&&(b[this]=Number(b[this]))}),a.each(["rangelength","range"],function(){var c;b[this]&&(a.isArray(b[this])?b[this]=[Number(b[this][0]),Number(b[this][1])]:"string"==typeof b[this]&&(c=b[this].replace(/[\[\]]/g,"").split(/[\s,]+/),b[this]=[Number(c[0]),Number(c[1])]))}),a.validator.autoCreateRanges&&(null!=b.min&&null!=b.max&&(b.range=[b.min,b.max],delete b.min,delete b.max),null!=b.minlength&&null!=b.maxlength&&(b.rangelength=[b.minlength,b.maxlength],delete b.minlength,delete b.maxlength)),b},normalizeRule:function(b){if("string"==typeof b){var c={};a.each(b.split(/\s/),function(){c[this]=!0}),b=c}return b},addMethod:function(b,c,d){a.validator.methods[b]=c,a.validator.messages[b]=void 0!==d?d:a.validator.messages[b],c.length<3&&a.validator.addClassRules(b,a.validator.normalizeRule(b))},methods:{required:function(b,c,d){if(!this.depend(d,c))return"dependency-mismatch";if("select"===c.nodeName.toLowerCase()){var e=a(c).val();return e&&e.length>0}return this.checkable(c)?this.getLength(b,c)>0:b.length>0},email:function(a,b){return this.optional(b)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a)},url:function(a,b){return this.optional(b)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(a)},date:function(a,b){return this.optional(b)||!/Invalid|NaN/.test(new Date(a).toString())},dateISO:function(a,b){return this.optional(b)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(a)},number:function(a,b){return this.optional(b)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a)},digits:function(a,b){return this.optional(b)||/^\d+$/.test(a)},minlength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(b,c);return this.optional(c)||e>=d},maxlength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(b,c);return this.optional(c)||e<=d},rangelength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(b,c);return this.optional(c)||e>=d[0]&&e<=d[1]},min:function(a,b,c){return this.optional(b)||a>=c},max:function(a,b,c){return this.optional(b)||a<=c},range:function(a,b,c){return this.optional(b)||a>=c[0]&&a<=c[1]},step:function(b,c,d){var e,f=a(c).attr("type"),g="Step attribute on input type "+f+" is not supported.",h=["text","number","range"],i=new RegExp("\\b"+f+"\\b"),j=f&&!i.test(h.join()),k=function(a){var b=(""+a).match(/(?:\.(\d+))?$/);return b&&b[1]?b[1].length:0},l=function(a){return Math.round(a*Math.pow(10,e))},m=!0;if(j)throw new Error(g);return e=k(d),(k(b)>e||l(b)%l(d)!==0)&&(m=!1),this.optional(c)||m},equalTo:function(b,c,d){var e=a(d);return this.settings.onfocusout&&e.not(".validate-equalTo-blur").length&&e.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){a(c).valid()}),b===e.val()},remote:function(b,c,d,e){if(this.optional(c))return"dependency-mismatch";e="string"==typeof e&&e||"remote";var f,g,h,i=this.previousValue(c,e);return this.settings.messages[c.name]||(this.settings.messages[c.name]={}),i.originalMessage=i.originalMessage||this.settings.messages[c.name][e],this.settings.messages[c.name][e]=i.message,d="string"==typeof d&&{url:d}||d,h=a.param(a.extend({data:b},d.data)),i.old===h?i.valid:(i.old=h,f=this,this.startRequest(c),g={},g[c.name]=b,a.ajax(a.extend(!0,{mode:"abort",port:"validate"+c.name,dataType:"json",data:g,context:f.currentForm,success:function(a){var d,g,h,j=a===!0||"true"===a;f.settings.messages[c.name][e]=i.originalMessage,j?(h=f.formSubmitted,f.resetInternals(),f.toHide=f.errorsFor(c),f.formSubmitted=h,f.successList.push(c),f.invalid[c.name]=!1,f.showErrors()):(d={},g=a||f.defaultMessage(c,{method:e,parameters:b}),d[c.name]=i.message=g,f.invalid[c.name]=!0,f.showErrors(d)),i.valid=j,f.stopRequest(c,j)}},d)),"pending")}}});var b,c={};return a.ajaxPrefilter?a.ajaxPrefilter(function(a,b,d){var e=a.port;"abort"===a.mode&&(c[e]&&c[e].abort(),c[e]=d)}):(b=a.ajax,a.ajax=function(d){var e=("mode"in d?d:a.ajaxSettings).mode,f=("port"in d?d:a.ajaxSettings).port;return"abort"===e?(c[f]&&c[f].abort(),c[f]=b.apply(this,arguments),c[f]):b.apply(this,arguments)}),a});
$(document).ready(function(e) {
    var $menu = $("#navBar");
  $("#navBar").menuAim({
     activate: activateSubmenu,  // fired on row activation
     deactivate: deactivateSubmenu  // fired on row deactivation
 });

var $menu = $("#navBar-sticky");
  $("#navBar-sticky").menuAim({
     activate: activateSubmenu,  // fired on row activation
     deactivate: deactivateSubmenu  // fired on row deactivation
 });

 
  function activateSubmenu(row) {
            var $row = $(row),
                submenuId = $row.data("submenuId"),
                $submenu = $("#" + submenuId),
                height = $menu.outerHeight(),
                width = $menu.outerWidth();

            // Show the submenu
            $submenu.css({
                display: "block",
                top: -1,
                left: width - 3,  // main should overlay submenu
                 
            });

            // Keep the currently activated row's highlighted look
            $row.find("a").addClass("maintainHover");
        }

        function deactivateSubmenu(row) {
            var $row = $(row),
                submenuId = $row.data("submenuId"),
                $submenu = $("#" + submenuId);

            // Hide the submenu and remove the row's highlighted look
            $submenu.css("display", "none");
            $row.find("a").removeClass("maintainHover");
        }

       
        $(".dropdown.full-wid .dropdown-menu li").click(function(e) {
            e.stopPropagation();
        });

        $(document).click(function() {
            $(".popover").css("display", "none");
            $("a.maintainHover").removeClass("maintainHover");
        });
});